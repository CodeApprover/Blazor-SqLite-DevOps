@page "/"
@using Blazor_SqlLite_Golf_Club.Services
@using Blazor_SqlLite_Golf_Club.Models
@inject PlayerService PlayerService
@inject GameService GameService
@inject DialogService DialogService

<div class="page">
<main>
<div class="row mt-1">

<!-- INPUT PLAYERS & GAMES -->
<div class="col-md-3">
    <div class="row mt-1">
        <!-- NEW PLAYER INPUT -->
        <RadzenTemplateForm Data="@_player" Submit="@(async (Player player) => { await Create(player); })">
            <RadzenFieldset Text="@(_player.PlayerId == 0 ? $"{_playerState} Player" : $"{_playerState} Player {_player.Firstname} {_player.Surname}")">

                <!-- INPUT PLAYER FIRSTNAME -->
                <div class="row mt-1">
                    <div class="col-md-3 align-items-center d-flex small">
                        <RadzenLabel Text="Firstname"/>
                    </div>
                    <div class="col-md-9">
                        <RadzenTextBox style="width: 80%;" Name="Firstname" @bind-Value="@_player.Firstname" required/>
                    </div>
                </div>

                <!-- INPUT PLAYER SURNAME -->
                <div class="row mt-2">
                    <div class="col-md-3 align-items-center d-flex small">
                        <RadzenLabel Text="Surname"/>
                    </div>
                    <div class="col-md-9">
                        <RadzenTextBox style="width: 80%;" Name="Surname" @bind-Value="@_player.Surname" required/>
                    </div>
                </div>

                <!-- INPUT PLAYER EMAIL -->
                <div class="row mt-2">
                    <div class="col-md-3 align-items-center d-flex small">
                        <RadzenLabel Text="Email"/>
                    </div>
                    <div class="col-md-9">
                        <RadzenTextBox style="width: 80%" Name="Email" @bind-Value="@_player.Email"/>
                        <RadzenEmailValidator Component="Email" Text="Enter email" required/>
                    </div>
                </div>

                <!-- INPUT PLAYER GENDER -->
                <div class="row mt-3">
                    <div class="col-md-12">
                        <div class="form-check form-check-inline small">
                            <input class="form-check-input" type="radio" name="gender" id="male" value="M" checked="@(_player.Gender == "M")" @onchange="@(() => _player.Gender = "M")">
                            <label class="form-check-label" for="male">Male</label>
                        </div>
                        <div class="form-check form-check-inline small">
                            <input class="form-check-input" type="radio" name="gender" id="female" value="F" checked="@(_player.Gender == "F")" @onchange="@(() => _player.Gender = "F")">
                            <label class="form-check-label" for="female">Female</label>
                        </div>
                        <div class="form-check form-check-inline small">
                            <input class="form-check-input" type="radio" name="gender" id="other" value="O" checked="@(_player.Gender == "O")" @onchange="@(() => _player.Gender = "O")">
                            <label class="form-check-label" for="other">Other</label>
                        </div>
                    </div>
                </div>

                <!-- PLAYER HANDICAP & SUBMIT-->
                <div class="row mt-4">

                    <div class="col-md-7 small d-flex">

                        <!-- INPUT PLAYER HANDICAP -->
                        <RadzenLabel Text="Handicap"/>
                        <input type="number" class="form-control" style="width: 50%" id="handicap" min="0.1" max="50.0" step="0.1"
                               value="@(_player.Handicap == 0 ? "15.0" : _player.Handicap.ToString("0.0"))"
                               @oninput="@(e => { if (double.TryParse(e.Value as string, out var parsedValue)){ _player.Handicap = Math.Min(Math.Max(0, parsedValue), 50); } })" required/>
                    </div>
                    <div class="col-md-5 d-flex">

                        <!-- NEW PLAYER SUBMIT -->
                        <RadzenButton ButtonType="ButtonType.Submit" Text="@_playerState" Icon="accessibility"/>
                    </div>
                </div>

            </RadzenFieldset>
        </RadzenTemplateForm>
    </div>
    <div class="row mt-4">
        <!-- NEW GAME INPUT -->
        <RadzenTemplateForm Data="@_game" Submit="@(async (Game game) => { await Create(game); })">

            <!-- NEW GAME TITLE -->
            <RadzenFieldset Text="@(_game.GameId == 0 ? $"{_gameState} Game" : $"{_gameState} Game {_game.GameId}")">

                <div class="row mt-1">

                    <!-- INPUT GAME CAPTAIN -->
                    <div class="col-md-3">
                        <RadzenLabel Text="Captain"/>
                        <RadzenDropDown
                            @bind-Value="_game.Captain"
                            Data="@_playerIds"
                            Style="height: 35px; width: 75px;"
                            required/>
                    </div>

                    <!-- INPUT GAME PLAYER 2 -->
                    <div class="col-md-3">
                        <RadzenLabel Text="Player2"/>
                        <RadzenDropDown
                            @bind-Value="_game.Player2"
                            Data="@_playerIds"
                            Style="height: 35px; width: 75px;"
                            required/>
                    </div>

                    <!-- INPUT GAME PLAYER 3 -->
                    <div class="col-md-3">
                        <RadzenLabel Text="Player3"/>
                        <RadzenDropDown
                            @bind-Value="_game.Player3"
                            Data="@_playerIds"
                            Style="height: 35px; width: 75px;"
                            required/>
                    </div>

                    <!-- INPUT GAME PLAYER 4 -->
                    <div class="col-md-3">
                        <RadzenLabel Text="Player4"/>
                        <RadzenDropDown
                            @bind-Value="_game.Player4"
                            Data="@_playerIds"
                            Style="height: 35px; width: 75px;"
                            required/>
                    </div>

                </div>
                <div class="row mt-4">
                    <!-- INPUT GAME DATE -->
                    <div class="col-md-4">
                        <InputDate id="date"
                                   ValueExpression="@(() => _date)"
                                   TValue="DateTime"
                                   Class="small"
                                   min="@DateTime.Now.Date.ToString("yyyy-MM-dd")"
                                   max="@DateTime.Now.Date.AddMonths(1).ToString("yyyy-MM-dd")"
                                   @bind-value="_date"
                                   required/>
                    </div>

                    <!-- INPUT GAME TIME -->
                    <div class="col-md-4">
                        <select id="time"
                                value="@_time"
                                style="margin-left: 20px; width: 80%;"
                                @onchange="@(e => { if (e.Value != null) {_time = TimeSpan.Parse(e.Value.ToString()!); } })">
                            @for (var i = 0; i < 40; i++)
                            {
                                var start = DateTime.Today.AddHours(9).AddMinutes(i * 15);
                                var value = TimeSpan.FromHours(start.Hour) + TimeSpan.FromMinutes(start.Minute);
                                var text = $"{start:t}";
                                <option value="@value" selected="@((TimeSpan?)value == _time ? "selected" : null)">@text</option>
                            }
                        </select>
                    </div>
                    @{
                        _game.GameTime = _date + _time;
                    }

                    <!-- NEW GAME SUBMIT -->
                    <div class="col-md-4 align-items-center d-flex small">
                        <RadzenButton ButtonType="ButtonType.Submit" Text="@_gameState" Icon="accessibility"/>
                    </div>
                </div>

            </RadzenFieldset>
        </RadzenTemplateForm>
    </div>
</div>

<!-- VIEW ALL PLAYERS & ALL GAMES -->
<div class="col-md-9">
    <div class="row mt-1">
        <!-- VIEW ALL PLAYERS-->
        <RadzenFieldset Text="All Players">
            <div class="col-md-12" style="max-height: 248px; overflow-y: scroll">
                <table class="table" id="playersTable">
                    <thead>
                    <tr style="position: sticky; top: 0; z-index: 1;">
                        @foreach (var column in new[] { "Id", "Handicap", "Gender", "Firstname", "Surname", "Email" })
                        {
                            <th>
                                <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Button" Click="@(async () => { _allPlayers = (await PlayerService.SortTables(column))!; })" style="font-size: x-small" Text="@column"/>
                            </th>
                        }
                        <th></th>
                        <th></th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var player in _allPlayers)
                    {
                        <tr class="small">
                            <td>@player.PlayerId</td>
                            <td>@player.Handicap</td>
                            <td>@player.Gender</td>
                            <td>@player.Firstname</td>
                            <td>@player.Surname</td>
                            <td>@player.Email</td>
                            <td>
                                <RadzenButton ButtonStyle="ButtonStyle.Warning" Click="@(() => Edit(player))" Style="font-size: x-small" Text="Edit"/>
                            </td>
                            <td>
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Click="@(() => Delete(player))" Style="font-size: x-small" Text="Delete"/>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </RadzenFieldset>
    </div>

    <div class="row mt-4">
        <!-- VIEW ALL GAMES-->
        <RadzenFieldset Text="All Games">
            <div class="col-md-12" style="max-height: 248px; overflow-y: scroll">
                <table class="table" id="gamesTable">
                    <thead>
                    <tr style="position: sticky; top: 0; z-index: 1;">
                        @foreach (var column in new[] { "Id", "Game Time", "Captain", "Player2", "Player3", "Player4" })
                        {
                            <th>
                                <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Button" Click="@(async () => { _allGames = await GameService.SortTables(column); })" style="font-size: x-small" Text="@column"/>
                            </th>
                        }
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var game in _allGames)
                    {
                        <tr>
                            <td>@game.GameId</td>
                            <td>@game.GameTime</td>
                            <td>@game.Captain</td>
                            <td>@game.Player2</td>
                            <td>@game.Player3</td>
                            <td>@game.Player4</td>
                            <td>
                                <RadzenButton ButtonStyle="ButtonStyle.Warning" Click="@(() => Edit(game))" Style="font-size: x-small" Text="Edit"/>
                            </td>
                            <td>
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Click="@(() => Delete(game))" Style="font-size: x-small" Text="Delete"/>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </RadzenFieldset>
    </div>
</div>

</div>
</main>
</div>


@code {
    // private Fields
    private List<Player> _allPlayers = new(); // All players in the golf club.
    private Player _player = new(); // A new player object.
    private IEnumerable<int>? _playerIds; // All player IDs.
    private string _playerState = "New"; // Current player state - New/Edit/Delete.
    private List<Game> _allGames = new(); // All games in the golf club.
    private Game _game = new(); // A new Game object.
    private string _gameState = "New"; // Current game state - New/Edit/Delete.
    private DateTime _date = DateTime.MinValue; // Game time component.
    private TimeSpan _time = TimeSpan.Zero; // Game date component.


    /// <summary>
    ///     Initializes the component.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    /// <summary>
    ///     Refreshes the player and game data.
    /// </summary>
    private async Task Refresh()
    {
        _allPlayers = (await PlayerService.GetAll())!;
        _player = new Player();
        _playerState = "New";

        _allGames = await GameService.GetAll();
        _game = new Game();
        _gameState = "New";

        if (_allPlayers is {Count: > 0 })
        {
            _playerIds = _allPlayers.Select(p => p.PlayerId);
        }

        StateHasChanged();
    }

    /// <summary>
    ///     Creates a new Player or a new Game in the database.
    /// </summary>
    /// <param name="model"></param>
    /// <returns></returns>
    private async Task Create(object model)
    {
        if (model == _player)
        {
            if (_playerState == "New")
            {
                var title = $"{_playerState} Player";
                var message = await PlayerService.Create(_player);
                await DialogService.Alert(message, title);
                await Refresh();
            }
            else
            {
                await Refresh();
            }
        }
        else if (model == _game)
        {
            if (_gameState == "New")
            {
                var title = $"{_gameState} Game";
                var message = await GameService.Create(_game);
                await DialogService.Alert(message, title);
                await Refresh();
            }
            else
            {
                await Refresh();
            }
        }
    }

    /// <summary>
    ///     Updates an existing player in the database.
    /// </summary>
    /// <param name="model"></param>
    /// <returns></returns>
    private async Task Edit(object model)
    {
        switch (model)
        {
            case Player player:
            {
                _playerState = "Edit";
                _player = player;
                var title = $"{_playerState} Player {_player.PlayerId} {_player.Firstname} {_player.Surname}";
                var message = $"This edits all game cards for {_player.Firstname} {_player.Surname}.";
                await DialogService.Alert(message, title);
                await PlayerService.Edit(_player);
                break;
            }
            case Game game:
            {
                _gameState = "Edit";
                _game = game;
                var title = $"{_gameState} Game {game.GameId}";
                await DialogService.Alert(game.GameCard, title);
                await GameService.Edit(_game);
                break;
            }
        }
    }

    /// <summary>
    ///     Removes a player or game from the database.
    /// </summary>
    /// <param name="model"></param>
    /// <returns></returns>
    private async Task Delete(object model)
    {
        switch (model)
        {
            case Player player:
            {
                _playerState = "Delete";
                _player = player;
                var title = $"{_playerState} Player {_player.PlayerId} {_player.Firstname} {_player.Surname}";
                var message = $"This deletes all games for {_player.Firstname} {_player.Surname}.";
                var confirm = await DialogService.Confirm(message, title);
                if (confirm == true)
                {
                    await PlayerService.Delete(_player);
                    await Refresh();
                }
                else
                {
                    _playerState = "New";
                }
                break;
            }
            case Game game:
            {
                _gameState = "Delete";
                _game = game;
                var title = $"{_gameState} Game {game.GameId}";
                var message = $"This deletes {_game.GameCard}";
                var confirm = await DialogService.Confirm(message, title);
                if (confirm == true)
                {
                    await GameService.Delete(_game);
                    await Refresh();
                }
                else
                {
                    _gameState = "New";
                }
                break;
            }
        }
    }

}