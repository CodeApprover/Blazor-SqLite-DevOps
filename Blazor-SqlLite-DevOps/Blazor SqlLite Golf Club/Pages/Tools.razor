@page "/tools"
@using Blazor_SqlLite_Golf_Club.Services
@using Blazor_SqlLite_Golf_Club.Models
@using Radzen
@inject PlayerService PlayerService
@inject GameService GameService


<div class="row mt-1">

    <div class="col-md-8">

        <!-- SELECT QUERY -->
        <h3>Select Query:</h3>
        <RadzenDropDown @bind-Value="@_selectedMethod" Data="@_methodNames" Style="width: 350px" Change="@(async args => await OnDropdownChanged(args))"/>

        <!-- VIEW RESULTS -->
        <RadzenCard Style="margin-top: 20px;" Visible="@_resultsVisible">
            <RadzenCardHeader Text="@_selectedMethod"/>
            <RadzenCardContent>
                @if (_results != null)
                {
                    <RadzenDataList Data="@_results" TItem="string">
                        <Template Context="item">
                            <div>@item</div>
                        </Template>
                    </RadzenDataList>
                }
            </RadzenCardContent>
        </RadzenCard>

    </div>

    <div class="col-md-4">

        <!-- SELECT PLAYER ID -->
        <h3>Select Games for Player:</h3>
        <RadzenDropDown @bind-Value="_playerId"
                        Data="@_playerIds"
                        Style="height: 35px; width: 80px;"
                        @onchange="@(async args => await LoadGameCards(int.Parse(args.Value!.ToString()!)))"/>

        <!-- VIEW PLAYERS GAMES -->
        <RadzenCard Style="margin-top: 20px;" Visible="@_gamesVisible">
            <RadzenCardHeader Text="Games For Player @_playerId"/>
            <RadzenCardContent>
                @if (GameCards.Any())
                {
                    <table>
                        <tbody>
                        @foreach (var gameCard in GameCards)
                        {
                            <tr>
                                <td>@gameCard</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                }
                else
                {
                    <p>No games found for player @_playerId.</p>
                }
            </RadzenCardContent>
        </RadzenCard>
    </div>

</div>


@code
{
    // private Fields
    private List<Player>? _allPlayers; // All players in the golf club.
    private IEnumerable<int>? _playerIds; // All player IDs.
    private int _playerId; // Current player ID selected.
    private string? _selectedMethod; // Current selected query.
    private List<string>? _results; // Results of the selected query.
    private bool _resultsVisible; // Whether to display query results.
    private bool _gamesVisible; // Whether to display player's games.
    private List<Game>? _allGames; // All games in the golf club.
    private List<string> GameCards { get; set; } = new(); // GameCards for player's games.

    private readonly IEnumerable<string>? _methodNames = new List<string> // list of query options.
    {
        "View all games",
        "View all players",
        "View male members",
        "View female members",
        "View other members",
        "View handicap golfers below 10",
        "View handicap golfers between 11 and 20",
        "View handicap golfers above 20"
    };


    /// <summary>
    ///     Initializes the component.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    /// <summary>
    ///     Refreshes the player and game data.
    /// </summary>
    private async Task Refresh()
    {
        _allPlayers = await PlayerService.GetAll();
        _allGames = await GameService.GetAll();

        if (_allPlayers is {Count: > 0 })
        {
            _playerIds = _allPlayers.Select(p => p.PlayerId);
            _playerId = _playerIds.FirstOrDefault();
            await LoadGameCards(_playerId);
        }
    }

    /// <summary>
    ///     Loads the game cards for the selected player.
    /// </summary>
    private async Task LoadGameCards(int playerId)
    {
        _playerId = playerId;

        if (!(_allPlayers?.Count > 0) || !(_allGames?.Count > 0))
        {
            _gamesVisible = false;
            return;
        }
        var playerGames = _allGames.Where(g => g.Captain == _playerId);
        GameCards = playerGames.Select(g => g.GameCard).ToList();
        _gamesVisible = true;
        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    ///     Overrides OnAfterRenderAsync to load game cards for the specified player.
    /// </summary>
    /// <param name="firstRender">A bool representing whether the component is being rendered for the first time.</param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            return;
        }
        await LoadGameCards(_playerId);
    }

    /// <summary>
    ///     Handler for Query dropdown selection change
    /// </summary>
    private async Task OnDropdownChanged(object? args)
    {
        _selectedMethod = args?.ToString();

        switch (_selectedMethod)
        {
            case var method when method == _methodNames!.ElementAt(0):
                await GetAllGames();
                break;
            case var method when method == _methodNames!.ElementAt(1):
                await GetAllPlayers();
                break;
            case var method when method == _methodNames!.ElementAt(2):
                await GetMaleGenderPlayers();
                break;
            case var method when method == _methodNames!.ElementAt(3):
                await GetFemaleGenderPlayers();
                break;
            case var method when method == _methodNames!.ElementAt(4):
                await GetOtherGenderPlayers();
                break;
            case var method when method == _methodNames!.ElementAt(5):
                await GetHandicapsUnder10();
                break;
            case var method when method == _methodNames!.ElementAt(6):
                await GetHandicapsFrom11To20();
                break;
            case var method when method == _methodNames!.ElementAt(7):
                await GetHandicapsAbove20();
                break;
        }
    }

    /// <summary>
    ///     Displays all players in the golf club
    /// </summary>
    private Task GetAllPlayers()
    {
        if (_allPlayers?.Count > 0)
        {
            _resultsVisible = true;
            _results = _allPlayers.Select(player =>
                $"Player {player.Firstname} {player.Surname}"
                + $" Id {player.PlayerId}"
                + $" Gender {player.Gender}"
                + $" Handicap {player.Handicap}"
                + $" {player.Email}"
                ).ToList();
        }
        else
        {
            _resultsVisible = false;
            _results = null;
        }
        return Task.CompletedTask;
    }

    /// <summary>
    ///     Displays all active golf club games
    /// </summary>
    private Task GetAllGames()
    {
        if (_allGames is { Count: > 0 })
        {
            _resultsVisible = true;
            _results = _allGames.OrderBy(game => game.GameId).Select(game =>
                $"Game {game.GameCard}").ToList();
        }
        else
        {
            _resultsVisible = false;
            _results = null;
        }
        return Task.CompletedTask;
    }

    /// <summary>
    ///     Displays male gender members.
    /// </summary>
    private Task GetMaleGenderPlayers()
    {
        if (_allPlayers?.Count > 0)
        {
            _resultsVisible = true;
            var malePlayers = _allPlayers.Where(p => p.Gender == "M").OrderBy(p => p.PlayerId).ToList();
            _results = malePlayers.Select(player =>
                $"Gender {player.Gender}"
                + $" Player {player.Firstname} {player.Surname}"
                + $" Id {player.PlayerId}"
                + $" Handicap {player.Handicap}"
                + $" {player.Email}"
                ).ToList();
        }
        else
        {
            _resultsVisible = false;
            _results = null;
        }
        return Task.CompletedTask;
    }

    /// <summary>
    ///     Displays female gender members.
    /// </summary>
    private Task GetFemaleGenderPlayers()
    {
        if (_allPlayers?.Count > 0)
        {
            _resultsVisible = true;
            var femalePlayers = _allPlayers.Where(p => p.Gender == "F").OrderBy(p => p.PlayerId).ToList();
            _results = femalePlayers.Select(player =>
                $"Gender {player.Gender}"
                + $" Player {player.Firstname} {player.Surname}"
                + $" Id {player.PlayerId}"
                + $" Handicap {player.Handicap}"
                + $" {player.Email}"
                ).ToList();
        }
        else
        {
            _resultsVisible = false;
            _results = null;
        }
        return Task.CompletedTask;
    }

    /// <summary>
    ///     Displays other gender members.
    /// </summary>
    private Task GetOtherGenderPlayers()
    {
        if (_allPlayers?.Count > 0)
        {
            _resultsVisible = true;
            var otherPlayers = _allPlayers.Where(p => p.Gender == "O").OrderBy(p => p.PlayerId).ToList();
            _results = otherPlayers.Select(player =>
                $"Gender {player.Gender}"
                + $" Player {player.Firstname} {player.Surname}"
                + $" Id {player.PlayerId}"
                + $" Handicap {player.Handicap}"
                + $" {player.Email}"
                ).ToList();
        }
        else
        {
            _resultsVisible = false;
            _results = null;
        }
        return Task.CompletedTask;
    }

    /// <summary>
    ///     Displays members with a handicap under 10.
    /// </summary>
    private Task GetHandicapsUnder10()
    {
        if (_allPlayers?.Count > 0)
        {
            _resultsVisible = true;
            var validPlayers = _allPlayers.Where(p => p.Handicap <= 10).OrderBy(p => p.Handicap).ToList();
            _results = validPlayers.Select(player =>
                $"Handicap {player.Handicap}"
                + $" Player {player.Firstname} {player.Surname}"
                + $" Id {player.PlayerId}"
                + $" Gender {player.Gender}"
                + $" {player.Email}"
                ).ToList();
        }
        else
        {
            _resultsVisible = false;
            _results = null;
        }
        return Task.CompletedTask;
    }

    /// <summary>
    ///     Displays members with a handicap above 20.
    /// </summary>
    private Task GetHandicapsAbove20()
    {
        if (_allPlayers?.Count > 0)
        {
            _resultsVisible = true;
            var otherPlayers = _allPlayers.Where(p => p.Handicap >= 20).OrderBy(p => p.Handicap).ToList();
            _results = otherPlayers.Select(player =>
                $"Handicap {player.Handicap}"
                + $" Player {player.Firstname} {player.Surname}"
                + $" Id {player.PlayerId}"
                + $" Gender {player.Gender}"
                + $" {player.Email}"
                ).ToList();
        }
        else
        {
            _resultsVisible = false;
            _results = null;
        }
        return Task.CompletedTask;
    }

    /// <summary>
    ///     Displays members with a handicap from 11 to 20.
    /// </summary>
    private Task GetHandicapsFrom11To20()
    {
        if (_allPlayers?.Count > 0)
        {
            _resultsVisible = true;
            var validPlayers = _allPlayers.Where(p => p.Handicap is >= 11 and <= 20).OrderBy(p => p.Handicap).ToList();
            _results = validPlayers.Select(player =>
                $"Handicap {player.Handicap}"
                + $" Player {player.Firstname} {player.Surname}"
                + $" Id {player.PlayerId}"
                + $" Gender {player.Gender}"
                + $" {player.Email}"
                ).ToList();
        }
        else
        {
            _resultsVisible = false;
            _results = null;
        }
        return Task.CompletedTask;
    }
}