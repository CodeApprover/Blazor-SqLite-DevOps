---
name: "Report"

# Reports on the initial SHA push

# Exit Codes:
# 1 - Error finding .csproj file
# 2 - Failed to publish status from workflow
# 3 - Error after successful status publication (this seems redundant, you might want to rethink this part)
# 4 - Failed to trigger Dependency Caching Workflow

on:
  push:
    branches: ["code-development", "code-production", "code-staging"]

env:
  PROJECT_NAME: ${{ secrets.PROJECT_NAME }}

jobs:
  report-usage:
    name: "Report Usage"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: (github.actor != 'CodeApprover')

    steps:
    
    - name: Report SHA and Workflow Timestamp
      run: |
        # Report the commit SHA and current timestamp
        echo "SHA=${{ github.sha }}" >> $GITHUB_ENV
        echo "${{ github.sha }}"
        date

    - name: Determine Branch Name
      run: |
        # Extract the branch name from the ref
        ref=$(echo "${{ github.ref }}" | sed 's#refs/heads/##')
        echo "BRANCH_NAME=$ref" >> $GITHUB_ENV

    - name: Determine .csproj File
      run: |
        CSPROJ=$(find "${{ github.workspace }}/$(echo "${{ env.BRANCH_NAME }}" | sed 's/^code-//')" -name "${{ env.PROJECT_NAME }}.csproj")
        if [[ -z "$CSPROJ" ]]; then 
            echo "##[error] .csproj file not found."
            exit 1
        fi
        echo "CSPROJ=$CSPROJ" >> $GITHUB_ENV
        echo "##[debug] CSPROJ=$CSPROJ"

    - name: Report Commit Details
      run: |
        # Display various details about the commit
        echo "----- COMMIT DETAILS -----"
        echo "Branch Name: ${{ env.BRANCH_NAME }}"
        echo "Commit SHA: ${{ github.sha }}"
        echo "Commit Message: ${{ github.event.head_commit.message }}"
        echo "Commit Author: ${{ github.event.head_commit.author.name }}"
        echo "Committer Email: ${{ github.event.head_commit.author.email }}"
        echo "Pusher Name: ${{ github.event.pusher.name }}"
        echo "Actor: ${{ github.actor }}"
        echo "--------------------------"

    - name: Report GitHub Environment and Workflow Details
      run: |
        # Display various details about the GitHub environment and workflow
        echo "----- GITHUB ENVIRONMENT & WORKFLOW DETAILS -----"
        echo "Date: $(date)"
        echo "Event Name: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "Repository: ${{ github.repository }}"
        echo "Repository Owner: ${{ github.repository_owner }}"
        echo "Workflow Name: ${{ github.workflow }}"
        echo "GitHub Server URL: ${{ github.server_url }}"
        echo "GitHub API URL: ${{ github.api_url }}"
        echo "GitHub GraphQL URL: ${{ github.graphql_url }}"
        echo "Runner OS: ${{ runner.os }}"
        echo "Workspace: ${{ github.workspace }}"
        [ ! -z "${{ github.base_ref }}" ] && echo "Base Ref: ${{ github.base_ref }}"
        [ ! -z "${{ github.head_ref }}" ] && echo "Head Ref: ${{ github.head_ref }}"
        echo "-----------------------------------------------"

    - name: Report Job, Run and Runner Details
      run: |
        # Display various details about the job, run, and runner
        echo "----- JOB, RUN AND RUNNER DETAILS -----"
        echo "Job Name: ${{ github.job }}"
        echo "Event ID: ${{ github.run_id }}"
        echo "Run Number: ${{ github.run_number }}"
        echo "Runner Name: ${{ runner.name }}"
        echo "Runner Label: ${{ runner.label }}"
        echo "Runner Tool Cache: ${{ runner.tool_cache }}"
        echo "Runner Temp Directory: ${{ runner.temp }}"
        echo "GitHub Event Before: ${{ github.event.before }}"
        echo "GitHub Event After: ${{ github.event.after }}"
        echo "---------------------------------------"

    - name: Write SHA to file
      run: echo "${{ github.sha }}" > $RUNNER_TEMP/payload.sha

    - name: Archive SHA
      uses: actions/upload-artifact@v3.1.2
      with:
        name: sha-archive
        path: $RUNNER_TEMP/payload.sha

    - name: Delete SHA file
      run: rm $RUNNER_TEMP/payload.sha

    - name: Set default job status
      run: |
        # By default, assume the job is successful
        echo "JOB_STATUS=success" >> $GITHUB_ENV

    - name: Set failure status if any step failed
      run: |
        echo "##[error] Failed detected in previous steps"
        echo "JOB_STATUS=failure" >> $GITHUB_ENV
      if: failure()

    - name: Publish success or failure status for tracking
      run: |
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
        -H "Authorization: token ${{ secrets.AUTH }}" \
        -H "Accept: application/vnd.github.v3+json" \
        https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
        -d '{
          "state": "${{ env.JOB_STATUS }}", 
          "description": "Result from Workflow ${{ github.workflow }}",
          "context": "status/${{ github.workflow }}"
        }')
        # Check for failure (non-200 status codes)
        if [[ "$RESPONSE" -ne 200 ]]; then
            echo "##[error] Failed to publish status. HTTP Code: $RESPONSE"
            exit 2
        else
            echo "##[debug] Successfully published status for ${{ github.workflow }}."
        fi

    - name: Trigger Dependency Caching Workflow
      run: |
        RESPONSE=$(eval "curl -s -o /dev/null -w "%{http_code}" -X POST \
        -H \"Authorization: Bearer ${{ secrets.AUTH }}\" \
        -H \"Accept: application/vnd.github.v3+json\" \
        https://api.github.com/repos/${{ github.repository }}/dispatches \
        -d '{\"event_type\": \"trigger-cache-dependencies\", \
        \"client_payload\": {\"sha\": \"${{ env.SHA }}\", \
        \"csproj\": \"${{ env.CSPROJ }}\", \
        \"branch_name\": \"${{ env.BRANCH_NAME }}\"}}'")
        # Check for failure (non-200 status codes)
        if [[ "$RESPONSE" -ne 200 ]]; then
            echo "##[error] Failed to trigger Dependency Caching Workflow. HTTP Code: $RESPONSE"
            exit 4
        else
            echo "##[debug] Successfully Triggered Dependency Caching Workflow for ${{ env.SHA }}."
        fi
