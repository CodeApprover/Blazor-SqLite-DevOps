---
name: Publish Docker Image

on:
  repository_dispatch:
    types: trigger-docker-publish

env:
  PROJ_NAME: "Blazor-SqLite-Golf-Club"
  DOCKER_REPO: "blazor-sqlite-devops"

jobs:
  save-docker-image:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout SHA repository
      uses: actions/checkout@v3.5.3
      with:
        ref: ${{ github.event.client_payload.sha }}
        fetch-depth: 0

    - name: Log in to Docker Hub
      uses: docker/login-action@v2.2.0
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: Check for .lock file
      run: |
        if [[ -e ".lock" ]]; then
          echo "Found .lock file! Deployments are locked! Exiting."
          exit 1
        fi

    - name: Enable Docker Experimental Features
      run: |
        echo '{ "experimental": true }' | sudo tee /etc/docker/daemon.json
        sudo systemctl restart docker
        docker version

    - name: Extract Branch Name from SHA Commit
      run: |
        branch=$(git branch -r --contains ${{ github.event.client_payload.sha }} | sed -n 's#^ *origin/##p' | head -n 1)
        if [[ -z "$branch" ]]; then
          echo "Failed to extract branch name for SHA: ${{ github.event.client_payload.sha }}"
          exit 1
        fi
        echo "BRANCH_NAME=$branch" >> $GITHUB_ENV

    - name: Set Environment Name
      run: |
        envirn=$(echo "${{ env.BRANCH_NAME }}" | sed 's/^code-//')
        echo "ENV_NAME=$envirn" >> $GITHUB_ENV

    - name: Determine next version tag
      run: |
        latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo 'v0.0.0')
        major=$(echo "$latest_tag" | cut -d'.' -f1 | tr -dc '0-9')
        minor=$(echo "$latest_tag" | cut -d'.' -f2)
        patch=$(echo "$latest_tag" | cut -d'.' -f3)

        case "${{ env.ENV_NAME }}" in
          "production")
            major=$((major + 1))
            minor=0
            patch=0
            ;;
          "staging"):
            minor=$((minor + 1))
            patch=0
            ;;
          "development"):
            patch=$((patch + 1))
            ;;
          "main"):
            # Do nothing for main; retain the version as it is
            ;;
        esac

        new_version="v$major.$minor.$patch"
        echo "NEW_VERSION=$new_version" >> $GITHUB_ENV

    - name: Check if Docker image already exists
      id: check_image
      run: |
        if docker manifest inspect ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_REPO }}:v${{ env.NEW_VERSION }} > /dev/null; then
          echo "::set-output name=image_exists::true"
          echo "Docker image already exists!"
        else
          echo "::set-output name=image_exists::false"
        fi

    - name: Set .csproj path
      run: |
        CSPROJ=$(find "${{ github.workspace }}/${{ env.ENV_NAME }}" -name "${{ env.PROJ_NAME }}.csproj")
        if [[ ! -f "$CSPROJ" ]]; then
          echo "csproj not found"
          exit 1
        fi
        echo "CSPROJ=$CSPROJ" >> $GITHUB_ENV

    - name: Write version to file
      if: steps.check_image.outputs.image_exists == 'false'
      run: |
        echo "${NEW_VERSION}" > $(find ./${{ env.ENV_NAME }} -name "version" | head -n 1)    

    - name: Build and push Docker image
      if: steps.check_image.outputs.image_exists == 'false'
      run: |
        docker_file=$(find ./${{ env.ENV_NAME }} -name "Dockerfile" | head -n 1)
        if [[ ! -f "$docker_file" ]]; then
          echo "Dockerfile not found"
          exit 1
        fi
        echo "Running docker build with: -t ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_REPO }}:v${{ env.NEW_VERSION }} -f "${docker_file}" "${{ github.workspace }}""
        docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_REPO }}:v${{ env.NEW_VERSION }} -f "${docker_file}" "${{ github.workspace }}"
        docker push "${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_REPO }}:v${{ env.NEW_VERSION }}"

    - name: Tag the repository with new version
      if: steps.check_image.outputs.image_exists == 'false'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag "${{ env.NEW_VERSION }}"
        
    - name: Push new tag to repository
      if: steps.check_image.outputs.image_exists == 'false'
      run: |
        git push origin "${{ env.NEW_VERSION }}"

    - name: Trigger Git Deployment
      if: success()
      run: |
        CMD="curl -X POST -H \"Authorization: Bearer ${{ secrets.AUTH }}\" "
        CMD+="-H \"Accept: application/vnd.github.v3+json\" "
        CMD+="https://api.github.com/repos/\"${{ github.repository }}\"/dispatches "
        CMD+="-d '{\"event_type\": \"trigger-git-deploy\", "
        CMD+="\"client_payload\": {\"sha\": \"${{ github.sha }}\"}}'"
        eval ${CMD}
