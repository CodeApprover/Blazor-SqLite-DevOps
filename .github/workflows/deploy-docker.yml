---
name: Publish Docker Image

on:
  repository_dispatch:
    types: trigger-docker-publish

env:
  PROJ_NAME: "Blazor-SqLite-Golf-Club"
  DOCKER_REPO: "blazor-sqlite-devops"

jobs:
  save-docker-image:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout SHA repository
      uses: actions/checkout@v3.5.3
      with:
        ref: ${{ github.event.client_payload.sha }}
        fetch-depth: 0

    - name: Log in to Docker Hub
      uses: docker/login-action@v2.2.0
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: Check for .lock file
      run: |
        if [[ -e ".lock" ]]; then
          echo "Found .lock file! Deployments are locked! Exiting."
          exit 1
        fi

    - name: Enable Docker Experimental Features
      run: |
        echo '{ "experimental": true }' | sudo tee /etc/docker/daemon.json
        sudo systemctl restart docker
        docker version

    - name: Extract Branch Name from SHA Commit
      run: |
        branch=$(git branch -r --contains ${{ github.event.client_payload.sha }} | sed -n 's#^ *origin/##p' | head -n 1)
        if [[ -z "$branch" ]]; then
          echo "Failed to extract branch name for SHA: ${{ github.event.client_payload.sha }}"
          exit 1
        fi
        echo "BRANCH_NAME=$branch" >> $GITHUB_ENV

    - name: Set Environment Name
      run: |
        envirn=$(echo "${{ env.BRANCH_NAME }}" | sed 's/^code-//')
        echo "ENV_NAME=$envirn" >> $GITHUB_ENV

    - name: Determine next version tag
      run: |
        trap 'echo "Error on line $LINENO: $BASH_COMMAND"; exit 1' ERR
        git fetch --tags
        if [ -z "$(git tag)" ]; then
          echo "No tags found. Exiting."
          exit 1
        fi
        
        echo "Current Tags ="
        git tag
        # Get the latest tag based on SemVer -V
        tags=( $(git tag) )
        latest_major=0
        latest_minor=0
        latest_patch=0
        
        for tag in "${tags[@]}"; do
            current_major=$(echo $tag | cut -d. -f1 | sed 's/^v//')
            current_minor=$(echo $tag | cut -d. -f2)
            current_patch=$(echo $tag | cut -d. -f3)
        
            # Check major
            if (( current_major > latest_major )); then
                latest_major=$current_major
                latest_minor=$current_minor
                latest_patch=$current_patch
            elif (( current_major == latest_major )); then
                # Check minor
                if (( current_minor > latest_minor )); then
                    latest_minor=$current_minor
                    latest_patch=$current_patch
                elif (( current_minor == latest_minor )); then
                    # Check patch
                    if (( current_patch > latest_patch )); then
                        latest_patch=$current_patch
                    fi
                fi
            fi
        done
        latest_tag="v$latest_major.$latest_minor.$latest_patch"
        echo "Latest Tag = $latest_tag"
        echo "NEW_VERSION=${latest_tag}" >> $GITHUB_ENV

    - name: Set .csproj path
      run: |
        CSPROJ=$(find "${{ github.workspace }}/${{ env.ENV_NAME }}" -name "${{ env.PROJ_NAME }}.csproj")
        if [[ ! -f "$CSPROJ" ]]; then
          echo "csproj not found"
          exit 1
        fi
        echo "CSPROJ=$CSPROJ" >> $GITHUB_ENV

    - name: Build and push Docker image
      run: |
        if docker manifest inspect ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_REPO }}:${{ env.NEW_VERSION }} > /dev/null; then
          echo "Docker image already exists! Skipping Docker push."
        else
          docker_file=$(find ./${{ env.ENV_NAME }} -name "Dockerfile" | head -n 1)
          if [[ ! -f "$docker_file" ]]; then
            echo "Dockerfile not found for ${{ env.SAH }}"
            exit 1
          fi
          echo "Running docker build with: -t ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_REPO }}:${{ env.NEW_VERSION }} -f "${docker_file}" "${{ github.workspace }}""
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_REPO }}:v${{ env.NEW_VERSION }} -f "${docker_file}" "${{ github.workspace }}"
          docker push "${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_REPO }}:v${{ env.NEW_VERSION }}"
        fi

    - name: Trigger Git Deployment
      if: success()
      run: |
        CMD="curl -X POST -H \"Authorization: Bearer ${{ secrets.AUTH }}\" "
        CMD+="-H \"Accept: application/vnd.github.v3+json\" "
        CMD+="https://api.github.com/repos/\"${{ github.repository }}\"/dispatches "
        CMD+="-d '{\"event_type\": \"trigger-git-deploy\", "
        CMD+="\"client_payload\": {\"sha\": \"${{ github.sha }}\"}}'"
        eval ${CMD}
