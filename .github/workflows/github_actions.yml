name: "CI-CD Workflow"

on:
  push:
    branches: ["code-development", "code-production", "code-staging"]

jobs:

  ##############################################################################################################
  # Report usage
  ##############################################################################################################
  report:
    name: 1. Report
    runs-on: ubuntu-latest
    steps:
    - name: Runner
      run: echo "Running a ${{ runner.os }} server on GitHub Actions."
    - name: Repository
      run: echo "${{ github.repository }} repository"
    - name: Environment
      run: echo "$(echo "${{ github.ref }}" | sed 's/.*\///' | sed 's/^code-//')"
    - name: Branch
      run: echo "${{ github.ref }}"
    - name: Trigger
      run: echo "Job triggered by a ${{ github.event_name }}"

  
  ##############################################################################################################
  # Run StyleCop Linting - https://github.com/StyleCop/StyleCop
  ##############################################################################################################
  stylecop-linting:
    name: 2. StyleCop Linting
    runs-on: ubuntu-latest
    needs: report
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Setup .NET environment
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Restore Dependencies
      run: |
        dotnet restore --no-cache "$(find "${{ github.workspace }}" -type f -name "Blazor SqlLite Golf Club.csproj" -print -quit)"
    - name: StyleCop dotnet build
      run: |
        dotnet build --no-restore "$(find "${{ github.workspace }}" -type f -name "Blazor SqlLite Golf Club.csproj" -print -quit)" /p:StyleCopEnabled=true /p:StyleCopTreatErrorsAsWarnings=false /p:StyleCopForceFullAnalysis=false


  #############################################################################################################
  # Run CodeQL Linter - https://github.com/github/codeql
  ##############################################################################################################
  codeql:
    name: 3. CodeQL Linting
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    needs: stylecop-linting
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
      permissions:
    actions: read
    contents: read
    security-events: write

  strategy:
    fail-fast: false
    matrix:
      language: ['csharp']

  steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
    - name: Restore Dependencies
      run: |
        dotnet restore --no-cache "$(find "${{ github.workspace }}" -type f -name "Blazor SqlLite Golf Club.csproj" -print -quit)"
    - name: Dotnet build
      run: |
        dotnet build "$(find "/home/runner/work/Blazor-SqLite-DevOps/Blazor-SqLite-DevOps" -type f -name "Blazor SqlLite Golf Club.csproj" -print -quit)" --no-restore
    - name: Perform CodeQL Analysis
      run: |
        codeql database create --language=${{ matrix.language }} --source-root=${{ github.workspace }} --name=my-codeql-database
        codeql analyze --format=sarif-latest --output=analysis_results.sarif my-codeql-database


  ##############################################################################################################
  # Run SuperLinter - https://github.com/marketplace/actions/super-linter
  ##############################################################################################################
  super-linter:
    name: 4. Super Linter
    needs: codeql
    runs-on: ubuntu-latest
    steps:
      - name: Superlint checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Lint code-base
        uses: super-linter/super-linter@v5
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: ${{ github.ref }}
          GITHUB_TOKEN: ${{ secrets.TOKEN }}


  ##############################################################################################################
  # Development Environment tests
  ##############################################################################################################
  development-environment-tests:
    name: Development environment tests
    needs: super-linter
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/code-development') && github.event_name == 'push'
    environment:
      name: development

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Nunit dependencies
        run: dotnet restore "$(find "${{ github.workspace }}" -type f -name "Nunit_Player_Unit_Tests.csproj" -print -quit)"
      - name: Run NUnit unit tests
        run: dotnet test "$(find "${{ github.workspace }}" -type f -name "Nunit_Player_Unit_Tests.csproj" -print -quit) --filter Category=Development --no-restore --logger:"console;verbosity=detailed"
      - name: Install Xunit dependencies
        run: dotnet restore " $(find "${{ github.workspace }}" -type f -name "Xunit_Game_Unit_Tests.csproj" -print -quit)"
      - name: Run XUnit unit tests
        run: dotnet test " $(find "${{ github.workspace }}" -type f -name "Xunit_Game_Unit_Tests.csproj" -print -quit) --filter Category=Development --no-restore --logger:"console;verbosity=detailed"


  ##############################################################################################################
  # Staging Environment tests
  ##############################################################################################################
  staging-environment-tests:
    name: Staging environment tests
    needs: super-linter
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/code-staging') && github.event_name == 'push'
    environment:
      name: staging
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install MSTest dependencies
        run: dotnet restore "$(find "${{ github.workspace }}" -type f -name "MSTest_Integration_Tests.csproj" -print -quit)"
      - name: Run integration tests
        run: dotnet test "$(find "${{ github.workspace }}" -type f -name "MSTest_Integration_Tests.csproj" -print -quit) --filter Category=Integration --no-restore --logger:"console;verbosity=detailed"
  
  
  ##############################################################################################################
  # Production Environment tests
  ##############################################################################################################
  production-environment-tests:
    name: Production environment tests
    needs: super-linter
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/code-production') && github.event_name == 'push'
    environment:
      name: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
