---
name: CI/CD Workflow
run-name: ${{ github.actor }} using GitHub Actions ðŸš€

on:
  push:
    branches: ["main", "code-development", "code-production", "code-staging"]

# Environment variables accessible to all jobs
env:
  VALIDATE_ALL_CODEBASE: false
  MSBUILDDIAGNOSTIC: "true" # DEBUG
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DEFAULT_BRANCH: "${{ github.ref }}"
  GIT_DISCOVERY_ACROSS_FILESYSTEM: true

jobs:

  unit-tests:
  
    runs-on: ubuntu-latest
    environment:
      name: development
    steps:
    
      - name: Checkout repository
        uses: actions/checkout@v2
        
      - name: Install Nunit dependencies
        run: dotnet restore "./Nunit_Player_Unit_Tests/Nunit_Player_Unit_Tests.csproj"
        
      - name: Install Xunit dependencies
        run: dotnet restore "./Xunit_Player_Unit_Tests/Xunit_Player_Unit_Tests.csproj"
        
      - name: Run NUnit unit tests
        run: dotnet test "./Nunit_Player_Unit_Tests/Nunit_Player_Unit_Tests.csproj" --no-restore --logger:"console;verbosity=detailed"
        
      - name: Run XUnit unit tests
        run: dotnet test "./Xunit_Player_Unit_Tests/Xunit_Player_Unit_Tests.csproj" --no-restore --logger:"console;verbosity=detailed"

  integration-tests:
  
    runs-on: ubuntu-latest
    needs: unit-tests
    environment:
      name: staging
    steps:
    
      - name: Checkout repository
        uses: actions/checkout@v2
        
      - name: Install MSTest dependencies
        run: dotnet restore "./MSTest_Integration_Tests/MSTest_Integration_Tests.csproj"
        
      - name: Run integration tests
        run: dotnet test "./MSTest_Integration_Tests/MSTest_Integration_Tests.csproj" --filter Category=Integration --no-restore --logger:"console;verbosity=detailed"
