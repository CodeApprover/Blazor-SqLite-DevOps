name: "CI-CD Workflow"

on:
  push:
    branches: ["code-development", "code-production", "code-staging"]

env:
  PROJECT_PATH: "${{ github.workspace }}/$(echo ${{ github.ref }} | grep -oE '[^-]+$')/Blazor-SqlLite-DevOps/Blazor SqlLite Golf Club/"

jobs:
  # ALL ENVIRONMENTS - Report usage
  report:
    name: Report
    runs-on: ubuntu-latest
    steps:
      - name: Report usage
        run: |
          echo "GitHub Actions CI/CD Pipeline"
          echo "\"$(echo \"${{ github.ref }}\" | grep -oE '[^-]+$') environment"
          echo "runner.os is ${{ runner.os }}"
          echo "github.repository is ${{ github.repository }}"
          echo "github.ref is ${{ github.ref }}"
          echo "github.event_name is ${{ github.event_name }}"
          echo "github.workspace is ${{ github.workspace }}"
          echo "Project path is ${{ env.PROJECT_PATH }}"

  # DEVELOPMENT ENVIRONMENT - Nunit unit tests - https://nunit.org
  nunit-dev-tests:
    name: Dev Nunit unit tests
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/code-development') && github.event_name == 'push'
    needs: report
    steps:
      - name: Nunit Checkout repository
        uses: actions/checkout@v3.5.3
      - name: Nunit install dependencies
        run: |
          command="dotnet restore --no-cache"
          command="${command} \"${{ github.workspace }}/tests/"
          command="${command}Nunit_Player_Unit_Tests/"
          command="${command}Nunit_Player_Unit_Tests.csproj\""
          eval "${command}"
      - name: Nunit dotnet restore
        run: |
          command="dotnet build --no-restore"
          command="${command} \"${{ github.workspace }}/tests/"
          command="${command}Nunit_Player_Unit_Tests/"
          command="${command}Nunit_Player_Unit_Tests.csproj\""
          eval "${command}"
      - name: Nunit run unit tests
        run: |
          command="dotnet test"
          command="${command} --no-restore --verbosity detailed"
          command="${command} --logger \"trx;LogFileName=nunit-results.trx\""
          command="${command} \"${{ github.workspace }}/tests/"
          command="${command}Nunit_Player_Unit_Tests/"
          command="${command}Nunit_Player_Unit_Tests.csproj\""
          eval "${command}"

  # DEVELOPMENT ENVIRONMENT - Xunit unit tests - https://xunit.net
  xunit-dev-tests:
    name: Dev Xunit unit tests
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/code-development') && github.event_name == 'push'
    needs: report
    steps:
      - name: Xunit Checkout repository
        uses: actions/checkout@v3.5.3
      - name: Xunit install dependencies
        run: |
          command="dotnet restore --no-cache"
          command="${command} \"${{ github.workspace }}/tests/"
          command="${command}Xunit_Game_Unit_Tests/"
          command="${command}Xunit_Game_Unit_Tests.csproj\""
          eval "${command}"
      - name: Xunit dotnet restore
        run: |
          command="dotnet build --no-restore"
          command="${command} \"${{ github.workspace }}/tests/"
          command="${command}Xunit_Game_Unit_Tests/"
          command="${command}Xunit_Game_Unit_Tests.csproj\""
          eval "${command}"
      - name: Xunit run unit tests
        run: |
          command="dotnet test"
          command="${command} --no-restore --verbosity detailed"
          command="${command} --logger \"trx;LogFileName=nunit-results.trx\""
          command="${command} \"${{ github.workspace }}/tests/"
          command="${command}Xunit_Game_Unit_Tests/"
          command="${command}Xunit_Game_Unit_Tests.csproj\""
          eval "${command}"

  # DEVELOPMENT ENVIRONMENT - Run StyleCop Linting - https://github.com/StyleCop/StyleCop
  stylecop-dev-linting:
    name: Dev StyleCop Linting
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/code-development') && github.event_name == 'push'
    needs: [nunit-dev-tests, xunit-dev-tests]
    steps:
      - name: StyleCop Checkout repository
        uses: actions/checkout@v3.5.3
      - name: StyleCop Setup .NET environment
        uses: actions/setup-dotnet@v3.2.0
        with:
          dotnet-version: '7.0.x'
      - name: StyleCop Restore Dependencies
        run: |
          command="dotnet restore --no-cache"
          command="${command} \"${{ env.PROJECT_PATH }}"
          command="${command}Blazor SqlLite Golf Club.csproj\""
          eval "${command}"
      - name: StyleCop dotnet build
        run: |
          command="dotnet build --no-restore"
          command="${command} \"${{ env.PROJECT_PATH }}"
          command="${command}Blazor SqlLite Golf Club.csproj\""
          command="${command} /p:StyleCopEnabled=true"
          command="${command} /p:StyleCopTreatErrorsAsWarnings=false"
          command="${command} /p:StyleCopForceFullAnalysis=false"
          eval "${command}"

  # DEVELOPMENT ENVIRONMENT - build artifact
  build-dev-staging-artifact:
    name: Dev Build Artifact
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/code-development') && github.event_name == 'push'
    needs: stylecop-dev-linting
    steps:
      - name: Artifact checkout repository
        uses: actions/checkout@v3.5.3
      - name: Artifact remove existing .NET Core SDK
        run: sudo rm -rf /usr/share/dotnet
      - name: Artifact setup .NET environment
        uses: actions/setup-dotnet@v3.2.0
        with:
          dotnet-version: '7.0.x'
      - name: Artifact restore dependencies
        run: |
          command="dotnet restore --no-cache"
          command="${command} \"${{ env.PROJECT_PATH }}"
          command="${command}Blazor SqlLite Golf Club.csproj\""
          eval "${command}"

  # STAGING ENVIRONMENT - Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/code-staging') && github.event_name == 'push'
    needs: build-dev-staging-artifact
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3.5.3
      - name: Deploy to staging server
        run: |
          echo "Deploying to staging server"
          # Add your deployment commands here

  # PRODUCTION ENVIRONMENT - Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/code-production') && github.event_name == 'push'
    needs: build-dev-staging-artifact
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3.5.3
      - name: Deploy to production server
        run: |
          echo "Deploying to production server"
          # Add your deployment commands here
