name: "CI-CD Workflow"

on:
  push:
    branches: ["code-development", "code-production", "code-staging"]

jobs:

  ##############################################################################################################
  # Report usage
  ##############################################################################################################
  report:
    name: 1. Report
    runs-on: ubuntu-latest
    steps:
      - name: Runner
        run: echo "Running a ${{ runner.os }} server on GitHub Actions."
      - name: Repository
        run: echo "${{ github.repository }} repository"
      - name: Environment
        run: echo "$(echo "${{ github.ref }}" | sed 's/.*\///' | sed 's/^code-//')"
      - name: Branch
        run: echo "${{ github.ref }}"
      - name: Trigger
        run: echo "Job triggered by a ${{ github.event_name }}"

  
  ##############################################################################################################
  # Run StyleCop Linting - https://github.com/StyleCop/StyleCop
  ##############################################################################################################
  stylecop-linting:
    name: 2. StyleCop Linting
    runs-on: ubuntu-latest
    needs: report
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup .NET environment
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
      - name: Restore Dependencies
        run: |
          dotnet restore --no-cache "$(find "${{ github.workspace }}" -type f -name "Blazor SqlLite Golf Club.csproj" -print -quit)"
      - name: StyleCop dotnet build
        run: |
          dotnet build --no-restore "$(find "${{ github.workspace }}" -type f -name "Blazor SqlLite Golf Club.csproj" -print -quit)" /p:StyleCopEnabled=true /p:StyleCopTreatErrorsAsWarnings=false /p:StyleCopForceFullAnalysis=false

  
  #############################################################################################################
  # Run CodeQL Linter - https://github.com/github/codeql
  ##############################################################################################################
  codeql:
  build-custom-bundle:
    name: Build custom bundle and CodeQL lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download custom CodeQL bundle
        uses: advanced-security/codeql-bundle-action/download-bundle@v2
        id: download-bundle
        with:
          tag: "latest"
      - name: Create custom CodeQL bundle
        uses: advanced-security/codeql-bundle-action/create-bundle@v2
        id: create-bundle
        with:
          bundle-path: ${{ steps.download-bundle.outputs.bundle-path }}
          packs: "octo/cpp-queries,octo/cpp-all,octo/cpp-customizations"

      - name: Upload custom CodeQL bundle as artifact
        uses: actions/upload-artifact@v3
        with:
          name: codeql-bundle.tar.gz
          path: ${{ steps.create-bundle.outputs.output-path }}

      - name: CodeQL linter
        run: |
          # Set up environment variables
          BUNDLE_PATH=${{ steps.create-bundle.outputs.output-path }}
          BUNDLE_TAG=custom-bundle

          # Upload the custom CodeQL bundle as a GitHub release artifact
          if gh release view $BUNDLE_TAG; then
            gh release upload --clobber $BUNDLE_TAG $BUNDLE_PATH
          else
            gh release create $BUNDLE_TAG $BUNDLE_PATH --generate-notes
          fi

          # Checkout the repository
          git checkout ${{ github.ref }}

          # Initialize CodeQL with the custom bundle
          codeql database init codeql-db --language=cpp --source-root=. --codeql-bundle=$BUNDLE_PATH

          # Run CodeQL analysis
          codeql analyze codeql-db/qlpack/ql-java-security-and-quality@1.1

          # Fail the build on CodeQL analysis errors
          if [ $? -eq 2 ]; then
            echo "CodeQL analysis found issues."
            exit 1
          fi


  ##############################################################################################################
  # Run SuperLinter - https://github.com/marketplace/actions/super-linter
  ##############################################################################################################
  super-linter:
    name: 4. Super Linter
    needs: codeql
    runs-on: ubuntu-latest
    steps:
      - name: Superlint checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Lint code-base
        uses: super-linter/super-linter@v5
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: ${{ github.ref }}
          GITHUB_TOKEN: ${{ secrets.TOKEN }}


  ##############################################################################################################
  # Development Environment tests
  ##############################################################################################################
  development-environment-tests:
    name: Development environment tests
    needs: super-linter
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/code-development') && github.event_name == 'push'
    environment:
      name: development

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Nunit dependencies
        run: dotnet restore "$(find "${{ github.workspace }}" -type f -name "Nunit_Player_Unit_Tests.csproj" -print -quit)"
      - name: Run NUnit unit tests
        run: dotnet test "$(find "${{ github.workspace }}" -type f -name "Nunit_Player_Unit_Tests.csproj" -print -quit) --filter Category=Development --no-restore --logger:"console;verbosity=detailed"
      - name: Install Xunit dependencies
        run: dotnet restore " $(find "${{ github.workspace }}" -type f -name "Xunit_Game_Unit_Tests.csproj" -print -quit)"
      - name: Run XUnit unit tests
        run: dotnet test " $(find "${{ github.workspace }}" -type f -name "Xunit_Game_Unit_Tests.csproj" -print -quit) --filter Category=Development --no-restore --logger:"console;verbosity=detailed"


  ##############################################################################################################
  # Staging Environment tests
  ##############################################################################################################
  staging-environment-tests:
    name: Staging environment tests
    needs: super-linter
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/code-staging') && github.event_name == 'push'
    environment:
      name: staging
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install MSTest dependencies
        run: dotnet restore "$(find "${{ github.workspace }}" -type f -name "MSTest_Integration_Tests.csproj" -print -quit)"
      - name: Run integration tests
        run: dotnet test "$(find "${{ github.workspace }}" -type f -name "MSTest_Integration_Tests.csproj" -print -quit) --filter Category=Integration --no-restore --logger:"console;verbosity=detailed"
  
  
  ##############################################################################################################
  # Production Environment tests
  ##############################################################################################################
  production-environment-tests:
    name: Production environment tests
    needs: super-linter
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/code-production') && github.event_name == 'push'
    environment:
      name: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
