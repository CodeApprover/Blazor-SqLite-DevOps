name: "CI-CD Workflow"

on:
  push:
    branches: ["code-development", "code-production", "code-staging"]

env:
  PROJECT_PATH: "${{ github.workspace }}/$(echo ${{ github.ref }} | grep -oE '[^-]+$')/Blazor-SqlLite-DevOps/Blazor SqlLite Golf Club/"

jobs:

  # ALL ENVIRONMENTS - Report usage
  report:
    name: Report
    runs-on: ubuntu-latest
    steps:
      - name: Report usage
        run: |
          echo "GitHub Actions CI/CD Pipeline"
          echo "\"$(echo \"${{ github.ref }}\" | grep -oE '[^-]+$') environment"
          echo "runner.os is ${{ runner.os }}"
          echo "github.repository is ${{ github.repository }}"
          echo "github.ref is ${{ github.ref }}"
          echo "github.event_name is ${{ github.event_name }}"
          echo "github.workspace is ${{ github.workspace }}"
          echo "Project path is ${{ env.PROJECT_PATH }}"
  
  # DEVELOPMENT ENVIRONMENT - Nunit unit tests - https://nunit.org
  nunit-dev-tests:
    name: Dev Nunit unit tests
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/code-development') && github.event_name == 'push'
    needs: report
    steps:
      - name: Nunit Checkout repository
        uses: actions/checkout@v3.5.3
      - name: Nunit install dependencies
        run: |
          command="dotnet restore --no-cache"
          command="${command} \"${{ github.workspace }}/tests/"
          command="${command}Nunit_Player_Unit_Tests/"
          command="${command}Nunit_Player_Unit_Tests.csproj\""
          eval "${command}"
      - name: Nunit dotnet restore
        run: |
          command="dotnet build --no-restore"
          command="${command} \"${{ github.workspace }}/tests/"
          command="${command}Nunit_Player_Unit_Tests/"
          command="${command}Nunit_Player_Unit_Tests.csproj\""
          eval "${command}"
      - name: Nunit run unit tests
        run: |
          command="dotnet test"
          command="${command} --no-restore --verbosity detailed"
          command="${command} --logger \"trx;LogFileName=nunit-results.trx\""
          command="${command} \"${{ github.workspace }}/tests/"
          command="${command}Nunit_Player_Unit_Tests/"
          command="${command}Nunit_Player_Unit_Tests.csproj\""
          eval "${command}"

  # DEVELOPMENT ENVIRONMENT - Xunit unit tests - https://xunit.net
  xunit-dev-tests:
    name: Dev Xunit unit tests
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/code-development') && github.event_name == 'push'
    needs: report
    steps:
      - name: Xunit Checkout repository
        uses: actions/checkout@v3.5.3
      - name: Xunit install dependencies
        run: |
          command="dotnet restore --no-cache"
          command="${command} \"${{ github.workspace }}/tests/"
          command="${command}Xunit_Game_Unit_Tests/"
          command="${command}Xunit_Game_Unit_Tests.csproj\""
          eval "${command}"
      - name: Xunit dotnet restore
        run: |
          command="dotnet build --no-restore"
          command="${command} \"${{ github.workspace }}/tests/"
          command="${command}Xunit_Game_Unit_Tests/"
          command="${command}Xunit_Game_Unit_Tests.csproj\""
          eval "${command}"
      - name: Xunit run unit tests
        run: |
          command="dotnet test"
          command="${command} --no-restore --verbosity detailed"
          command="${command} --logger \"trx;LogFileName=nunit-results.trx\""
          command="${command} \"${{ github.workspace }}/tests/"
          command="${command}Xunit_Game_Unit_Tests/"
          command="${command}Xunit_Game_Unit_Tests.csproj\""
          eval "${command}"
  
  # DEVELOPMENT ENVIRONMENT - Run StyleCop Linting - https://github.com/StyleCop/StyleCop
  stylecop-dev-linting:
    name: Dev StyleCop Linting
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/code-development') && github.event_name == 'push'
    needs: [nunit-dev-tests, xunit-dev-tests]
    steps:
      - name: StyleCop Checkout repository
        uses: actions/checkout@v3.5.3
      - name: StyleCop Setup .NET environment
        uses: actions/setup-dotnet@v3.2.0
        with:
          dotnet-version: '7.0.x'
      - name: StyleCop Restore Dependencies
        run: |
          command="dotnet restore --no-cache"
          command="${command} \"${{ env.PROJECT_PATH }}"
          command="${command}Blazor SqlLite Golf Club.csproj\""
          eval "${command}"
      - name: StyleCop dotnet build
        run: |
          command="dotnet build --no-restore"
          command="${command} \"${{ env.PROJECT_PATH }}"
          command="${command}Blazor SqlLite Golf Club.csproj\""
          command="${command} /p:StyleCopEnabled=true"
          command="${command} /p:StyleCopTreatErrorsAsWarnings=false"
          command="${command} /p:StyleCopForceFullAnalysis=false"
          eval "${command}"
  
  # DEVELOPMENT ENVIRONMENT - Build backUp artifact
  build-dev-artifact:
    name: Dev Build BackUp Artifact
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/code-development') && github.event_name == 'push'
    needs: stylecop-dev-linting
    steps:
      - name: Artifact checkout repository
        uses: actions/checkout@v3.5.3
      - name: Artifact remove existing .NET Core SDK
        run: sudo rm -rf /usr/share/dotnet
      - name: Artifact setup .NET environment
        uses: actions/setup-dotnet@v3.2.0
        with:
          dotnet-version: '7.0.x'
      - name: Artifact restore dependencies
        run: |
          command="dotnet restore --no-cache"
          command="${command} \"${{ env.PROJECT_PATH }}Blazor SqlLite Golf Club.csproj\""
          eval "${command}"
      - name: Build Artifact
        run: |
          command="dotnet build --no-restore --configuration Release"
          command="${command} \"${{ env.PROJECT_PATH }}Blazor SqlLite Golf Club.csproj\""
          eval "${command}"
      - name: Publish Artifact
        run: |
          command="dotnet publish --configuration Release"
          command="${command} --no-build --output ./publish"
          command="${command} \"${{ env.PROJECT_PATH }}Blazor SqlLite Golf Club.csproj\""
          eval "${command}"
      - name: Archive Artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: staging-artifact
          path: ./publish/*
          if-no-files-found: error # warn/ignore

  # DEVELOPMENT ENVIRONMENT - Deploy to Staging
  deploy-to-staging:
    name: Dev Deploy to Staging
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/code-development') && github.event_name == 'push'
    needs: build-dev-artifact
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.3
        with:
          fetch-depth: 0
      - name: Configure Git User
        run: |
          git config --local user.email "auto_action@github.com"
          git config --local user.name "Dev to Staging CI push"
      - name: Rename development dir
        run: mv "${{ github.workspace }}/development" "${{ github.workspace }}/staging"
      - name: Commit renamed dir
        run: |
          git add .
          git commit -m "Renamed development dir to staging [skip CI]"
      - name: Checkout or Create Staging Branch
        run: |
          git fetch origin code-staging || true
          git checkout code-staging || git checkout -b code-staging
      - name: Merge Dev -> Staging
        run: git merge -X ours ${{ github.ref }}
      - name: Push to Staging
        run: |
          git add .
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Pushing changes to staging [skip CI]"
            git push origin code-staging
          fi

  # DEVELOPMENT ENVIRONMENT - Delete Development Branch
  delete-development-branch:
    name: Delete Development Branch
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/code-development') && github.event_name == 'push'
    needs: deploy-to-staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.3
        with:
          fetch-depth: 0
      - name: Configure Git User
        run: |
          git config --local user.email "auto_action@github.com"
          git config --local user.name "Dev branch deletion CI push"
      - name: Delete Development Branch if Exists
        run: |
          if git show-ref --verify --quiet refs/remotes/origin/code-development; then
            git push --delete origin code-development
          echo "code-development branch deleted."
          else
            git checkout -b code-development
            git push origin code-development
            echo "code-development branch did not exist -> created new one."
          fi
