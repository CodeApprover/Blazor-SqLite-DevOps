name: "CI-CD Workflow"

on:
  push:
    branches: ["code-development"]

jobs:
  check_skip:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.check.outputs.should_skip }}
    steps:
    - name: Check if commit message contains [skip ci] or [skip CI]
      id: check
      run: |
        echo "::set-output name=should_skip::$(echo '${{ github.event.head_commit.message }}' | grep -Ei '\[skip ci\]' && echo 'true' || echo 'false')"

  set_project_path:
    runs-on: ubuntu-latest
    needs: check_skip
    if: needs.check_skip.outputs.should_skip == 'false'
    outputs:
      project_path: ${{ steps.set.outputs.project_path }}
    steps:
    - name: Set PROJECT_PATH
      id: set
      run: |
        echo "::set-output name=project_path::${{ github.workspace }}/$(echo ${{ github.ref }} | grep -oE '[^-]+$')/Blazor-SqlLite-DevOps/Blazor SqlLite Golf Club/"

  report:
    name: Report
    runs-on: ubuntu-latest
    needs: [check_skip, set_project_path]
    if: needs.check_skip.outputs.should_skip == 'false'
    env:
      PROJECT_PATH: ${{ needs.set_project_path.outputs.project_path }}
    steps:
    - name: Report usage
      run: |
        echo "GitHub Actions CI/CD Pipeline"
        echo "\"$(echo \"${{ github.ref }}\" | grep -oE '[^-]+$') environment"
        echo "runner.os is ${{ runner.os }}"
        echo "github.repository is ${{ github.repository }}"
        echo "github.ref is ${{ github.ref }}"
        echo "github.event_name is ${{ github.event_name }}"
        echo "github.workspace is ${{ github.workspace }}"
        echo "Project path is ${{ env.PROJECT_PATH }}"
        echo "github.event.head_commit.message is ${{ github.event.head_commit.message }}"
    
  # DEVELOPMENT ENVIRONMENT - NUnit and Xunit unit tests
  dev-unit-tests:
    name: Dev Unit Tests (${{ matrix.test_framework }})
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/code-development') && github.event_name == 'push'
    needs: report
    strategy:
      matrix:
        test_framework: ['Nunit', 'Xunit']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3.5.3
      - name: Install dependencies
        run: |
          if [ "${{ matrix.test_framework }}" == "Nunit" ]; then
            envrn="Nunit_Player_Unit_Tests"
          else
            envrn="Xunit_Game_Unit_Tests"
          fi
          command="dotnet restore --no-cache"
          command="${command} \"${{ github.workspace }}/tests/${envrn}/${envrn}.csproj\""
          eval "${command}"
      - name: dotnet restore
        run: |
          if [ "${{ matrix.test_framework }}" == "Nunit" ]; then
            envrn="Nunit_Player_Unit_Tests"
          else
            envrn="Xunit_Game_Unit_Tests"
          fi
          command="dotnet build --no-restore"
          command="${command} \"${{ github.workspace }}/tests/${envrn}/${envrn}.csproj\""
          eval "${command}"
      - name: Run unit tests
        run: |
          if [ "${{ matrix.test_framework }}" == "Nunit" ]; then
            envrn="Nunit_Player_Unit_Tests"
            log_file_name="nunit-results.trx"
          else
            envrn="Xunit_Game_Unit_Tests"
            log_file_name="xunit-results.trx"
          fi
          command="dotnet test"
          command="${command} --no-restore --verbosity detailed"
          command="${command} --logger \"trx;LogFileName=${log_file_name}\""
          command="${command} \"${{ github.workspace }}/tests/${envrn}/${envrn}.csproj\""
          eval "${command}"
    
  # DEVELOPMENT ENVIRONMENT - Run StyleCop Linting - https://github.com/StyleCop/StyleCop
  stylecop-dev-linting:
    name: Dev StyleCop Linting
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/code-development') && github.event_name == 'push'
    needs: dev-unit-tests
    steps:
      - name: StyleCop Checkout repository
        uses: actions/checkout@v3.5.3
      - name: StyleCop Setup .NET environment
        uses: actions/setup-dotnet@v3.2.0
        with:
          dotnet-version: '7.0.x'
      - name: StyleCop Restore Dependencies
        run: |
          command="dotnet restore --no-cache"
          command="${command} \"${{ env.PROJECT_PATH }}"
          command="${command}Blazor SqlLite Golf Club.csproj\""
          eval "${command}"
      - name: StyleCop dotnet build
        run: |
          command="dotnet build --no-restore"
          command="${command} \"${{ env.PROJECT_PATH }}"
          command="${command}Blazor SqlLite Golf Club.csproj\""
          command="${command} /p:StyleCopEnabled=true"
          command="${command} /p:StyleCopTreatErrorsAsWarnings=false"
          command="${command} /p:StyleCopForceFullAnalysis=false"
          eval "${command}"
  
  # DEVELOPMENT ENVIRONMENT - Build backUp artifact
  build-dev-artifact:
    name: Dev Build BackUp Artifact
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/code-development') && github.event_name == 'push'
    needs: stylecop-dev-linting
    steps:
      - name: Artifact checkout repository
        uses: actions/checkout@v3.5.3
      - name: Artifact remove existing .NET Core SDK
        run: sudo rm -rf /usr/share/dotnet
      - name: Artifact setup .NET environment
        uses: actions/setup-dotnet@v3.2.0
        with:
          dotnet-version: '7.0.x'
      - name: Artifact restore dependencies
        run: |
          command="dotnet restore --no-cache"
          command="${command} \"${{ env.PROJECT_PATH }}Blazor SqlLite Golf Club.csproj\""
          eval "${command}"
      - name: Build Artifact
        run: |
          command="dotnet build --no-restore --configuration Release"
          command="${command} \"${{ env.PROJECT_PATH }}Blazor SqlLite Golf Club.csproj\""
          eval "${command}"
      - name: Publish Artifact
        run: |
          command="dotnet publish --configuration Release"
          command="${command} --no-build --output ./publish"
          command="${command} \"${{ env.PROJECT_PATH }}Blazor SqlLite Golf Club.csproj\""
          eval "${command}"
      - name: Archive Artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: staging-artifact
          path: ./publish/*
          if-no-files-found: error # warn/ignore

  # DEVELOPMENT ENVIRONMENT - Deploy to Staging
  deploy-to-staging:
    name: Dev Deploy to Staging
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/code-development') && github.event_name == 'push'
    needs: build-dev-artifact
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.3
        with:
          fetch-depth: 0
      - name: Configure Git User
        run: |
          git config --local user.email "auto_action@github.com"
          git config --local user.name "Dev to Staging CI push"
      - name: Rename development dir
        run: mv "${{ github.workspace }}/development" "${{ github.workspace }}/staging"
      - name: Commit renamed dir
        run: |
          git add .
          git commit -m "Renamed development dir to staging [skip CI]"
      - name: Checkout or Create Staging Branch
        run: |
          git fetch origin code-staging || true
          git checkout code-staging || git checkout -b code-staging
      - name: Merge Dev -> Staging
        run: git merge -X ours ${{ github.ref }}
      - name: Push to Staging
        run: |
          git add .
          # Committing a placeholder change to ensure the branch is pushed
          git commit --allow-empty -m "Pushing changes to staging [skip CI]"
          git push origin code-staging

  # DEVELOPMENT ENVIRONMENT - Delete Development Branch
  delete-development-branch:
    name: Delete Development Branch
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/code-development') && github.event_name == 'push'
    needs: deploy-to-staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.3
        with:
          fetch-depth: 0
      - name: Configure Git User
        run: |
          git config --local user.email "auto_action@github.com"
          git config --local user.name "Dev branch deletion CI push"
      - name: Delete Development Branch if Exists
        run: |
          if git show-ref --verify --quiet refs/remotes/origin/code-development; then
            git push --delete origin code-development
            echo "code-development branch deleted."
          else
            echo "code-development branch did not exist."
          fi
