name: "CI-CD Workflow"

on:
  push:
    branches: ["code-development", "code-production", "code-staging"]

jobs:
  # Report usage
  report:
    name: 1. Report
    runs-on: ubuntu-latest
    steps:
      - name: Report usage
        run: |
          echo "GitHub Actions CI/CD Pipeline"
          echo "$(echo \"${{ github.ref }}\" | grep -oE '[^-]+$') environment"
          echo "runner.os is ${{ runner.os }}"
          echo "github.repository is ${{ github.repository }}"
          echo "github.ref is ${{ github.ref }}"
          echo "github.event_name is ${{ github.event_name }}"
          echo "github.workspace is ${{ github.workspace }}"
          eval ls -la "${{ github.workspace }}"

  # Run StyleCop Linting - https://github.com/StyleCop/StyleCop
  stylecop-linting:
    name: 2. StyleCop Linting
    runs-on: ubuntu-latest
    steps:
      - name: StyleCop Checkout repository
        uses: actions/checkout@v3
      - name: StyleCop Setup .NET environment
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'
      - name: StyleCop Restore Dependencies
        run: |
          cmd="dotnet restore --no-cache"
          cmd1="${{ github.workspace }}/$(echo ${{ github.ref }} | grep -oE '[^-]+$')"
          cmd2="/Blazor-SqlLite-DevOps/Blazor\\ SqlLite\\ Golf\\ Club/Blazor\\ SqlLite\\ Golf\\ Club.csproj"
          command="${cmd} ${cmd1}${cmd2}"
          eval $command
      - name: StyleCop dotnet build
        run: |
         cmd="dotnet build --no-restore"
         cmd1="${{ github.workspace }}/$(echo ${{ github.ref }} | grep -oE '[^-]+$')"
         cmd2="/Blazor-SqlLite-DevOps/Blazor\\ SqlLite\\ Golf\\ Club/Blazor\\ SqlLite\\ Golf\\ Club.csproj"
         cmd3="/p:StyleCopEnabled=true /p:StyleCopTreatErrorsAsWarnings=false /p:StyleCopForceFullAnalysis=false"
         command="${cmd} ${cmd1}${cmd2} ${cmd3}"
         eval $command

  # Run CodeQL Analysis - https://github.com/github/codeql
  codeql-analysis:
    name: 3. CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 360 
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['csharp']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
      - name: Setup .NET environment
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'
      - name: Restore Dependencies
        run: dotnet restore --no-cache "${{ github.workspace }}/$(echo ${{ github.ref }} | grep -oE '[^-]+$')/Blazor-SqlLite-DevOps/Blazor SqlLite Golf Club/Blazor SqlLite Golf Club.csproj"
      - name: Dotnet build
        run: dotnet build --no-restore "${{ github.workspace }}/$(echo ${{ github.ref }} | grep -oE '[^-]+$')/Blazor-SqlLite-DevOps/Blazor SqlLite Golf Club/Blazor SqlLite Golf Club.csproj"
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # Run SuperLinter - https://github.com/marketplace/actions/super-linter
  super-linter:
    name: 4. SuperLinter
    runs-on: ubuntu-latest
    steps:
      - name: Superlint checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Print JSCPD config path
        run: echo "JSCPD config path is ${{ github.workspace }}/.jscpd.json"
      - name: Lint code-base
        uses: super-linter/super-linter@v5
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: ${{ github.ref }}
          GITHUB_TOKEN: ${{ secrets.AUTH }}
          JSCPD_CONFIG_FILE: .jscpd.json

  # Nunit unit tests - https://nunit.org
  nunit-tests:
    name: 5. Nunit unit tests
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/code-development') && github.event_name == 'push'
    steps:
      - name: Nunit Checkout repository
        uses: actions/checkout@v3
      - name: Nunit install dependencies
        run: |
          cmd="dotnet restore --no-cache"
          cmd1="/home/runner/work/Blazor-SqLite-DevOps/tests/"
          cmd2="Nunit_Player_Unit_Tests/Nunit_Player_Unit_Tests.csproj"
          command="${cmd} ${cmd1}${cmd2}"
          eval "$command"
      - name: Nunit dotnet restore
        run: |
          cmd="dotnet build --no-restore"
          cmd1="/home/runner/work/Blazor-SqLite-DevOps/tests/"
          cmd2="Nunit_Player_Unit_Tests/Nunit_Player_Unit_Tests.csproj"
          command="${cmd} ${cmd1}${cmd2}"
          eval "$command"
      - name: Nunit run unit tests
        run: |
          cmd="dotnet test"
          cmd1="/home/runner/work/Blazor-SqLite-DevOps/tests/"
          cmd2="Nunit_Player_Unit_Tests/Nunit_Player_Unit_Tests.csproj"
          cmd3="--filter Category=Development"
          command="${cmd} ${cmd1}${cmd2} ${cmd3}"
          eval "$command"

  # Xunit unit tests - https://xunit.net
  xunit-tests:
    name: 5. Xunit unit tests
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/code-development') && github.event_name == 'push'
    steps:
      - name: Xunit Checkout repository
        uses: actions/checkout@v3
      - name: Xunit install dependencies
        run: |
          cmd="dotnet restore"
          cmd1="/home/runner/work/Blazor-SqLite-DevOps/tests/"
          cmd2="Xunit_Game_Unit_Tests/Xunit_Game_Unit_Tests.csproj"
          command="${cmd} ${cmd1}${cmd2}"
          eval "$command"
      - name: Xunit dotnet restore
        run: |
          cmd="dotnet build --no-restore"
          cmd1="/home/runner/work/Blazor-SqLite-DevOps/tests/"
          cmd2="Xunit_Game_Unit_Tests/Xunit_Game_Unit_Tests.csproj"
          command="${cmd} ${cmd1}${cmd2}"
          eval "$command"
      - name: Xunit run unit tests
        run: |
          cmd="dotnet test"
          cmd1="/home/runner/work/Blazor-SqLite-DevOps/tests/"
          cmd2="Xunit_Game_Unit_Tests/Xunit_Game_Unit_Tests.csproj"
          cmd3="--filter Category=Development"
          command="${cmd} ${cmd1}${cmd2} ${cmd3}"
          eval "$command"

  # Other environment-specific jobs (staging-environment-tests, production-environment-tests) can be defined here
