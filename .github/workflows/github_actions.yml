---
name: CI/CD Workflow
run-name: ${{ github.actor }} using GitHub Actions 🚀

on:
  push:
    branches: ["main", "code-development", "code-production", "code-staging"]

# Environment variables accessible to all jobs
env:
  VALIDATE_ALL_CODEBASE: false
  MSBUILDDIAGNOSTIC: "true" # DEBUG
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DEFAULT_BRANCH: "${{ github.ref }}"
  GIT_DISCOVERY_ACROSS_FILESYSTEM: true

jobs:
  report-usage:
    runs-on: ubuntu-latest
    steps:
    
      - run: echo "🎉 The job was automatically triggered by ${{ github.event_name }}"
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub."
      - run: "echo '🔎 Branch name is ${{ github.ref }}. Repository is ${{ github.repository }}.'"

  clean-up:
    needs: report-usage
    runs-on: ubuntu-latest
    steps:
      - name: clean-up-nuget-cache
        run: dotnet nuget locals all --clear

      - name: Install gh-actions-cache extension
        run: gh extension install actions/gh-actions-cache

      - name: set-github-cache-variables
        run: |
          set_github_cache_variables() {
            REPO="CodeApprover/Blazor-SqLite-DevOps"
            BRANCH="refs/pull/${{ github.event.pull_request.number }}/merge"
            cacheKeysForPR=$(gh actions-cache list -R "$REPO" -B "$BRANCH" -L 100 | cut -f 1)
            echo "cacheKeysForPR=$cacheKeysForPR" >> $GITHUB_ENV
          }
          set_github_cache_variables
          set +e

      - name: delete-github-caches
        run: |
          delete_github_caches() {
            for cacheKey in $cacheKeysForPR; do
              gh actions-cache delete "$cacheKey" -R "$REPO" -B "$BRANCH" --confirm
            done
          }
          delete_github_caches

  setup-main-app-dotnet:
    needs: clean-up
    runs-on: ubuntu-latest    
    steps:
    
      - uses: actions/checkout@v3
      
      - name: setup-dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
          
      - name: List files in the repository
        run: ls -la "${{ github.workspace }}"
        
      - name: restore-dependencies
        run: dotnet restore "$(find "${{ github.workspace }}" -type f -name "Blazor SqlLite Golf Club.csproj" -print -quit)"
        
      - name: build-main-application
        run: dotnet build --no-restore "$(find "${{ github.workspace }}" -type f -name "Blazor SqlLite Golf Club.csproj" -print -quit)"

  run-super-linter:
    needs: setup-main-app-dotnet
    runs-on: ubuntu-latest
    steps:
    
      - name: superlint-checkout-code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: lint-code-base
        uses: github/super-linter@v4

  stylecop-linting:
  
    runs-on: ubuntu-latest
    needs: run-super-linter
    steps:
    
      - name: Checkout repository
        uses: actions/checkout@v2
        
      - name: Install MSTest dependencies
        run: dotnet restore "./MSTest_Integration_Tests/MSTest_Integration_Tests.csproj"
        
      - name: Run MSTest unit tests
        run: dotnet test "./MSTest_Integration_Tests/MSTest_Integration_Tests.csproj" --no-restore --logger:"console;verbosity=detailed"

  unit-tests:
  
    runs-on: ubuntu-latest
    needs: stylecop-linting
    environment:
      name: development
    steps:
    
      - name: Checkout repository
        uses: actions/checkout@v2
        
      - name: Install Nunit dependencies
        run: dotnet restore "./Nunit_Player_Unit_Tests/Nunit_Player_Unit_Tests.csproj"
        
      - name: Install Xunit dependencies
        run: dotnet restore "./Xunit_Player_Unit_Tests/Xunit_Player_Unit_Tests.csproj"
        
      - name: Run NUnit unit tests
        run: dotnet test "./Nunit_Player_Unit_Tests/Nunit_Player_Unit_Tests.csproj" --no-restore --logger:"console;verbosity=detailed"
        
      - name: Run XUnit unit tests
        run: dotnet test "./Xunit_Player_Unit_Tests/Xunit_Player_Unit_Tests.csproj" --no-restore --logger:"console;verbosity=detailed"

  integration-tests:
  
    runs-on: ubuntu-latest
    needs: unit-tests
    environment:
      name: staging
    steps:
    
      - name: Checkout repository
        uses: actions/checkout@v2
        
      - name: Install MSTest dependencies
        run: dotnet restore "./MSTest_Integration_Tests/MSTest_Integration_Tests.csproj"
        
      - name: Run integration tests
        run: dotnet test "./MSTest_Integration_Tests/MSTest_Integration_Tests.csproj" --filter Category=Integration --no-restore --logger:"console;verbosity=detailed"
