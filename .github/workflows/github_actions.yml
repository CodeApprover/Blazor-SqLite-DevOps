name: "CI-CD Workflow"

on:
  push:
    branches: ["code-development", "code-production", "code-staging"]

jobs:
  ##############################################################################################################
  # Report usage
  ##############################################################################################################
  report:
    name: 1. Report
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - name: Set environment
        id: set-env
        run: |
          echo "environment=${GITHUB_REF#refs/heads/code-}" >> $GITHUB_ENV
          echo "set-output name=environment::$environment"
        shell: bash
        env:
          GITHUB_REF: ${{ github.ref }}

      - name: Report usage
        run: |
          echo GitHub Actions CI/CD Pipeline
          echo runner.os is ${{ runner.os }}
          echo github.repository is ${{ github.repository }}
          echo github.ref is ${{ github.ref }}
          echo github.event_name is ${{ github.event_name }}
          echo environemt is ${{ needs.report.outputs.environment }}
          echo ${{ github.workspace }}/${{ needs.report.outputs.environment }}/Blazor-SqlLite-DevOps/Blazor SqlLite Golf Club/Blazor SqlLite Golf Club.csproj
        shell: bash

  ##############################################################################################################
  # Run StyleCop Linting - https://github.com/StyleCop/StyleCop
  ##############################################################################################################
  stylecop-linting:
    name: 2. StyleCop Linting
    runs-on: ubuntu-latest
    needs: report
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup .NET environment
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '7.0.x'
      - name: Restore Dependencies
        run: |
          dotnet restore --no-cache "${{ github.workspace }}/${{ needs.report.outputs.environment }}/Blazor-SqlLite-DevOps/Blazor SqlLite Golf Club/Blazor SqlLite Golf Club.csproj"
        shell:  bash
      - name: StyleCop dotnet build
        run: |
          dotnet build --no-restore "${{ github.workspace }}/${{ needs.report.outputs.environment }}/Blazor-SqlLite-DevOps/Blazor SqlLite Golf Club/Blazor SqlLite Golf Club.csproj" /p:StyleCopEnabled=true /p:StyleCopTreatErrorsAsWarnings=false /p:StyleCopForceFullAnalysis=false
        shell:  bash
        
  ##############################################################################################################
  # Run CodeQL Linting
  ##############################################################################################################
  codeql:
    name: 3. CodeQL Linting
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    needs: stylecop-linting
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['csharp']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: ${{ matrix.language }}
      - name: Restore Dependencies
        run: |
          dotnet restore --no-cache "${{ github.workspace }}/${{ needs.report.outputs.environment }}/Blazor-SqlLite-DevOps/Blazor SqlLite Golf Club/Blazor SqlLite Golf Club.csproj"
        shell:  bash
      - name: Dotnet build
        run: |
          dotnet build "${{ github.workspace }}/${{ needs.report.outputs.environment }}/Blazor-SqlLite-DevOps/Blazor SqlLite Golf Club/Blazor SqlLite Golf Club.csproj" --no-restore
        shell:  bash
      - name: Perform CodeQL Analysis
        run: |
          codeql database create --language=${{ matrix.language }} --source-root=${{ github.workspace }} --name=my-codeql-database
          codeql analyze --format=sarif-latest --output=analysis_results.sarif my-codeql-database
        shell:  bash

  ##############################################################################################################
  # Run SuperLinter - https://github.com/marketplace/actions/super-linter
  ##############################################################################################################
  super-linter:
    name: 4. SuperLinter
    needs: codeql
    runs-on: ubuntu-latest
    steps:
      - name: Superlint checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Lint code-base
        uses: super-linter/super-linter@v5
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: ${{ github.ref }}
          GITHUB_TOKEN: ${{ secrets.TOKEN }}

  ##############################################################################################################
  # Development Environment tests
  ##############################################################################################################
  development-environment-tests:
    name: 5. Development environment tests
    needs: super-linter
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/code-development') && github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install Nunit dependencies
        run: dotnet restore "${{ github.workspace }}/${{ needs.report.outputs.environment }}/tests/Nunit_Player_Unit_Tests/Nunit_Player_Unit_Tests.csproj"
        shell:  bash
      - name: Run NUnit unit tests
        run: dotnet test "${{ github.workspace }}/${{ needs.report.outputs.environment }}/tests/Nunit_Player_Unit_Tests/Nunit_Player_Unit_Tests.csproj" --filter Category=Development --no-restore --logger:"console;verbosity=detailed"
        shell:  bash

  # Other environment-specific jobs (staging-environment-tests, production-environment-tests) can be defined here
  
