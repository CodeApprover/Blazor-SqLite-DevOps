---
name: "Authentication, Integrity and Validation Gateway"

#  ${{ github.workflow }} Overview
#
#  This workflow verifies the integrity of commits, reports on commit details, 
#  validates the identity of the committer and then triggers a subsequent workflow.
#  One verify-commit job ensures code integrity for pushes to four specified branches'
#
#  Branches
#  1 - 'code-development' for the 'development' environment with code changes in the 'development' directory.
#  2 - 'code-staging' for the 'staging' environment with code changes in the 'staging' directory.
#  3 - 'code-production' for the 'production' environment with code changes in the 'production' directory.
#  4 - 'main' which hold the code base for the three above environments.
#
#  Steps verify-commit
#  1 -  Workflow Overview: Displays a brief description of the workflow's intent.
#  2 -  Checkout SHA Repository: Retrieves the repository using the specific commit SHA.
#  3 -  Validate SHA: Confirms the repository's checked-out SHA is accurate.
#  4 -  Validate SHA Branch: Confirms the branch linked to the SHA is accurate.
#  5 -  Validate .csproj: Confirms a .csproj file's presence in a directory based on the branch name and the PROJECT_NAME variable.
#  6 -  Sanitise Commit Details: Adds security by cleaning commit details to prevent malicious injections.
#  7 -  Report Commit Details: Presents detailed information about the commit, GitHub settings and the workflow runner.
#  8 -  Set Approved Team Members: Assigns a list of authorized committers based on the branch, comprising the repository owner and a team from the secrets.
#  9 -  Validate Committer: Ensures the committer belongs to the approved team for that branch.
#  10 - Trigger Next Workflow: Initiates next, cache-dependencies workflow. Retries up to MAX_RETRIES at WAIT_SECONDS intervals.
#
# Exit Codes
# 20 - SHA checkout failure.
# 21 - SHA_BRANCH does not exist.
# 22 - Failure locating .csproj file.
# 23 - APPROVED_TEAM not set.
# 24 - Committer is not approved.
# 25 - Curl failure due to malformed URL.
# 90 - Concurrency failure.
# 91 - Failed to trigger next workflow.
#

on:
  repository_dispatch:
    types: trigger-authentication

env:
  SHA: ${{ github.event.client_payload.sha }}
  TRIGGER: cache-dependencies # next workflow

jobs:

  verify-commit: 

      name: Commit Verification, Authentication and Report
      runs-on: ubuntu-latest
      timeout-minutes: 25
      if: (github.actor != ${{ github.repository_owner }}) # exclude DevOps maintainence

      steps:

      - name: Checkout SHA Repository
        id: checkout-sha
        uses: actions/checkout@v3.5.3
        with:
          ref: ${{ github.sha }}
          fetch-depth: 0 # deep fetch

      - name: Validate SHA
        run: |
          echo "##[info]## Validating SHA checkout."
          if [[ "${{ steps.checkout-sha.outcome }}" == "failure" ]]; then
              echo "##[error]## SHA checkout FAIL for ${{ github.sha }} --> Exit 20"
              exit 20
          fi
          echo "##[info]## Successfully validated SHA checkout for ${{ github.sha }}."
          echo "SHA=${{ github.sha }}" >> $GITHUB_ENV

      - name: Validate SHA Branch
        run: |
          echo "##[info]## Validating SHA branch name."
          branch=$(echo "${{ github.ref }}" | sed "s#refs/heads/##")
          if git show-ref --verify --quiet "refs/remotes/origin/$branch"; then
              echo "##[info]## Branch $branch detected in ${{ github.repository }}"
          else
              echo "##[error]## Branch $branch does not exist in ${{ github.repository }} --> Exit 21"
              exit 21
          fi
          echo "##[info]## Successfully validated SHA branch name $branch."
          echo "SHA_BRANCH=$branch" >> $GITHUB_ENV

      - name: Validate .csproj
        run: |
          echo "##[info]## Validating .csproj file."
          DIR_PATH="${{ github.workspace }}/$(echo "${{ env.SHA_BRANCH }}" | sed 's/^code-//')/${{ vars.PROJECT_NAME }}"
          CSPROJ="${DIR_PATH}/${{ vars.PROJECT_NAME }}.csproj"
          if [[ ! -f "$CSPROJ" ]]; then
              echo "##[error]## Failure locating .csproj file within the directory $DIR_PATH --> Exit 22"
              exit 22
          fi
          echo "##[info]## Successfully validated dotnet .csproj file $CSPROJ."
          echo "CSPROJ=$CSPROJ" >> $GITHUB_ENV

      - name: Set Lock File Name Based on Branch
        run: |
          echo "##[info]## Setting lock file name."
          if [[ ${{ env.SHA_BRANCH }} == "code-"* ]]; then
              lock_name=${branch#code-}
              echo "LOCK_FILE=.$lock_name.lock" >> $GITHUB_ENV
          elif [[ $branch == "main" ]]; then
              echo "LOCK_FILE=.main.lock" >> $GITHUB_ENV
          fi
  
      - name: Check for Lock File
        run: |
          echo "##[info]## Checking for existant lock file..."
          retries=0

          while [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; do
            git fetch origin ${{ env.SHA_BRANCH }}
            git checkout ${{ env.SHA_BRANCH }}   
            commits_before_sha=$(git rev-list ${{ env.SHA }}~1..${{ env.SHA_BRANCH }} --)
            if git ls-tree -r $commits_before_sha | grep "${{ env.LOCK_FILE }}"; then
                retries=$((retries+1))
                locked_sha=$(cat "${{ env.LOCK_FILE }}")
                echo "##[warn]## Lock file ${{ env.LOCK_FILE }} found for commit SHA $locked_sha."
                echo "##[warn]## Waiting ${{ vars.WAIT_MINUTES }} minutes before retry $retries of ${{ vars.MAX_TRIES }}."
                sleep $((${{ vars.WAIT_MINUTES }} * 60))
            else
                echo "##[info]## Lock file ${{ env.LOCK_FILE }} check passed - continuing."
                break
            fi
            if [[ $retries -eq ${{ vars.MAX_RETRIES }} ]]; then
                echo "##[error]## Reached (${{ vars.MAX_RETRIES }}) max retries at ${{ vars.WAIT_MINUTES }} intervals."
                echo "##[error]## Lock file ${ env.LOCK_FILE }} presence presists --> Exit 40"
                exit 40
            fi
          done
  
      - name: Report Commit Details
        run: |
          echo "Reporting details of the commit, GitHub environment and runner specifics."

          echo "-------------------------------------------------"
          echo "----- COMMIT DETAILS ----------------------------"
          echo "-------------------------------------------------"
          echo "Branch Name: ${{ env.SHA_BRANCH }}"
          echo "Commit SHA: ${{ github.sha }}"
          echo "Commit Message: $COMMIT_MESSAGE"
          echo "Commit Author: $COMMIT_AUTHOR_NAME"
          echo "Committer Email: $COMMIT_AUTHOR_EMAIL"
          echo "Pusher Name: ${{ github.event.pusher.name }}"
          echo "Actor: ${{ github.actor }}"

          echo "-------------------------------------------------"
          echo "----- GITHUB ENVIRONMENT & WORKFLOW DETAILS -----"
          echo "-------------------------------------------------"
          echo "Date: $(date)"
          echo "Event Name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Repository: ${{ github.repository }}"
          echo "Repository Owner: ${{ github.repository_owner }}"
          echo "Workflow Name: ${{ github.workflow }}"
          echo "GitHub Server URL: ${{ github.server_url }}"
          echo "GitHub API URL: ${{ github.api_url }}"
          echo "GitHub GraphQL URL: ${{ github.graphql_url }}"
          echo "Runner OS: ${{ runner.os }}"
          echo "Workspace: ${{ github.workspace }}"
          [ ! -z "${{ github.base_ref }}" ] && echo "Base Ref: ${{ github.base_ref }}"
          [ ! -z "${{ github.head_ref }}" ] && echo "Head Ref: ${{ github.head_ref }}"

          echo "-------------------------------------------------"
          echo "----- JOB, RUN AND RUNNER DETAILS ---------------"
          echo "-------------------------------------------------"
          echo "Job Name: ${{ github.job }}"
          echo "Event ID: ${{ github.run_id }}"
          echo "Run Number: ${{ github.run_number }}"
          echo "Runner Name: ${{ runner.name }}"
          echo "Runner Label: ${{ runner.label }}"
          echo "Runner Tool Cache: ${{ runner.tool_cache }}"
          echo "Runner Temp Directory: ${{ runner.temp }}"
          echo "GitHub Event Before: ${{ github.event.before }}"
          echo "GitHub Event After: ${{ github.event.after }}"
          echo "---------------------------------------"
