---
name: Lockfile Checker

# Manages lock files for sequential task execution within a branch.
# Operates for the code-development, code-staging and code-production branches.

# 1 - Creates a lock file if none exists.
# 2 - Checks and waits for an existing lock file to be released.
# 3 - Once lock file checks pass, creates a lock and triggers the next workflow.

# Exit Codes
# 40 - Lock file presence presists.
# 41 - Failed to push lock file.
# 42 - Failed to fetch SHA branch.
# 43 - Expected lock file does not exist.

on:
  repository_dispatch:
    types: Lockfile Checker

env:
  SHA: ${{ github.event.client_payload.sha }}
  CSPROJ: ${{ github.event.client_payload.csproj }}
  NEXT_WORKFLOW: Versioning

jobs:

  lockfile-checker:

    runs-on: ubuntu-latest
    timeout-minutes: 15

    # un-comment to block execution
    #if: (github.actor != ${{ github.repository_owner }})
    
    steps:

    - name: Checkout SHA Repository
      id: checkout
      uses: actions/checkout@v3.6.0
      with:
        ref: ${{ env.SHA }}
        fetch-depth: 0

    - name: Configure Git User
      run: |
      
        git config user.name "${{ github.repository_owner}}"
        git config user.email "${{ vars.EMAIL }}"

    - name: Set Lock File Name Based on Branch
      run: |
      
        branch=$(git name-rev ${{ env.SHA }} | sed 's#.*/##' | sed 's#.*-##')
        if [[ $branch == "code-"* ]]; then
            lock_name=${branch#code-}
            echo "LOCK_FILE=.$lock_name.lock" >> $GITHUB_ENV
        elif [[ $branch == "main" ]]; then
            echo "LOCK_FILE=.main.lock" >> $GITHUB_ENV
        fi
        echo "SHA_BRANCH=$branch" >> $GITHUB_ENV

    - name: Check for Remote Lock File
      run: |
      
        retries=0
        while [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; do
          git fetch origin ${{ env.SHA_BRANCH }}
          git checkout ${{ env.SHA_BRANCH }}

          # Check for lock file          
          commits_before_sha=$(git rev-list ${{ env.SHA }}~1..${{ env.SHA_BRANCH }} --)
          if git ls-tree -r $commits_before_sha | grep "${{ env.LOCK_FILE }}"; then
              retries=$((retries+1))
              locked_sha=$(cat "${{ env.LOCK_FILE }}")
              echo "##[warn] Lock file ${{ env.LOCK_FILE }} found for commit SHA $locked_sha."
              echo "##[warn] Waiting ${{ vars.WAIT_MINUTES }} minutes before retry $retries of ${{ vars.MAX_TRIES }}."
              sleep $((${{ vars.WAIT_MINUTES }} * 60))
          else
              echo "##[info] Lock file ${{ env.LOCK_FILE }} check passed - continuing."
              break
          fi

          # Exit if at max retries
          if [[ $retries -eq ${{ vars.MAX_RETRIES }} ]]; then
              echo "##[error] Reached (${{ vars.MAX_RETRIES }}) max retries at ${{ vars.WAIT_MINUTES }} intervals."
              echo "##[error] Lock file ${ env.LOCK_FILE }} presence presists --> Exit 40"
              exit 40
          fi
        done

    - name: Create Lock file
      run: |
      
        echo "${{ env.SHA }}" > "${{ env.LOCK_FILE }}"
        git add "${{ env.LOCK_FILE }}"
        git commit -m "Adding ${{ env.LOCK_FILE }} for ${{ env.SHA }} [skip ci]."

        if ! git push origin HEAD:${{ env.SHA_BRANCH }}; then
            echo "##[error] Failed to push ${{ env.LOCK_FILE }} for ${{ env.SHA }} --> Exit 41"
            exit 41
        fi

        git fetch origin ${{ env.SHA_BRANCH }}
        if [ $? -ne 0 ]; then
            echo "##[error] Failed to fetch ${{ env.SHA_BRANCH }} --> Exit 42"
            exit 42
        fi

        if ! git ls-tree HEAD -- ${{ env.LOCK_FILE }}; then
            echo "##[error] Expected lock file ${{ env.LOCK_FILE }} was not detected remotely --> Exit 43"
            exit 43
        fi

        echo "##[info] Lock file ${{ env.LOCK_FILE }} created and pushed to ${{ env.SHA_BRANCH }} for commit SHA ${{ env.SHA }}"

    - name: Trigger Next Workflow
      if: success()
      run: |
      
        CMD=$(echo "curl -L -X POST" \
        "-H \"Accept: application/vnd.github+json\"" \
        "-H \"Authorization: Bearer ${{ secrets.AUTH }}\"" \
        "-H \"X-GitHub-Api-Version: 2022-11-28\"" \
        "https://api.github.com/repos/${{ github.repository }}/dispatches" \
        "-d '{\"event_type\":\"$trigger\"," \
        "\"client_payload\":{" \
        "\"sha\":\"${{ env.SHA }}\"," \
        "\"csproj\":\"${{ env.CSPROJ }}\"}'")

        retries=0
        while [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; do
            eval "$CMD"
            CURL_EXIT_CODE=$?
            if [[ $CURL_EXIT_CODE -ne 0 ]]; then
                echo "##[error] Curl command failed on attempt $((retries+1)) with exit code $CURL_EXIT_CODE"
                retries=$((retries+1))
                if [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; then
                    echo "##[warn] Retrying in ${{ vars.WAIT_SECONDS }} seconds..."
                    sleep ${{ vars.WAIT_SECONDS }}
                else
                    echo "##[error] Exhausted ${{ vars.MAX_RETRIES }} retries at ${{ vars.WAIT_SECONDS }} intervals."
                    echo "##[error] Failed to trigger ${{ env.NEXT_WORKFLOW }} workflow with CURL command: $CMD." && exit 90
                fi
            else
                break # successful curl
            fi    
        done
        echo "##[debug] CURL command: $CMD"
