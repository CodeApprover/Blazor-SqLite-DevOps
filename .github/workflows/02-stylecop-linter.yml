---
name: "StyleCop Linter"

# Lints all commits on all valid branches for CSharp compliance

# Exit Codes
# 1: SHA checkout failure
# 2: Dotnet restore error
# 3: Dotnet stylecop build error
# 4: Failed to publish status from workflow
# 5: Curl command to trigger next workflow failed

on:
  repository_dispatch:
    types: "trigger-stylecop-linter"

env:
  # Pre-validated values
  SHA: ${{ github.event.client_payload.sha }}
  SHA_BRANCH: ${{ github.event.client_payload.branch_name }}
  CSPROJ: ${{ github.event.client_payload.csproj }}

jobs:

  stylecop-linting:

    name: StyleCop Linting
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: (github.actor != 'CodeApprover')

    steps:

    - name: Checkout SHA Repository
      id: checkout
      uses: actions/checkout@v3.5.3
      with:
        ref: ${{ env.SHA }}
        fetch-depth: 0

    - name: Handle checkout Outcome
      run: |
        if [[ "${{ steps.checkout-sha.outcome }}" == "failure" ]]; then
          echo "##[error] Failure during checkout of SHA $${{ env.SHA }} on branch ${{ env.SHA_BRANCH }}."
          exit 1
        else
          echo "##[debug] Successful checkout of SHA $${{ env.SHA }} on branch ${{ env.SHA_BRANCH }}."
        fi

    - name: Report
      run: |
        echo "##[debug] Checking initial state"
        date
        echo "SHA=${{ env.SHA }}"
        echo "Environment=${{ env.SHA_BRANCH }}"
        echo "Branch=${{ env.SHA_BRANCH }}"
        echo "Committer=$(git log -1 --pretty=format:'%an')"

    - name: Setup .NET Environment
      uses: actions/setup-dotnet@v3.2.0
      with:
        dotnet-version: '7.0.x'

    - name: Retrieve Cached dotnet Dependencies
      id: cache-dotnet-restore
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-dotnet-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-dotnet-

    - name: Restore Dependencies
      if: steps.cache-dotnet-restore.outputs.cache-hit != 'true'
      run: dotnet restore --no-cache "${{ env.CSPROJ }}" -v detailed || (echo "##[error] Dotnet restore failed" && exit 2)

    - name: Dotnet Build with StyleCop
      run: |
        CMD="dotnet build --no-restore \"${{ env.CSPROJ }}\" "
        CMD+="-v detailed "
        CMD+="/p:StyleCopEnabled=true "
        CMD+="/p:StyleCopTreatErrorsAsWarnings=false "
        CMD+="/p:StyleCopForceFullAnalysis=false"
        eval "$CMD" || (echo "##[error] Dotnet build failed" && exit 3)

    - name: Set default job status
      run: echo "JOB_STATUS=success" >> $GITHUB_ENV

    - name: Set failure status if any step failed
      run: |
        echo "##[error] Failed detected in previous steps"
        echo "JOB_STATUS=failure" >> $GITHUB_ENV
      if: failure()

    - name: Publish success or failure status for tracking
      run: |
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
        -H "Authorization: token ${{ secrets.AUTH }}" \
        -H "Accept: application/vnd.github.v3+json" \
        https://api.github.com/repos/${{ github.repository }}/statuses/${{ env.sha }} \
        -d '{
          "state": "${{ env.JOB_STATUS }}", 
          "description": "Result from Workflow ${{ github.workflow }}",
          "context": "status/${{ github.workflow }}"
        }')
        # Check for failure (non-200 status codes)
        if [[ "$RESPONSE" -ne 200 ]]; then
          echo "##[error] Failed to publish status for ${{ env.SHA }} HTTP Code: $RESPONSE"
          exit 4
        else
            echo "##[debug] Successfully published status for ${{ env.SHA }} HTTP Code: $RESPONSE"
        fi

    - name: Trigger Environment Based Test Suites
      # 03-development-tests.yml | 03-staging-tests.yml | 03-production-tests.yml
      if: success()
      run: |
        case "${{ env.SHA_BRANCH }}" in
          code-development) TEST_SUITE="trigger-development-tests" ;;
          code-staging) TEST_SUITE="trigger-staging-tests" ;;
          code-production) TEST_SUITE="trigger-production-tests" ;;
        esac

        BASE="{\"event_type\": \"${TEST_SUITE}\", \"client_payload\": {"
        SHA="\"sha\": \"${{ env.SHA }}\","
        CSPROJ="\"csproj\": \"${{ env.CSPROJ }}\","
        BRANCH="\"branch_name\": \"${{ env.SHA_BRANCH }}\""
        END="}}"
        PAYLOAD="$BASE$SHA$CSPROJ$BRANCH$END"

        CMD=("curl" "-X" "POST")
        CMD+=("-H" "Authorization: Bearer ${{ secrets.AUTH }}")
        CMD+=("-H" "Accept: application/vnd.github.v3+json")
        CMD+=("-d" "$PAYLOAD")
        CMD+=("https://api.github.com/repos/${{ github.repository }}/dispatches")
        RESPONSE=$("${CMD[@]}")

        if [[ "$RESPONSE" -ne 200 ]]; then
          echo "##[error] ${{ github.workflow }} failed to ${TEST_SUITE} workflow for ${{ env.SHA }} on branch  ${{ env.SHA_BRANCH }}. HTTP Code: $RESPONSE"
          exit 5
        else
           echo "##[debug] ${{ github.workflow }}  ${TEST_SUITE} workflow succeeded for ${{ env.SHA }} on branch  ${{ env.SHA_BRANCH }}. HTTP Code: $RESPONSE"
        fi
