---
name: "StyleCop Linter"

# Lints C# (C Sharp) and JavaScript code for verified commits using StyleCop tool.
# Operates for the code-development, code-staging and code-production branches.

# 1 - Sets .NET environment.
# 2 - Retrieves cached dotnet restore nuget packages.
# 3 - Performs a build with StyleCop enabled.
# 4 - Upon successful linting, it triggers the subsequent, appropriate code-testing suite.

# Exit Codes
# 34 - Dotnet restore failed.
# 35 - Dotnet build failed.

on:
  repository_dispatch:
    types: trigger-stylecop-linter

env:
  SHA: ${{ github.event.client_payload.sha }}
  SHA_BRANCH: ${{ github.event.client_payload.sha_branch }}
  CSPROJ: ${{ github.event.client_payload.csproj }}

jobs:

  stylecop-linting:

    name: StyleCop Linting
    runs-on: ubuntu-latest
    timeout-minutes: 15
    #if: (github.actor != 'CodeApprover')

    steps:

    - name: Checkout SHA Repository
      id: checkout
      uses: actions/checkout@v3.5.3
      with:
        ref: ${{ env.SHA }}
        fetch-depth: 0

    - name: Setup .NET Environment
      uses: actions/setup-dotnet@v3.2.0
      with:
        dotnet-version: '7.0.x'

    - name: Retrieve Cached dotnet Dependencies
      id: cache-dotnet-restore
      uses: actions/cache/restore@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-dotnet-${{ github.sha }}
        restore-keys: ${{ runner.os }}-dotnet-

    - name: Restore Dependencies
      if: steps.cache-dotnet-restore.outputs.cache-hit != 'true'
      run: dotnet restore --no-cache "${{ env.CSPROJ }}" -v detailed || (echo "##[error] Dotnet restore failed" && exit 34)

    - name: Dotnet Build with StyleCop
      run: |
        CMD="dotnet build --no-restore \"${{ env.CSPROJ }}\" "
        CMD+="-v detailed "
        CMD+="/p:StyleCopEnabled=true "
        CMD+="/p:StyleCopTreatErrorsAsWarnings=false "
        CMD+="/p:StyleCopForceFullAnalysis=false"
        eval "$CMD" || (echo "##[error] Dotnet build failed" && exit 35)

    - name: Trigger Next Workflow # 03-development-tests.yml | 03-staging-tests.yml | 03-production-tests.yml
      if: success()
      run: |
        case "${{ env.SHA_BRANCH }}" in
          code-development) trigger="trigger-development-tests" ;;
          code-staging) trigger="trigger-staging-tests" ;;
          code-production) trigger="trigger-production-tests" ;;
        esac
        echo "##[info] Calling $trigger"

        BASE="{\"event_type\": \"$trigger\", \"client_payload\": {"
        SHA="\"sha\": \"${{ env.SHA }}\","
        CSPROJ="\"csproj\": \"${{ env.CSPROJ }}\","
        BRANCH="\"sha_branch\": \"${{ env.SHA_BRANCH }}\""
        END="}}"

        curl -s -o /dev/null -X POST \
        -H "Authorization: Bearer ${{ secrets.AUTH }}" \
        -H "Accept: application/vnd.github.v3+json" \
        -d "$BASE$SHA$CSPROJ$BRANCH$END" \
        "https://api.github.com/repos/${{ github.repository }}/dispatches"
