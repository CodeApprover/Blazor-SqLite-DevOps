---
name: "StyleCop Linter"

# Lints all commits on all valid branches

# Exit Codes:
# 1: Checkout Error
# 2: Dotnet restore error
# 3: Dotnet build error
# 4: Unexpected environment name
# 5: Curl command to trigger tests failed

on:
  repository_dispatch:
    types: "trigger-stylecop-linting"

env:
  PROJ_NAME: "Blazor-SqLite-Golf-Club"
  SHA: ${{ github.event.client_payload.sha }}
  BRANCH_NAME: ${{ github.event.client_payload.branch_name }}
  CSPROJ: ${{ github.event.client_payload.csproj }}

jobs:

  stylecop-linting:
    name: StyleCop Linting
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: (github.actor != 'CodeApprover')

    steps:

    - name: Checkout SHA Repository
      uses: actions/checkout@v3.5.3
      with:
        ref: ${{ env.SHA }}
        fetch-depth: 0 # Fetch all
      continue-on-error: true

    - name: Handle checkout error
      if: steps.checkout.outcome == 'failure'
      run: |
        echo "##[error] Error during checkout"
        exit 1

    - name: Report
      run: |
        echo "##[debug] Checking initial state"
        date
        echo "SHA=${{ env.SHA }}"
        echo "Environment=${{ env.BRANCH_NAME }}"
        echo "Branch=${{ env.BRANCH_NAME }}"
        echo "Committer=$(git log -1 --pretty=format:'%an')"

    - name: Setup .NET Environment
      uses: actions/setup-dotnet@v3.2.0
      with:
        dotnet-version: '7.0.x'

    - name: Retrieve Cached dotnet Dependencies
      id: cache-dotnet-restore
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-dotnet-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-dotnet-

    - name: Restore Dependencies
      if: steps.cache-dotnet-restore.outputs.cache-hit != 'true'
      run: dotnet restore --no-cache "${{ env.CSPROJ }}" -v detailed || (echo "##[error] Dotnet restore failed" && exit 2)

    - name: Dotnet Build with StyleCop
      run: |
        dotnet build --no-restore "${{ env.CSPROJ }}" \
        -v detailed \
        /p:StyleCopEnabled=true \
        /p:StyleCopTreatErrorsAsWarnings=false \
        /p:StyleCopForceFullAnalysis=false || (echo "##[error] Dotnet build failed" && exit 3)

    - name: Trigger Appropriate Tests
       # testing-development.yml | testing-staging.yml | testing-production.yml
      if: success()
      run: |
        case "${{ env.BRANCH_NAME }}" in
          code-development) EVENT_TYPE="trigger-development-tests" ;;
          code-staging) EVENT_TYPE="trigger-env-staging-tests" ;;
          code-production) EVENT_TYPE="trigger-production-tests" ;;
          *) echo "##[error] Unexpected environment name"; exit 4 ;;
        esac

        BASE="{\"event_type\": \"$EVENT_TYPE\", \"client_payload\": {"
        SHA="\"sha\": \"${{ env.SHA }}\","
        CSPROJ="\"csproj\": \"${{ env.CSPROJ }}\","
        BRANCH="\"branch_name\": \"${{ env.BRANCH_NAME }}\""
        END="}}"
        PAYLOAD="$BASE$SHA$CSPROJ$BRANCH$END"

        CMD=("curl" "-X" "POST")
        CMD+=("-H" "Authorization: Bearer ${{ secrets.AUTH }}")
        CMD+=("-H" "Accept: application/vnd.github.v3+json")
        CMD+=("-d" "$PAYLOAD")
        CMD+=("https://api.github.com/repos/${{ github.repository }}/dispatches")  
        RESPONSE=$("${CMD[@]}")
        if [ $? -ne 0 ]; then
            echo "##[error] Failed to trigger tests for $EVENT_TYPE."
            exit 5
        else
            echo "##[debug] Successfully triggered tests for $EVENT_TYPE."
        fi
