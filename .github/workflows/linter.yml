---
name: "Linter"

on:
  push:
    branches: ["code-development", "code-production", "code-staging"]

jobs:
  ##############################################################################################################
  # Report usage
  ##############################################################################################################
  Report:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ Job triggered by a ${{ github.event_name }}"
      - run: echo "üêß Running ${{ runner.os }} server on GitHub Actions."
      - run: echo "üîé Branch ${{ github.ref }}. Repository ${{ github.repository }}"

  ##############################################################################################################
  # Run CodeQL Linter - https://github.com/github/codeql.
  # Set CodeQL supported languages.
  # Checkout code-base.
  # Lint code-base.
  # Generate PDF report.
  ##############################################################################################################
  analyze:
    name: Analyze
    needs: Report
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['csharp']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  ##############################################################################################################
  # Run SuperLinter - https://github.com/marketplace/actions/super-linter
  ##############################################################################################################
  super-linter:
    needs: analyze
    runs-on: ubuntu-latest
    steps:
      - name: superlint-checkout-code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: lint-code-base
        uses: super-linter/super-linter@v5
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: ${{ github.ref }}
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
  
################################################################################################################
# Clear nuget package cache for clean install
################################################################################################################
  clean-up:
    name: Clean up Nuget
    needs: super-linter
    runs-on: ubuntu-latest
    steps:
      - name: clean-up-nuget-cache
        run: dotnet nuget locals all --clear  

##############################################################################################################
# Run StyleCop Linting - https://github.com/StyleCop/StyleCop
##############################################################################################################
  stylecop-linting:
    runs-on: ubuntu-latest
    needs: super-linter
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup .NET environment
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
      - name: Restore dependencies
        run: dotnet restore --no-cache
      - name: Install StyleCop.MSBuild
        run: dotnet add package StyleCop.MSBuild --version 6.2.0
      - name: Run StyleCop analysis
        run: |
          # Find the project file (Blazor SqlLite Golf Club.csproj) in the repository
          project_file=$(find "${{ github.workspace }}" -type f -name "Blazor SqlLite Golf Club.csproj" -print -quit)
          # Ensure the project file exists before running StyleCop
          if [ -f "$project_file" ]; then
            dotnet build "$project_file" /p:StyleCopEnabled=true
          else
            echo "Project file not found: Blazor SqlLite Golf Club.csproj"
            exit 1
          fi
