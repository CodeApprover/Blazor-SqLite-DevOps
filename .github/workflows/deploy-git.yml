---
name: "Deploy SHA to Git Environment"

on:
  repository_dispatch:
    types: "trigger-git-deploy"

env:
  PROJ_NAME: "Blazor-SqLite-Golf-Club"

jobs:
  deploy-to-environment:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Extract SHA for Checkout
      run: echo "SHA=$(echo '${{ github.event.client_payload.sha }}')" >> $GITHUB_ENV

    - name: Checkout SHA repository
      uses: actions/checkout@v3.5.3
      with:
        ref: ${{ env.SHA }}
        fetch-depth: 0

    - name: Extract Branch Name from SHA Commit
      run: |
        branch=$(git branch -r --contains ${{ env.SHA }} | grep 'origin/' | sed 's#origin/##' | head -n 1 | xargs)
        echo "BRANCH_NAME=${branch}" >> $GITHUB_ENV

    - name: Determine Deploy Branch and Directories
      run: |
        deploy_branch="Invalid"
        directory="Invalid"
        
        case "${{ env.BRANCH_NAME }}" in
          "code-development")
            deploy_branch="code-staging"
            directory="development"
            ;;
          "code-staging")
            deploy_branch="code-production"
            directory="staging"
            ;;
          "code-production")
            echo "No deployment required for code-production."
            exit 0
            ;;
        esac
        
        if [[ "$deploy_branch" == "Invalid" ]]; then
          echo "Error: Invalid deployment branch determined."
          exit 1
        fi
        
        echo "DEPLOY_BRANCH=$deploy_branch" >> $GITHUB_ENV
        echo "DIRECTORY=$directory" >> $GITHUB_ENV

    - name: Locate required source directory
      run: |
        branch_suffix=${BRANCH_NAME#code-}
        dir_path=$(find $GITHUB_WORKSPACE -type d -name "$branch_suffix" -print | head -n 1)
        echo "SOURCE_DIR=$dir_path" >> $GITHUB_ENV

    - name: List contents of the source directory before archiving
      run: |
        echo "Listing contents of SOURCE_DIR before archiving:"
        ls -la ${{ env.SOURCE_DIR }}
        echo "COMMIT WORKFLOW DRIVER IS"
        cat ${{ env.SOURCE_DIR }}/${{ env.PROJ_NAME }}/workflow.driver

    - name: Archive development directory
      uses: actions/upload-artifact@v3.1.2
      with:
        name: development-archive
        path: ${{ env.SOURCE_DIR }}

    - name: Checkout target branch
      run: |
        git fetch
        git checkout ${{ env.DEPLOY_BRANCH }}

    - name: List contents of the target directory before synchronisation
      run: |
        echo "Listing contents of target DIRECTORY before downloading archive:"
        ls -la $GITHUB_WORKSPACE/${{ env.DIRECTORY }}
        echo "DEFUNCT WORKFLOW DRIVER IS"
        cat ${{ env.DIRECTORY }}/${{ env.PROJ_NAME }}/workflow.driver

    - name: Download archived development directory
      uses: actions/download-artifact@v3
      with:
        name: development-archive
        path: /tmp/temp-dir

    - name: List contents of the downloaded archive
      run: |
        echo "Listing contents of downloaded archive:"
        ls -la /tmp/temp-dir/

    - name: Synchronize target dir with source dir using rsync
      run: |
        echo "Synchronizing directories using rsync:"
        rsync -av --delete --checksum /tmp/temp-dir/ $GITHUB_WORKSPACE/${{ env.DIRECTORY }}/
        RSYNC_EXIT_STATUS=$?
        if [ $RSYNC_EXIT_STATUS -ne 0 ]; then
          echo "Error: rsync failed with exit status $RSYNC_EXIT_STATUS"
          exit $RSYNC_EXIT_STATUS
        fi
        echo "Git status after synchronization:"
        git status
        echo "Checking for differences between source and target directories:"
        DIFF=$(diff -rq /tmp/temp-dir/ $GITHUB_WORKSPACE/${{ env.DIRECTORY }})
        if [ "$DIFF" != "" ]; then
          echo "Differences correctly detected between source and target directories ->"
          echo "$DIFF"
        else
          echo "Error - No differences detected between source and target directories."
          exit 1
        fi

    - name: List contents of the target directory after replacing
      run: |
        echo "Listing contents of target DIRECTORY after replacing:"
        ls -la $GITHUB_WORKSPACE/${{ env.DIRECTORY }}

    - name: Commit and push
      run: |
        git config user.name "CodeApprover"
        git config user.email "pucfada@pm.me"
        git add -A
        git commit -m "Migrating changes from ${{ env.BRANCH_NAME }} to ${{ env.DEPLOY_BRANCH }} [skip ci]"
        git push origin ${{ env.DEPLOY_BRANCH }}

    - name: Check for lock file
      run: |
        trap 'echo "Error on line $LINENO: $BASH_COMMAND"; exit 1' ERR

        declare -A branch_lock_map
        branch_lock_map["code-production"]=".production.lock"
        branch_lock_map["code-staging"]=".staging.lock"
        branch_lock_map["code-development"]=".development.lock"
        branch_lock_map["main"]=".main.lock"

        echo "##[debug] Branch is ${{ env.BRANCH_NAME }}"
        lock_file=${branch_lock_map[${{ env.BRANCH_NAME }}]}
        echo "##[debug] lock_file is $lock_file"

        git config user.name "CodeApprover"
        git config user.email "pucfada@pm.me"

        # Force branch refresh
        git fetch origin ${{ env.BRANCH_NAME }}
        git checkout ${{ env.BRANCH_NAME }}

        if git ls-tree HEAD -- "$lock_file"; then
          echo "Lock file $lock_file found on branch ${{ env.BRANCH_NAME }}"
          git rm "$lock_file"
          git commit -m "Removed lock after versioning [skip ci]"
          git push origin "${{ env.BRANCH_NAME }}"
        else
          echo "Required lock file for ${{ env.SHA }} on branch ${{ env.BRANCH_NAME }} was not found. Exiting."
          exit 1
        fi
