---
name: "Deploy SHA to Git Environment"

on:
  repository_dispatch:
    types: "trigger-git-deploy"

env:
  PROJ_NAME: "Blazor-SqLite-Golf-Club"

jobs:
  deploy-to-environment:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Extract SHA for Checkout
      run: echo "SHA=$(echo '${{ github.event.client_payload.sha }}')" >> $GITHUB_ENV

    - name: Checkout SHA repository
      uses: actions/checkout@v3.5.3
      with:
        ref: ${{ env.SHA }}
        fetch-depth: 0

    - name: Extract Branch Name from SHA Commit
      run: |
        branch=$(git branch -r --contains ${{ env.SHA }} | grep 'origin/' | sed 's#origin/##' | head -n 1 | xargs)
        if [[ -z $branch ]]; then
          echo "Failed to extract branch name for SHA: ${{ env.SHA }}"
          exit 1 
        fi
        echo "BRANCH_NAME=${branch}" >> $GITHUB_ENV

    - name: Determine Deploy Branch 
      run: |
        deploy_branch="Invalid"
        case "${{ env.BRANCH_NAME }}" in
          "code-development")
            deploy_branch="code-staging"
            ;;
          "code-staging")
            deploy_branch="code-production"
            ;;
          "code-production")
            deploy_branch="main"
            ;;
        esac
        [[ "$deploy_branch" == "Invalid" ]] && echo "Invalid deployment branch $deploy_branch." && exit 1
        echo "DEPLOY_BRANCH=$deploy_branch" >> $GITHUB_ENV

    - name: Extract Repository Name
      run: echo "REPO_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_ENV

    - name: Fix Repository Permissions
      run: |
        if ! git config --get-regexp '^safe\.directory' | grep -q '*'; then
          git config --global --add safe.directory '*'
        fi

    - name: Deploy to next environment
      run: |
        git config user.name "codeapprover"
        git config user.email "pucfada@pm.me"

    - name: Clone, copy and push
      run: |
        # Clone the target repository to a temp directory
        git clone https://github.com/codeapprover/Blazor-SqLite-DevOps.git /tmp/target-repo
    
        # Navigate to the cloned directory
        cd /tmp/target-repo
    
        # Select directory to overwrite based on source branch
        target_dir=""
        source_dir=""
        case "${{ env.BRANCH_NAME }}" in
          "code-development")
            target_dir="development"
            source_dir="development"
            ;;
          "code-staging")
            target_dir="staging"
            source_dir="staging"
            ;;
          "code-production")
            # Do nothing for code-production to main
            exit 0
            ;;
        esac
    
        # Remove the target directory in the cloned repo if it exists
        rm -rf $target_dir
    
        # Copy the source directory from original repo to target directory in cloned repo
        mkdir -p $target_dir
        cp -r $GITHUB_WORKSPACE/$source_dir/* $target_dir/
    
        # Commit and push the changes
        git add .
        git commit -m "Update from source repository $source_dir to $target_dir"
        git push origin ${{ env.DEPLOY_BRANCH }}
    
      env:
        GITHUB_TOKEN: ${{ secrets.AUTH }}

    - name: Check for lock file
      run: |
        trap 'echo "Error on line $LINENO: $BASH_COMMAND"; exit 1' ERR

        declare -A branch_lock_map
        branch_lock_map["code-production"]=".production.lock"
        branch_lock_map["code-staging"]=".staging.lock"
        branch_lock_map["code-development"]=".development.lock"
        branch_lock_map["main"]=".main.lock"

        echo "##[debug] Branch is ${{ env.BRANCH_NAME }}"
        lock_file=${branch_lock_map[${{ env.BRANCH_NAME }}]}
        echo "##[debug] lock_file is $lock_file"

        git config user.name "CodeApprover"
        git config user.email "pucfada@pm.me"

        # Force branch refresh
        git fetch origin ${{ env.BRANCH_NAME }}
        git checkout ${{ env.BRANCH_NAME }}

        if git ls-tree HEAD -- "$lock_file"; then
          echo "Lock file $lock_file found on branch ${{ env.BRANCH_NAME }}"
          git rm "$lock_file"
          git commit -m "Removed lock after versioning [skip ci]"
          git push origin "${{ env.BRANCH_NAME }}"
        else
          echo "Required lock file for ${{ env.SHA }} on branch ${{ env.BRANCH_NAME }} was not found. Exiting."
          exit 1
        fi
