---
name: "Deploy SHA to Git Environment"

on:
  repository_dispatch:
    types: "trigger-git-deploy"

env:
  PROJ_NAME: "Blazor-SqLite-Golf-Club"

jobs:

  deploy-to-environment:

    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
        
    - name: Extract SHA for Checkout
      run: echo "SHA=$(echo '${{ github.event.client_payload.sha }}')" >> $GITHUB_ENV

    - name: Checkout SHA repository
      uses: actions/checkout@v3.5.3
      with:
        ref: ${{ env.SHA }}
        fetch-depth: 0 # Fetch all

    - name: Extract Branch Name from SHA Commit
      run: |
        branch=$(git branch -r --contains ${{ env.SHA }} | grep 'origin/' | sed 's#origin/##' | head -n 1 | xargs)
        if [[ -z $branch ]]; then
          echo "Failed to extract branch name for SHA: ${{ env.SHA }}"
          exit 1 
        fi
        echo "BRANCH_NAME=${branch}" >> $GITHUB_ENV

    - name: Determine Deploy Branch and Directory
      run: |
        deploy_branch="Invalid"
        deploy_dir="."
        case "${{ env.BRANCH_NAME }}" in
          "code-development")
            deploy_branch="code-staging"
            deploy_dir="./code-development-in"
            ;;
          "code-staging")
            deploy_branch="code-production"
            deploy_dir="./code-staging-in"
            ;;
          "code-production")
            deploy_branch="main"
            deploy_dir="."
            ;;
        esac
        [[ "$deploy_branch" == "Invalid" ]] && echo "Invalid deployment branch $deploy_branch." && exit 1
        echo "DEPLOY_BRANCH=$deploy_branch" >> $GITHUB_ENV
        echo "DEPLOY_DIR=$deploy_dir" >> $GITHUB_ENV

    - name: Update Deployment Status
      run: |
        desc="Deployed ${{ github.event.client_payload.sha }} from ${{ env.BRANCH_NAME }} to ${{ env.DEPLOY_BRANCH }}"
        curl -X POST \
          -H "Authorization: token ${{ secrets.AUTH }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/deployments/${{ steps.create_deployment.outputs.deployment_id }}/statuses \
          -d '{
            "state": "success",
            "description": "'"${desc}"'",
            "environment": "${{ env.BRANCH_NAME }}"
          }'
      env:
        GITHUB_TOKEN: ${{ secrets.AUTH }}

    - name: Check for lock file
      run: |
        trap 'echo "Error on line $LINENO: $BASH_COMMAND"; exit 1' ERR

        # Set all lock file names
        declare -A branch_lock_map
        branch_lock_map["code-production"]=".production.lock"
        branch_lock_map["code-staging"]=".staging.lock"
        branch_lock_map["code-development"]=".development.lock"
        branch_lock_map["main"]=".main.lock"

        # Set branch lock file name
        echo "##[debug] Branch is ${{ env.BRANCH_NAME }}"
        lock_file=${branch_lock_map[${{ env.BRANCH_NAME }}]}
        echo "##[debug] lock_file is $lock_file"

        # Configure git user
        git config user.name "CodeApprover"
        git config user.email "pucfada@pm.me"

        # Fetch the branch
        git fetch origin ${{ env.BRANCH_NAME }}

        # Checkout the branch
        git checkout ${{ env.BRANCH_NAME }}

        # Pull latest changes 
        git pull origin ${{ env.BRANCH_NAME }}

        # Delete lock file
        if git ls-tree HEAD -- "$lock_file"; then
          echo "Lock file $lock_file found on branch ${{ env.BRANCH_NAME }}"
          # Delete lock file
          trap 'echo "Error on line $LINENO: $BASH_COMMAND"; exit 1' ERR
          git pull origin "${{ env.BRANCH_NAME }}"
          git rm "$lock_file"
          git commit -m "Removed lock after versioning [skip ci]"
          git push origin "${{ env.BRANCH_NAME }}"
        else
          # Fail if a lock file does not exist
          echo "Required lock file for ${{ env.SAH }} on branch ${{ env.BRANCH_NAME }} was not found. Exiting."
          exit 1
        fi

    - name: Create GitHub Deployment
      id: create_deployment
      run: |
        response=$(curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/deployments \
          -d '{
            "ref": "${{ env.DEPLOY_BRANCH }}",
            "environment": "${{ env.BRANCH_NAME }}",
            "description": "Deploying to ${{ env.BRANCH_NAME }}"
          }')
        deployment_id=$(echo "$response" | jq '.id')
        echo "::set-output name=deployment_id::$deployment_id"
      env:
        GITHUB_TOKEN: ${{ secrets.AUTH }}
      continue-on-error: true
