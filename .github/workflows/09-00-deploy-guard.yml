---
name: Deployment Guard

on:
  workflow_run:
    workflows:
      - Authentication Gate
      - Cache Dependencies
      - StyleCop Linter
      - Development Tests
      - Staging Tests
      - Production Tests
      - Lockfile Checker
      - Security Scan
      - Superlinter
      - Versioning
      - Deploy Docker
      - Deploy Git
      - Success
    types:
      - completed

jobs:
  revert-commit:
    name: Revert Failed Commit
    runs-on: ubuntu-latest
    timeout-minutes: 15

    if: ${{ github.event.workflow_run.conclusion != 'success' }}

    # un-comment to block execution
    #if: (github.actor != ${{ github.repository_owner }})

    steps:
      - name: Extract SHA that triggered failure
        run: |

          echo "##[info] Searching for .lock files in the repository."
          lockfile_path=$(find . -name "*.lock" | head -n 1)
          if [[ ! -z "$lockfile_path" ]]; then
              echo "##[debug] Validating SHA1 as 40 alpha-numeric characters."
              if [[ ${#sha} -eq 40 && $sha =~ ^[0-9a-fA-F]+$ ]]; then
                  echo "SHA=$(cat "$lockfile_path")" >> $GITHUB_ENV
              echo "SHA=$sha" >> $GITHUB_ENV
              else
                  echo "##[error] Content of .lock file is not a valid SHA: $sha"
                  exit 60
              fi
          else
              echo "##[warn] Expected .lock file was not found."
              exit 61
          fi

      - name: Checkout repository
        uses: actions/checkout@v3.6.0
        with:
          ref: ${{ env.SHA }}
          fetch-depth: 0

      - name: Extract Branch Name from SHA Commit
        run: |

          branch=$(git name-rev ${{ env.SHA }} | sed 's#.*/##' | sed 's#.*-##')
          echo "BRANCH_NAME=$branch" >> $GITHUB_ENV

      - name: Configure Git User
        run: |

          git config user.name "${{ github.repository_owner}}"
          git config user.email "${{ vars.EMAIL }}"

      - name: Revert commit
        run: |
          git revert ${{ env.SHA }}
          git push origin ${{ env.BRANCH_NAME }}

      - name: Check and Remove Lock File with Specific SHA
        run: |

          trap 'echo "Error on line $LINENO: $BASH_COMMAND"; exit 1' ERR
          declare -A branch_lock_map
          branch_lock_map["code-production"]=".production.lock"
          branch_lock_map["code-staging"]=".staging.lock"
          branch_lock_map["code-development"]=".development.lock"
          branch_lock_map["main"]=".main.lock"

          echo "##[debug] Branch is ${{ env.BRANCH_NAME }}"
          lock_file=${branch_lock_map[${{ env.BRANCH_NAME }}]}
          echo "##[debug] lock_file is $lock_file"

          # Check if the lock file contains the specific SHA
          if [[ $(cat "$lock_file") == "${{ github.event.client_payload.sha }}" ]]; then
            echo "Removing lock file with SHA ${{ github.event.client_payload.sha }} found on branch ${{ env.BRANCH_NAME }}"
            git rm "$lock_file"
            if [ $? -eq 0 ]; then
                git commit -m "Removed lock after SHA ${{ github.event.client_payload.sha }} workflow failure [skip ci]"
                git push origin "${{ env.BRANCH_NAME }}"
            else
                echo "Error: Failed to remove lock file"
                exit 1
            fi
          else
            echo "Lock file with SHA ${{ github.event.client_payload.sha }} not found on branch ${{ env.BRANCH_NAME }}. Exiting."
            exit 1
          fi

  notify-committer:
    runs-on: ubuntu-latest
    needs: revert-commit

    steps:
      - name: Notify committer of SHA rejection and revert branch
        run: |

          COMMITTER=$(git log -1 --pretty=format:'%an')
          WORKFLOW_LINK="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          COMMENT_BODY="Hello @$COMMITTER, your recent commit ${{ github.event.workflow_run.head_sha }} "
          COMMENT_BODY+="has failed, been reverted, and any associated lock files were removed. "
          COMMENT_BODY+="Please check the [workflow run]($WORKFLOW_LINK) for details, "
          COMMENT_BODY+="address any issues and try pushing again. Thank you!"

          CURL_CMD="curl -X POST"
          CURL_CMD+=" -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\""
          CURL_CMD+=" -H \"Accept: application/vnd.github.v3+json\""
          CURL_CMD+=" https://api.github.com/repos/${{ github.repository }}/commits/${{ github.event.workflow_run.head_sha }}/comments"
          CURL_CMD+=" -d \"{\\\"body\\\":\\\"$COMMENT_BODY\\\"}\""
          eval "$CURL_CMD"

  # reset the code-dev ??? what about concurrent commits? push dev dir to main and clone main...
