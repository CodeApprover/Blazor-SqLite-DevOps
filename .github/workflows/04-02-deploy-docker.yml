---
name: Deploy Docker

# Builds and pushes a Docker image of the commit SHA repository, if it doesn't exist.
# Executes for the code-development, code-staging and code-production branches.

# 1 - Checkout: Fetch the payload SHA commit.
# 2 - Docker Login: Authenticate with Docker Hub.
# 3 - Enable Features: Turn on Docker's experimental features.
# 4 - Get Version Tag: Identify the latest semantic version tag from git tags.
# 5 - Docker Build & Push: Check for existing Docker image, build and push if not found.
# 6 - Trigger Workflow: If successful, initiate another GitHub workflow (09-deploy-git.yml).

# Exit Codes
# 47 - No tags found.
# 48 - Dockerfile not found.
# 49 - Dockerfile build failed.
# 50 - Dockerfile push failed.

on:
  repository_dispatch:
    types: Deploy Docker

env:
  SHA: ${{ github.event.client_payload.sha }}
  CSPROJ: ${{ github.event.client_payload.csproj }}
  NEXT_WORKFLOW: Deploy Git

jobs:

  save-docker-image:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    # un-comment to block execution
    #if: (github.actor != ${{ github.repository_owner }})

    steps:
    
    - name: Checkout SHA repository
      uses: actions/checkout@v3.6.0
      with:
        ref: ${{ env.SHA }}
        fetch-depth: 0

    - name: Log in to Docker Hub
      uses: docker/login-action@v2.2.0
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: Enable Docker Experimental Features
      run: |
      
        echo '{ "experimental": true }' | sudo tee /etc/docker/daemon.json
        sudo systemctl restart docker
        docker version

    - name: Determine next version tag
      run: |
      
        git fetch --tags
        if [ -z "$(git tag)" ]; then
            echo "##[error] No tags found for ${{ github.repository }}" && 47
        fi
        latest_tag=$(git tag | sort -V | tail -n 1)     
        echo "##[info] Latest Tag = $latest_tag"
        echo "NEW_VERSION=${latest_tag}" >> $GITHUB_ENV

    - name: Build and Push Docker image
      run: |
      
        docker_repo=$(echo "$(basename "${{ github.workspace }}")" | tr 'A-Z' 'a-z')
        if docker manifest inspect ${{ secrets.DOCKER_HUB_USERNAME }}/$docker_repo:${{ env.NEW_VERSION }} > /dev/null; then
            echo "Docker image already exists! Skipping Docker push."
        else
            branch=$(git branch --contains ${{ env.SHA }})
            docker_file=$(find ./$(echo "$branch" | sed 's/^code-//') -name "Dockerfile" | head -n 1)
            if [[ ! -f "$docker_file" ]]; then
                echo "##[error] Dockerfile not found for ${{ env.SHA }} --> Exit 48"
                exit 48
            fi
            CMD="docker build -t \"${{ secrets.DOCKER_HUB_USERNAME }}/$docker_repo:${{ env.NEW_VERSION }}\" "
            CMD+="-f \"${docker_file}\" \"${{ github.workspace }}\" "
            echo "##[info] Docker build command is $CMD"
            eval ${CMD} || (echo "##[error] Docker build failed" && exit 49)
            CMD="docker push \"${{ secrets.DOCKER_HUB_USERNAME }}/$docker_repo:${{ env.NEW_VERSION }}\""
            eval ${CMD} || (echo "##[error] Docker push failed" && exit 50)
        fi

    - name: Trigger Next Workflow
      if: success()
      run: |
      
        CMD=$(echo "curl -L -X POST" \
        "-H \"Accept: application/vnd.github+json\"" \
        "-H \"Authorization: Bearer ${{ secrets.AUTH }}\"" \
        "-H \"X-GitHub-Api-Version: 2022-11-28\"" \
        "https://api.github.com/repos/${{ github.repository }}/dispatches" \
        "-d '{\"event_type\":\"$trigger\"," \
        "\"client_payload\":{" \
        "\"sha\":\"${{ env.SHA }}\"," \
        "\"csproj\":\"${{ env.CSPROJ }}\"}'")

        retries=0
        while [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; do
            eval "$CMD"
            CURL_EXIT_CODE=$?
            if [[ $CURL_EXIT_CODE -ne 0 ]]; then
                echo "##[error] Curl command failed on attempt $((retries+1)) with exit code $CURL_EXIT_CODE"
                retries=$((retries+1))
                if [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; then
                    echo "##[warn] Retrying in ${{ vars.WAIT_SECONDS }} seconds..."
                    sleep ${{ vars.WAIT_SECONDS }}
                else
                    echo "##[error] Exhausted ${{ vars.MAX_RETRIES }} retries at ${{ vars.WAIT_SECONDS }} intervals."
                    echo "##[error] Failed to trigger ${{ env.NEXT_WORKFLOW }} workflow with CURL command: $CMD." && exit 90
                fi
            else
                break # successful curl
            fi    
        done
        echo "##[debug] CURL command: $CMD"
