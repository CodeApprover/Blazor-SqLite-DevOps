######################################
# Workflow: Deploy Docker

# Description:
# The Deploy Docker workflow is responsible for building and deploying a Docker image to Docker Hub.
# The primary job, save-docker-image, follows these steps:
# 1. Checkout the specific SHA of the repository.
# 2. Authenticate with Docker Hub.
# 3. Enable Docker experimental features.
# 4. Build and push the Docker image to Docker Hub.
# 5. Tag the repository with the new version.
#
# On successful Docker deployment the NEXT_WORKFLOW is triggered.

# Trigger:
# The workflow is initiated when the `Deploy Docker` event is received.

# Exit Codes:
# 48 - Dockerfile not found.
# 49 - Docker build failed.
# 50 - Docker push failed.
# 90 - Failure to trigger the next workflow after all retry attempts.

######################################

---
name: Deploy Docker

on:
  repository_dispatch:
    types: [Deploy Docker]

env:
  SHA: ${{ github.event.client_payload.sha }}
  SHA_BRANCH: ${{ github.event.client_payload.sha_branch }}
  NEW_VERSION: ${{ github.event.client_payload.new_version }}
  CSPROJ: ${{ github.event.client_payload.csproj }}
  NEXT_WORKFLOW: Deploy Git

jobs:
  save-docker-image:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:

    # Step 1: Checkout the repository using the specified SHA.
    - name: Checkout SHA repository
      uses: actions/checkout@v3.6.0
      with:
        ref: ${{ env.SHA }}
        fetch-depth: 0

    # Step 2: Authenticate with Docker Hub.
    - name: Log in to Docker Hub
      uses: docker/login-action@v2.2.0
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    # Step 3: Enable Docker experimental features.
    - name: Enable Docker Experimental Features
      run: |
        echo '{ "experimental": true }' | sudo tee /etc/docker/daemon.json
        sudo systemctl restart docker

    # Step 4: Build and push the Docker image.
    - name: Build and Push Docker image
      run: |
        docker_repo=$(echo "$(basename "${{ github.workspace }}")" | tr 'A-Z' 'a-z')
        if docker manifest inspect ${{ secrets.DOCKER_HUB_USERNAME }}/$docker_repo:${{ env.NEW_VERSION }} > /dev/null; then
            echo "Docker image already exists! Skipping Docker push."
        else
            docker_file=$(find ./$(echo "${{ env.SHA_BRANCH }}" | sed 's/^code-//') -name "Dockerfile" | head -n 1)
            if [[ ! -f "$docker_file" ]]; then
                echo "##[error] Dockerfile not found for ${{ env.SHA }} --> Exit 48"
                exit 48
            fi
            CMD="docker build -t \"${{ secrets.DOCKER_HUB_USERNAME }}/$docker_repo:${{ env.NEW_VERSION }}\" "
            CMD+="-f \"${docker_file}\" \"${{ github.workspace }}\" "
            echo "##[info] Docker build command is $CMD"
            eval ${CMD} || (echo "##[error] Docker build failed" && exit 49)
            CMD="docker push \"${{ secrets.DOCKER_HUB_USERNAME }}/$docker_repo:${{ env.NEW_VERSION }}\""
            eval ${CMD} || (echo "##[error] Docker push failed" && exit 50)
        fi

    # Step 5: Tag the repository with the new version.
    - name: Push Versioning Tag
      if: success()
      run: |
        git config user.name "${{ github.repository_owner }}"
        git config user.email "${{ vars.EMAIL }}"
        git remote set-url origin https://x-access-token:${{ secrets.AUTH }}@github.com/${{ github.repository }}
        git tag ${{ env.NEW_VERSION }}
        git push origin ${{ env.NEW_VERSION }}

    # Step 6: Trigger the next workflow if Docker deployment is successful.
    - name: Trigger Next Workflow
      if: success()
      run: |
        echo "##[info] Starting the next workflow: ${{ env.NEXT_WORKFLOW }}."

        CMD=$(echo "curl -L -X POST" \
        "-H \"Accept: application/vnd.github+json\"" \
        "-H \"Authorization: Bearer ${{ secrets.AUTH }}\"" \
        "https://api.github.com/repos/${{ github.repository }}/dispatches" \
        "-d '{\"event_type\":\"${{ env.NEXT_WORKFLOW }}\"," \
        "\"client_payload\":{" \
        "\"sha\":\"${{ env.SHA }}\"," \
        "\"sha_branch\":\"${{ env.SHA_BRANCH }}\"," \
        "\"new_version\":\"${{ env.NEW_VERSION }}\"," \
        "\"csproj\":\"${{ env.CSPROJ }}\"}'")

        retries=0
        while [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; do
          eval "$CMD"
          CURL_EXIT_CODE=$?
          if [[ $CURL_EXIT_CODE -ne 0 ]]; then
            echo "##[error] Curl command failed on attempt $((retries+1)) with exit code $CURL_EXIT_CODE."
            retries=$((retries+1))
            if [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; then
              echo "##[warn] Retrying in ${{ vars.WAIT_SECONDS }} seconds..."
              sleep ${{ vars.WAIT_SECONDS }}
            else
              echo "##[error] All retries exhausted. Failed to trigger ${{ env.NEXT_WORKFLOW }}."
              exit 90
            fi
          else
            echo "##[info] Successfully triggered ${{ env.NEXT_WORKFLOW }}."
            break
          fi
        done
