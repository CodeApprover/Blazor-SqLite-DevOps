---
name: Development Tests

# ${{ github.workflow }} Overview
#
# This GitHub Actions workflow is dedicated to conducting unit tests in the development environment.
#
# The development-tests job performs these main phases:
# 1. Environment Setup: Checks out the specified SHA of the repository.
# 2. Dependency Installation: Depending on the test framework specified (Nunit or Xunit), it installs the required dependencies.
# 3. Unit Testing: Executes unit tests based on the test framework selected. Results are stored in a corresponding trx file.
#
# After the tests are successfully executed, the trigger-next-workflow job is activated, which:
# 1. Triggers the next workflow, specifically "04-lockfile-checker.yml", if all tests have passed.
#
# If the unit tests fail, this workflow will not proceed to the trigger-next-workflow job.

on:
  repository_dispatch:
    types: Development Tests

env:
  SHA: ${{ github.event.client_payload.sha }}
  CSPROJ: ${{ github.event.client_payload.csproj }}
  NEXT_WORKFLOW: Lockfile-Checker

jobs:

  development-tests:

    name: Unit Tests (${{ matrix.test_framework }})
    runs-on: ubuntu-latest
    timeout-minutes: 15

    # un-comment to block execution
    #if: (github.actor != ${{ github.repository_owner }})

    strategy:
      matrix:
        test_framework: [Nunit, Xunit]

    steps:

    - name: Checkout SHA Repository
      id: checkout-sha
      uses: actions/checkout@v3.6.0
      with:
        ref: ${{ env.SHA }}
        fetch-depth: 0

    - name: Install Test Suite Dependencies
      run: |
      
        if [ "${{ matrix.test_framework }}" == "Nunit" ]; then
          test_type="Nunit_Player_Unit_Tests"
        else
          test_type="Xunit_Game_Unit_Tests"
        fi
        CMD="dotnet restore --no-cache"
        CMD+=" \"${{ github.workspace }}/tests/${test_type}/${test_type}.csproj\""
        eval "$CMD"

    - name: Run Nunit and Xunit Unit Tests
      run: |
      
        if [ "${{ matrix.test_framework }}" == "Nunit" ]; then
          test_type="Nunit_Player_Unit_Tests"
          log_file_name="nunit-results.trx"
        else
          test_type="Xunit_Game_Unit_Tests"
          log_file_name="xunit-results.trx"
        fi
        CMD="dotnet test"
        CMD+=" --no-restore --verbosity detailed"
        CMD+=" --logger \"trx;LogFileName=${log_file_name}\""
        CMD+=" \"${{ github.workspace }}/tests/${test_type}/${test_type}.csproj\""
        eval "$CMD"

    - name: Trigger Next Workflow
      if: success()
      run: |
      
        CMD=$(echo "curl -L -X POST" \
        "-H \"Accept: application/vnd.github+json\"" \
        "-H \"Authorization: Bearer ${{ secrets.AUTH }}\"" \
        "-H \"X-GitHub-Api-Version: 2022-11-28\"" \
        "https://api.github.com/repos/${{ github.repository }}/dispatches" \
        "-d '{\"event_type\":\"${{ env.NEXT_WORKFLOW }}\"," \
        "\"client_payload\":{" \
        "\"sha\":\"${{ env.SHA }}\"," \
        "\"csproj\":\"${{ env.CSPROJ }}\"}'")

        retries=0
        while [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; do
            eval "$CMD"
            CURL_EXIT_CODE=$?
            if [[ $CURL_EXIT_CODE -ne 0 ]]; then
                echo "##[error] Curl command failed on attempt $((retries+1)) with exit code $CURL_EXIT_CODE"
                retries=$((retries+1))
                if [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; then
                    echo "##[warn] Retrying in ${{ vars.WAIT_SECONDS }} seconds..."
                    sleep ${{ vars.WAIT_SECONDS }}
                else
                    echo "##[error] Exhausted ${{ vars.MAX_RETRIES }} retries at ${{ vars.WAIT_SECONDS }} intervals."
                    echo "##[error] Failed to trigger ${{ env.NEXT_WORKFLOW }} workflow with CURL command: $CMD." && exit 90
                fi
            else
                break # successful curl
            fi    
        done
        echo "##[debug] CURL command: $CMD"
