---
name: "Check Lock File"

# Workflow to manage lock files for sequential task execution within a branch.

# Exit Codes
# 36 - Failed to push lock file.
# 37 - Failed to fetch SAH branch.
# 38 - Lock file presence persists.
# 39 - Failed to push lock file.
# 40 - Failed to fetch new remote.
# 41 - Failed to detect pushed lock file.

on:
  repository_dispatch:
    types: trigger-lockfile-checker

env:
  SHA: ${{ github.event.client_payload.sha }}
  BRANCH_NAME: ${{ github.event.client_payload.branch_name }}
  CSPROJ: ${{ github.event.client_payload.csproj }}

jobs:

  check-for-lock-file:

    runs-on: ubuntu-latest
    timeout-minutes: 15
    #if: (github.actor != 'CodeApprover')
    
    steps:

    - name: Checkout SHA Repository
      id: checkout
      uses: actions/checkout@v3.5.3
      with:
        ref: ${{ env.SHA }}
        fetch-depth: 0

    - name: Set Lock File Name Based on Branch
      run: |
        branch=${{ env.BRANCH_NAME }}
        if [[ $branch == "code-"* ]]; then
            lock_name=${branch#code-}
            echo "LOCK_FILE=.$lock_name.lock" >> $GITHUB_ENV
        elif [[ $branch == "main" ]]; then
            echo "LOCK_FILE=.main.lock" >> $GITHUB_ENV
        fi

    - name: Check for Remote Lock File
      run: |
        retries=0
        while [[ $retries -lt ${{ secrets.MAX_RETRIES }} ]]; do
          git fetch origin ${{ env.BRANCH_NAME }}
          git checkout ${{ env.BRANCH_NAME }}
          
          commits_before_sha=$(git rev-list ${{ env.SHA }}~1..${{ env.BRANCH_NAME }} --)
          
          # Check for lock file
          if git ls-tree -r $commits_before_sha | grep "${{ env.LOCK_FILE }}"; then
              retries=$((retries+1))
              locked_sha=$(cat "${{ env.LOCK_FILE }}")
              echo "##[warn] Lock file ${{ env.LOCK_FILE }} found for commit SHA $locked_sha."
              echo "##[warn] Waiting ${{ secrets.WAIT_MINUTES }} minutes before retry $retries of ${{ secrets.MAX_TRIES }}."
              sleep $((${{ secrets.WAIT_MINUTES }} * 60))
          else
              echo "##[info] Lock file ${{ env.LOCK_FILE }} check passed - continuing."
              break
          fi

          # Exit loop if at max retries
          if [[ $retries -eq ${{ env.MAX_RETRIES }} ]]; then
            echo "##[error] Reached (${{ secrets.MAX_RETRIES }}) max retries at ${{ secrets.WAIT_MINUTES }} intervals."
            echo "##[error] Lock file ${ env.LOCK_FILE }} presence presists."
            exit 38
          fi
        done

    - name: Set Lock file
      run: |
        git config user.name "CodeApprover"
        git config user.email "pucfada@pm.me"

        echo "${{ env.SHA }}" > "${{ env.LOCK_FILE }}"
        git add "${{ env.LOCK_FILE }}"
        git commit -m "Adding ${{ env.LOCK_FILE }} for ${{ env.SHA }} [skip ci]."

        if ! git push origin HEAD:${{ env.BRANCH_NAME }}; then
        echo "##[[error] Failed to push ${{ env.LOCK_FILE }} for ${{ env.SHA }}"
        exit 39
        fi

        git fetch origin ${{ env.BRANCH_NAME }}
        if [ $? -ne 0 ]; then
        echo "##[[error] Failed to fetch ${{ env.BRANCH_NAME }}"
        exit 40
        fi

        if ! git ls-tree HEAD -- ${{ env.LOCK_FILE }}; then
        echo "##[error] Lock file ${{ env.LOCK_FILE }} was not detected remotely."
        exit 41
        else
        echo "##[info] Lock file ${{ env.LOCK_FILE }} successfully created and pushed."
        fi

    - name: Trigger Next Workflow # 05-codeql-analysis.yml | development 07-versioning.yml
      if: success()
      run: |
        trigger="trigger-codeql-analysis"
        if [ "${{ env.SHA_BRANCH }}" == "code-development" ]; then
            trigger="trigger-versioning"
        fi
        echo "##[info] Calling $trigger"

        BASE="{\"event_type\": \"$trigger\", \"client_payload\": {"
        SHA="\"sha\": \"${{ env.SHA }}\","
        CSPROJ="\"csproj\": \"${{ env.CSPROJ }}\","
        BRANCH="\"branch_name\": \"${{ env.SHA_BRANCH }}\""
        END="}}"

        curl -s -o /dev/null -X POST \
        -H "Authorization: Bearer ${{ secrets.AUTH }}" \
        -H "Accept: application/vnd.github.v3+json" \
        -d "$BASE$SHA$CSPROJ$BRANCH$END" \
        "https://api.github.com/repos/${{ github.repository }}/dispatches"
