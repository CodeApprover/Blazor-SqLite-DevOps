---
name: "Development Tests"

on:
  workflow_run:
    workflows: "Stylecop Linter"
    types:
      - completed

env:
  PROJECT_PATH: "${{ github.workspace }}/$(echo ${{ github.ref }} | grep -oE '[^-]+$')/Blazor-SqlLite-DevOps/"

jobs:

  # DEVELOPMENT ENVIRONMENT - NUnit and Xunit unit tests
  dev-unit-tests:
    name: Dev Unit Tests (${{ matrix.test_framework }})
    runs-on: ubuntu-latest
    environment:
      development
    if: startsWith(github.ref, 'refs/heads/code-development')
    strategy:
      matrix:
        test_framework: ['Nunit', 'Xunit']
    steps:
      - name: Log Timestamp
        run: date

      - name: Checkout repository
        uses: actions/checkout@v3.5.3

      - name: Install dependencies
        run: |
          if [ "${{ matrix.test_framework }}" == "Nunit" ]; then
            envrn="Nunit_Player_Unit_Tests"
          else
            envrn="Xunit_Game_Unit_Tests"
          fi
          command="dotnet restore --no-cache"
          command="${command} \"${{ github.workspace }}/tests/${envrn}/${envrn}.csproj\""
          eval "${command}"
  
      - name: Install dependencies
        run: |
          if [ "${{ matrix.test_framework }}" == "Nunit" ]; then
            envrn="Nunit_Player_Unit_Tests"
          else
            envrn="Xunit_Game_Unit_Tests"
          fi
          dotnet restore --no-cache "${{ github.workspace }}/tests/${envrn}/${envrn}.csproj"
  
      - name: Run Xunit tests
        run: |
          if [ "${{ matrix.test_framework }}" == "Nunit" ]; then
            envrn="Nunit_Player_Unit_Tests"
            log_file_name="nunit-results.trx"
          else
            envrn="Xunit_Game_Unit_Tests"
            log_file_name="xunit-results.trx"
          fi
          command="dotnet test"
          command="${command} --no-restore --verbosity detailed"
          command="${command} --logger \"trx;LogFileName=${log_file_name}\""
          command="${command} \"${{ github.workspace }}/tests/${envrn}/${envrn}.csproj\""
          eval "${command}"
  
      - name: Run Nunit tests
        run: |
          if [ "${{ matrix.test_framework }}" == "Nunit" ]; then
            envrn="Nunit_Player_Unit_Tests"
            log_file_name="nunit-results.trx"
          else
            envrn="Xunit_Game_Unit_Tests"
            log_file_name="xunit-results.trx"
          fi
          command="dotnet test"
          command="${command} --no-restore --verbosity detailed"
          command="${command} --logger "trx;LogFileName=${log_file_name}"
          command="${command} \"${{ github.workspace }}/tests/${envrn}/${envrn}.csproj\""
          eval ${command}
  
  # DEVELOPMENT ENVIRONMENT - Build backUp artifact
  build-dev-artifact:
    name: Dev Build BackUp Artifact
    runs-on: ubuntu-latest
    environment:
      development
    if: startsWith(github.ref, 'refs/heads/code-development')
    needs: dev-unit-tests
    steps:
      - name: Artifact checkout repository
        uses: actions/checkout@v3.5.3
      
      - name: Artifact remove existing .NET Core SDK
        run: sudo rm -rf /usr/share/dotnet

      - name: Artifact setup .NET environment
        uses: actions/setup-dotnet@v3.2.0
        with:
          dotnet-version: '7.0.x'

      - name: Set filepaths
          PROJ_DIR="Blazor SqlLite Golf Club/"
          PROJ_FILE="Blazor SqlLite Golf Club.csproj"
          CSPROJ_PATH="${{ env.PROJECT_PATH }}/${{ PROJ_DIR }}/${{ PROJ_FILE }}" >> $GITHUB_ENV

      - name: Artifact restore dependencies
        run: |
          command="dotnet restore --no-cache"
          command="${command} "${{ env.CSPROJ_PATH }}""
          eval "${command}"

      - name: Build Artifact
        run: |
          command="dotnet build --no-restore --configuration Release"
          command="${command} ${{ env.CSPROJ_PATH }}"
          eval "${command}"

      - name: Publish Artifact
        run: |
          command="dotnet publish --configuration Release"
          command="${command} --no-build --output ./publish"
          command="${command} ${{ env.CSPROJ_PATH }}"
          eval "${command}"

      - name: Archive Artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: staging-artifact
          path: ./publish/*
          if-no-files-found: error # warn/ignore

  # DEVELOPMENT ENVIRONMENT - Delete Development Branch
  delete-development-branch:
    name: Delete Development Branch
    runs-on: ubuntu-latest
    environment:
      development
    if: startsWith(github.ref, 'refs/heads/code-development')
    needs:  build-dev-artifact
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.3
        with:
          fetch-depth: 0

      - name: Configure Git User
        run: |
          git config --local user.email "auto_action@github.com"
          git config --local user.name "Dev branch deletion CI push"

      - name: Delete Development Branch if Exists
        run: |
          if git show-ref --verify --quiet refs/remotes/origin/code-development; then
            git push --delete origin code-development
            echo "code-development branch deleted."
          else
            echo "code-development branch did not exist."
          fi
