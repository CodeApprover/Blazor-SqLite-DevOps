name: Test Success

on:
  repository_dispatch:
    types: trigger-test-success

env:
  DOCKER_REPO: blazor-sqlite-devops

jobs:
  docker-job:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:

    - name: Checkout SHA repository
      uses: actions/checkout@v3.5.3
      with:
        ref: ${{ github.event.client_payload.sha }}
        fetch-depth: 0

    - name: Log in to Docker Hub
      uses: docker/login-action@v2.2.0
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: Check if Docker image already exists
      run: |
        if docker manifest inspect ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_REPO }}:v${{ secrets.VERSION }} > /dev/null; then
          echo "Docker image already exists! Exiting."
          # exit 1 # TODO REMOVE LATER #
        fi

    - name: Check for .lock command
      if: contains(steps.branch-deploy.outputs.command, '.lock')
      run: echo "Deployments are locked! Exiting." && exit 1

    - name: Enable Docker Experimental Features
      run: |
        echo '{ "experimental": true }' | sudo tee /etc/docker/daemon.json
        sudo systemctl restart docker
        docker version

    - name: Extract Branch Name from SHA Commit
      run: |
        branch=$(git branch -r --contains ${{ env.SHA }} | sed -n 's#^ *origin/##p' | head -n 1)
        if [[ -z "$branch" ]]; then
          echo "Failed to extract branch name for SHA: ${{ env.SHA }}"
          exit 1
        fi
        echo "BRANCH_NAME=$branch" >> $GITHUB_ENV

    - name: Set Environment Name
      run: |
        envirn=$(echo "${{ env.BRANCH_NAME }}" | sed 's/^code-//')
        echo "ENV_NAME=$envirn" >> $GITHUB_ENV

    - name: Find and read version from file
      run: |
        VERSION=$(head -n 1 $(find ./${{ env.ENV_NAME }} -name "version"))
        echo "VERSION=$VERSION" >> $GITHUB_ENV
    
    - name: Increment version
      run: |
        PRODUCTION=$(echo "$VERSION" | cut -d'.' -f1)
        STAGING=$(echo "$VERSION" | cut -d'.' -f2)
        DEVELOPMENT=$(echo "$VERSION" | cut -d'.' -f3)
        case "$ENV_NAME" in
          "production")
            PRODUCTION=$((PRODUCTION + 1))
            ;;
          "staging")
            STAGING=$((STAGING + 1))
            PATCH=0
            ;;
          "development")
            DEVELOPMENT=$((DEVELOPMENT + 1))
            ;;
        esac
        echo "NEW_VERSION=$MAJOR.$MINOR.$PATCH" >> $GITHUB_ENV
        echo "${NEW_VERSION}" > $(find ./${{ env.ENV_NAME }} -name "version")

    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_REPO }}:v${{ env.NEW_VERSION }} -f "./${{ env.DOCKER_REPO }}/Dockerfile" "./${{ env.DOCKER_REPO }}"
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_REPO }}:v${{ env.NEW_VERSION }}"

  deploy-job:

    needs: docker-job
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:

      - uses: github/branch-deploy@v7.2.0
        id: branch-deploy
        with:
          trigger: ".deploy"

      - name: Checkout SHA repository
        uses: actions/checkout@v3.5.3
        with:
          ref: ${{ github.event.client_payload.sha }}
          fetch-depth: 0

      - name: Determine Deploy Branch and Directory
        run: |
          branch=$(git branch -r --contains ${{ github.event.client_payload.sha }} | sed -n 's#^ *origin/##p' | head -n 1)
          deploy_branch="Invalid"
          deploy_dir="."
          case "${branch}" in
            "code-development")
              deploy_branch="code-staging"
              deploy_dir="./code-development-in"
              ;;
            "code-staging")
              deploy_branch="code-production"
              deploy_dir="./code-production-in"
              ;;
            "code-production")
              deploy_branch="main"
              deploy_dir="."
              ;;
          esac
          [[ "$deploy_branch" == "Invalid" ]] && echo "Invalid deployment branch $deploy_branch." && exit 1
          echo "DEPLOY_BRANCH=$deploy_branch" >> $GITHUB_ENV
          echo "DEPLOY_DIR=$deploy_dir" >> $GITHUB_ENV
          echo "BRANCH_NAME=$branch" >> $GITHUB_ENV

      - name: Deploy
        if: steps.branch-deploy.outputs.continue == 'true'
        uses: nicholasgriffintn/github-branch-deployment-action@0.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.AUTH }}
          BRANCH: ${{ env.DEPLOY_BRANCH }}
          FOLDER: ${{ env.DEPLOY_DIR }}
          MESSAGE: 'Deploy: ({sha}) {msg}'

      - name: Notification
        if: steps.branch-deploy.outputs.continue == 'true'
        run: echo "Deployed ${{ github.event.client_payload.sha }} from ${{ env.BRANCH_NAME }} to ${{ env.DEPLOY_BRANCH }}"
