name: Test Success

on:
  repository_dispatch:
    types: trigger-test-success

env:
  DOCKER_REPO: blazor-sqlite-devops
  IS_LOCKED: false

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - uses: github/branch-deploy@v7.2.0
      id: branch-deploy
      with:
        trigger: ".deploy"
    
    - name: Get SHA of Commit
      run: echo "SHA=$(echo '${{ github.event.client_payload.sha }}')" >> $GITHUB_ENV

    - name: Checkout SHA repository
      uses: actions/checkout@v3.5.3
      with:
        ref: ${{ env.SHA }}
        fetch-depth: 0 # Fetch all

    - name: Extract Branch Name from SHA Commit
      run: |
        branch=$(git branch -r --contains ${{ env.SHA }} | sed -n 's#^ *origin/##p' | head -n 1)
        if [[ -z "$branch" ]]; then
          echo "Failed to extract branch name for SHA: ${{ env.SHA }}"
          exit 1
        fi
        echo "BRANCH_NAME=$branch" >> $GITHUB_ENV

    - name: Set Environment Name
      run: |
        envirn=$(echo "${{ env.BRANCH_NAME }}" | sed 's/^code-//')
        echo "ENV_NAME=$envirn" >> $GITHUB_ENV

    - name: Check for .lock command
      if: contains(steps.branch-deploy.outputs.command, '.lock')
      run: echo "Deployments are locked! Exiting." && exit 1

    - name: Increment version
      run: |
        declare -a VERSION=( $MAJOR $MINOR $PATCH )
        case "${{ env.ENV_NAME }}" in
          "development") ((VERSION[2]++)) ;;
          "staging") ((VERSION[1]++)) ;;
          "production") ((VERSION[0]++)) ;;
        esac
        PRODUCTION=${VERSION[0]}
        STAGING=${VERSION[1]}
        DEVELOPMENT=${VERSION[2]}
        echo "NEW_VERSION=${PRODUCTION}.${STAGING}.${DEVELOPMENT}" >> $GITHUB_ENV

    - name: Log in to Docker Hub
      uses: docker/login-action@v2.2.0
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_REPO }}:v${{ env.NEW_VERSION }} -f "./${{ env.PROJ_NAME }}/Dockerfile" "./${{ env.PROJ_NAME }}"
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_REPO }}:v${{ env.NEW_VERSION }}
        echo "Published ${{ env.SHA }} from ${{ env.BRANCH_NAME }} for the ${{ env.ENV_NAME }} environment to Dockerhub"

    - name: Set new version secret
      uses: hmanzur/actions-set-secret@v2.0.0
      with:
        name: 'VERSION'
        value: ${{ env.NEW_VERSION }}
        repository: ${{ github.repository }}
        token: ${{ secrets.AUTH }}

    - name: Deploy
      if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
      run: echo "Deployed ${{ env.SHA }} from ${{ env.BRANCH_NAME }} to ${{ env.ENV_NAME }}"
