---
name: Lock File Check

on:
  repository_dispatch:
    types: trigger-check-lock-file

env:
  PROJ_NAME: "Blazor-SqLite-Golf-Club"
  MAX_RETRIES: 6
  SLEEP_DURATION: 1200  # 20 minutes in seconds

jobs:
  check-for-lock-file:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      # Report the SHA
      - name: Report SHA
        run: echo "${{ github.event.client_payload.sha }}"
    
      # Checkout the repository at the given SHA
      - name: Checkout SHA repository
        uses: actions/checkout@v3.5.3
        with:
          ref: ${{ github.event.client_payload.sha }}
          fetch-depth: 0

      # Configure git user details
      - name: Configure git user
        run: |
          git config user.name "CodeApprover"
          git config user.email "pucfada@pm.me"

      # Determine the branch and corresponding lock file name
      - name: Set branch and lock file name
        run: |
          branch=$(git branch -r --contains ${{ github.event.client_payload.sha }} | grep 'origin/' | sed 's#origin/##' | head -n 1 | xargs)
          echo "Detected branch: $branch"
          
          if [[ -z "${branch}" ]]; then
            echo "::error::Failed to extract branch name for SHA: ${{ github.event.client_payload.sha }}"
            exit 1 
          fi

          echo "BRANCH_NAME=${branch}" >> $GITHUB_ENV
          case "${branch}" in
              "code-production") echo "LOCK_FILE=.production.lock" >> $GITHUB_ENV ;;
              "code-staging") echo "LOCK_FILE=.staging.lock" >> $GITHUB_ENV ;;
              "code-development") echo "LOCK_FILE=.development.lock" >> $GITHUB_ENV ;;
              "main") echo "LOCK_FILE=.main.lock" >> $GITHUB_ENV ;;
              *) 
                  echo "::error::Unknown branch: $branch."
                  exit 1
                  ;;
          esac

      # Check for the presence of the lock file and retry if found
      - name: Check for lock file with retry
        run: |
          for (( i=1; i<=$MAX_RETRIES; i++ )); do
            # ... [rest of the logic remains the same]
            
            if [[ "$lock_found" -eq 1 ]]; then
              echo "Lock file found in a commit prior to the payload SHA. Waiting 20 minutes before retrying. Attempt $i of $MAX_RETRIES."
              cat "${{ env.LOCK_FILE }}" | xargs echo "WAIT: The SHA blocking the processing is"
              sleep $SLEEP_DURATION
            else
              break
            fi
          done

          # ... [rest of the logic remains the same]

      # Trigger the next workflow if this one succeeds
      - name: Trigger Versioning Workflow
        if: success()
        run: |
          # ... [rest of the logic remains the same]
