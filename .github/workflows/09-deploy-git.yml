---
name: "Deploy Git"

# Deploy changes from the source environment to the target environment
# Then trigger the successful deployment workflow based on the branch.

# 1 -  Checkout SHA repository.
# 2 -  Check and Remove Lock File for Payload SHA.
# 3 -  Set Next Deployment Environment: Determines the target deployment environment based on the source branch.
# 4 -  Set required source directory.
# 5 -  Archive development directory.
# 6 -  Checkout target branch.
# 7 -  Download archived development directory.
# 8 -  Synchronize target dir with source dir.
# 9 -  Commit changes and push to target branch.
# 10 - Trigger appropriate 'successful deployment' workflow.

# Exit Codes
# 45 - Lock file with correct SHA not found on branch.
# 46 - Source directory does not exist or is empty.

on:
  repository_dispatch:
    types: trigger-deploy-git

env:
  SHA: ${{ github.event.client_payload.sha }}
  SHA_BRANCH: ${{ github.event.client_payload.sha_branch }}
  CSPROJ: ${{ github.event.client_payload.csproj }}

jobs:
  deploy-to-environment:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    #if: (github.actor != 'CodeApprover')

    steps:

    - name: Checkout SHA repository
      uses: actions/checkout@v3.5.3
      with:
        ref: ${{ env.SHA }}
        fetch-depth: 0

    - name: Check and Remove Lock File for Payload SHA
      run: |
        declare -A branch_lock_map
        branch_lock_map["code-production"]=".production.lock"
        branch_lock_map["code-staging"]=".staging.lock"
        branch_lock_map["code-development"]=".development.lock"
        branch_lock_map["main"]=".main.lock"
        lock_file=${branch_lock_map[${{ env.SHA_BRANCH }}]}
        echo "##[info] Lock file set as $lock_file"
        
        git fetch origin ${{ env.SHA_BRANCH }}
        git checkout ${{ env.SHA_BRANCH }}

        git config user.name "CodeApprover"
        git config user.email "pucfada@pm.me"

        if [[ $(cat "$lock_file") == "${{ env.SHA }}" ]]; then
          echo "Lock file with SHA ${{ env.SHA }} found on branch ${{ env.SHA_BRANCH }}"
          git rm "$lock_file"
          git commit -m "Removed lock file to deploy SHA ${{ env.SHA }} [skip ci]"
          git push origin "${{ env.SHA_BRANCH }}"
        else
          echo "##[error] Lock file with SHA ${{ env.SHA }} not found on branch ${{ env.SHA_BRANCH }} --> Exit 45"
          exit 45
        fi

    - name: Set Next Deployment Environment
      run: |
        deploy_branch="Invalid"
        directory="Invalid"
        
        case "${{ env.SHA_BRANCH }}" in
          "code-development")
            deploy_branch="code-staging"
            directory="development"
            ;;
          "code-staging")
            deploy_branch="code-production"
            directory="staging"
            ;;
          "code-production")
            echo "No deployment required for code-production."
            exit 0
            ;;
        esac
        echo "DEPLOY_BRANCH=$deploy_branch" >> $GITHUB_ENV
        echo "DIRECTORY=$directory" >> $GITHUB_ENV

    - name: Set required source directory # development | staging | produciotn
      run: |
        src_dir=${{ env.SHA_BRANCH }}
        src_dir=${src_dir#code-}
        dir_path=$(find ${{ github.workspace }} -type d -name "$src_dir" -print | head -n 1)
        if [[ ! -d "$dir_path" ]] || [[ ! $(ls -A "$dir_path") ]]; then
          echo "##[error] Source directory does not exist or is empty --> Exit 46"
          exit 46
        fi
        echo "SOURCE_DIR=$dir_path" >> $GITHUB_ENV

    - name: Archive development directory
      uses: actions/upload-artifact@v3.1.2
      with:
        name: development-archive
        path: ${{ env.SOURCE_DIR }}

    - name: Checkout target branch
      run: |
        git fetch
        git checkout ${{ env.DEPLOY_BRANCH }}

    - name: Download archived development directory
      uses: actions/download-artifact@v3
      with:
        name: development-archive
        path: /tmp/temp-dir

    - name: Synchronize target dir with source dir
      run: |
        echo "Synchronizing target dir with source dir using rsync:"
        rsync -av --delete --checksum /tmp/temp-dir/ ${{ github.workspace }}/${{ env.DIRECTORY }}/

    - name: Commit changes and push to target branch 
      run: |
        git config user.name "CodeApprover"
        git config user.email "pucfada@pm.me"
        git add -A
        git commit -m "Migrating changes from ${{ env.BRANCH_NAME }} to ${{ env.DEPLOY_BRANCH }} [skip ci]"
        git push origin ${{ env.DEPLOY_BRANCH }}

    - name: Trigger Next Workflow # 10-development-success.yml | 10-staging-success.yml | 10-production-success.yml
      if: success()
      run: |
        case "${{ env.SHA_BRANCH }}" in
          code-development) trigger="trigger-development-success" ;;
          code-staging) trigger="trigger-staging-success" ;;
          code-production) trigger="trigger-production-success" ;;
        esac
        echo "##[info] Calling $trigger"

        BASE="{\"event_type\": \"$trigger\", \"client_payload\": {"
        SHA="\"sha\": \"${{ env.SHA }}\","
        CSPROJ="\"csproj\": \"${{ env.CSPROJ }}\","
        BRANCH="\"sha_branch\": \"${{ env.SHA_BRANCH }}\""
        END="}}"

        curl -s -o /dev/null -X POST \
        -H "Authorization: Bearer ${{ secrets.AUTH }}" \
        -H "Accept: application/vnd.github.v3+json" \
        -d "$BASE$SHA$CSPROJ$BRANCH$END" \
        "https://api.github.com/repos/${{ github.repository }}/dispatches"
