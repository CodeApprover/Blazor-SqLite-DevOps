---
name: "Deploy Git"

on:
  repository_dispatch:
    types: trigger-deploy-git

env:
  SHA: ${{ github.event.client_payload.sha }}
  SHA_BRANCH: ${{ github.event.client_payload.sha_branch }}
  CSPROJ: ${{ github.event.client_payload.csproj }}

jobs:
  deploy-to-environment:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    #if: (github.actor != 'CodeApprover')

    steps:

    - name: Report SHA and Workflow Timestamp
      run: |
        echo "${{ github.event.client_payload.sha }}"
        date
    
    - name: Extract SHA for Checkout
      run: echo "SHA=$(echo '${{ github.event.client_payload.sha }}')" >> $GITHUB_ENV

    - name: Checkout SHA repository
      uses: actions/checkout@v3.5.3
      with:
        ref: ${{ env.SHA }}
        fetch-depth: 0

    - name: Extract Branch Name from SHA Commit
      run: |
        branch=$(git branch -r --contains ${{ env.SHA }} | grep 'origin/' | sed 's#origin/##' | head -n 1 | xargs)
        echo "BRANCH_NAME=${branch}" >> $GITHUB_ENV

    - name: Check and Remove Lock File with Specific SHA
      run: |
        trap 'echo "Error on line $LINENO: $BASH_COMMAND"; exit 1' ERR
        declare -A branch_lock_map
        branch_lock_map["code-production"]=".production.lock"
        branch_lock_map["code-staging"]=".staging.lock"
        branch_lock_map["code-development"]=".development.lock"
        branch_lock_map["main"]=".main.lock"
        echo "##[debug] Branch is ${{ env.BRANCH_NAME }}"
        lock_file=${branch_lock_map[${{ env.BRANCH_NAME }}]}
        echo "##[debug] lock_file is $lock_file"
        git config user.name "CodeApprover"
        git config user.email "pucfada@pm.me"
        # Force branch refresh
        git fetch origin ${{ env.BRANCH_NAME }}
        git checkout ${{ env.BRANCH_NAME }}
        
        # Check if the lock file contains the specific SHA
        if [[ $(cat "$lock_file") == "${{ github.event.client_payload.sha }}" ]]; then
          echo "Lock file with SHA ${{ github.event.client_payload.sha }} found on branch ${{ env.BRANCH_NAME }}"
          git rm "$lock_file"
          git commit -m "Removed lock after versioning [skip ci]"
          git push origin "${{ env.BRANCH_NAME }}"
        else
          echo "Lock file with SHA ${{ github.event.client_payload.sha }} not found on branch ${{ env.BRANCH_NAME }}. Exiting."
          exit 1
        fi

    - name: Determine Deploy Branch and Directories
      run: |
        deploy_branch="Invalid"
        directory="Invalid"
        
        case "${{ env.BRANCH_NAME }}" in
          "code-development")
            deploy_branch="code-staging"
            directory="development"
            ;;
          "code-staging")
            deploy_branch="code-production"
            directory="staging"
            ;;
          "code-production")
            echo "No deployment required for code-production."
            exit 0
            ;;
        esac
        
        if [[ "$deploy_branch" == "Invalid" ]]; then
          echo "Error: Invalid deployment branch determined."
          exit 1
        fi
        
        echo "DEPLOY_BRANCH=$deploy_branch" >> $GITHUB_ENV
        echo "DIRECTORY=$directory" >> $GITHUB_ENV

    - name: Locate required source directory
      run: |
        branch_suffix=${BRANCH_NAME#code-}
        dir_path=$(find $GITHUB_WORKSPACE -type d -name "$branch_suffix" -print | head -n 1)
        echo "SOURCE_DIR=$dir_path" >> $GITHUB_ENV

    - name: Archive development directory
      uses: actions/upload-artifact@v3.1.2
      with:
        name: development-archive
        path: ${{ env.SOURCE_DIR }}

    - name: Checkout target branch
      run: |
        git fetch
        git checkout ${{ env.DEPLOY_BRANCH }}

    - name: Download archived development directory
      uses: actions/download-artifact@v3
      with:
        name: development-archive
        path: /tmp/temp-dir

    - name: Synchronize target dir with source dir
      run: |
        echo "Synchronizing target dir with source dir using rsync:"
        rsync -av --delete --checksum /tmp/temp-dir/ $GITHUB_WORKSPACE/${{ env.DIRECTORY }}/

    - name: Commit changes and push to target branch 
      run: |
        git config user.name "CodeApprover"
        git config user.email "pucfada@pm.me"
        git add -A
        git commit -m "Migrating changes from ${{ env.BRANCH_NAME }} to ${{ env.DEPLOY_BRANCH }} [skip ci]"
        git push origin ${{ env.DEPLOY_BRANCH }}

    - name: Trigger Next Workflow # 10-development-success.yml | 10-staging-success.yml | 10-production-success.yml
      if: success()
      run: |
        case "${{ env.SHA_BRANCH }}" in
          code-development) trigger="trigger-development-success" ;;
          code-staging) trigger="trigger-staging-success" ;;
          code-production) trigger="trigger-production-success" ;;
        esac
        echo "##[info] Calling $trigger"

        BASE="{\"event_type\": \"$trigger\", \"client_payload\": {"
        SHA="\"sha\": \"${{ env.SHA }}\","
        CSPROJ="\"csproj\": \"${{ env.CSPROJ }}\","
        BRANCH="\"branch_name\": \"${{ env.SHA_BRANCH }}\""
        END="}}"

        curl -s -o /dev/null -X POST \
        -H "Authorization: Bearer ${{ secrets.AUTH }}" \
        -H "Accept: application/vnd.github.v3+json" \
        -d "$BASE$SHA$CSPROJ$BRANCH$END" \
        "https://api.github.com/repos/${{ github.repository }}/dispatches"

