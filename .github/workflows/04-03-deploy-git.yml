---
name: Deploy Git

on:
  repository_dispatch:
    types: Deploy Git

env:
  SHA: ${{ github.event.client_payload.sha }}
  SHA_BRANCH: ${{ github.event.client_payload.sha_branch }}
  CSPROJ: ${{ github.event.client_payload.csproj }}
  NEXT_WORKFLOW: Deployment Success

jobs:
  deploy-git-branches:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout SHA Repository
        uses: actions/checkout@v3.6.0
        with:
          ref: ${{ env.SHA }}
          fetch-depth: 0

      - name: Configure Git User
        run: |
 
          git config user.name "${{ github.repository_owner}}"
          git config user.email "${{ vars.EMAIL }}"
          if [ $? -ne 0 ]; then
            echo "##[error] Failed to configure Git user." && exit 40
          fi
          echo "##[debug] Git user configured successfully."

      - name: Unlock SHA Gist
        run: |
   
          # Update Gist to have no content, to unset lock
          echo "##[debug][gist] Clearing the SHA Gist of the current SHA."
          gist_id="${{ vars.SHA_GIST }}"
   
          CURL_CMD=$(echo "curl -L \
            -X PATCH \
            -H \"Accept: application/vnd.github+json\" \
            -H \"Authorization: token ${{ secrets.AUTH }}\" \
            -H \"X-GitHub-Api-Version: 2022-11-28\" \
            https://api.github.com/gists/$gist_id \
            -d '{\"files\": {\"auth-gate.sha\": {\"content\": \"\"}}}'")

          eval "$CURL_CMD"
          if [[ $? -ne 0 ]]; then
            echo "##[error][gist] Failed to update Gist with blank content."
            exit 32
          else
            # Check SHA GIST for content
            content=$(curl -L \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: token ${{ secrets.AUTH }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/gists/$gist_id | jq '.files["auth-gate.sha"].content' -r)
  
            if [ "$content" == "" ]; then
              echo "##[debug][gist] Gist updated successfully. Lock unset."
              break
            else
              echo "##[error][gist] Gist has unexpected content. Attempt $((retries+1))."
            fi
          fi

      - name: Set Deployment Branches and Directories
        run: |
 
          deploy_branches=()
          directory=""

          case "${{ env.SHA_BRANCH }}" in
            "code-development")
              deploy_branches=("code-staging" "code-production")
              directory="development"
              ;;
            "code-staging")
              deploy_branches=("code-development" "code-production")
              directory="staging"
              ;;
            "code-production")
              deploy_branches=("code-development" "code-staging")
              directory="production"
              ;;
             "main")
              deploy_branches=("code-development" "code-staging" "code-production")
              directory="production"
              ;;
          esac

          echo "deploy_branches=${deploy_branches[@]}" >> $GITHUB_ENV
          echo "DIRECTORY=$directory" >> $GITHUB_ENV

      - name: Reset all branches to mirror main if push is to main
        run: |
 
          if [[ "${{ env.SHA_BRANCH }}" == "main" ]]; then
              for target_branch in code-development code-staging code-production; do
                  git fetch origin
                  git checkout $target_branch
                  git reset --hard ${{ env.SHA }}
                  git push origin $target_branch --force
              done
          fi

      - name: Set and Copy Source Directory to Temp Dir
        run: |
 
          src_dir=${{ env.SHA_BRANCH }}
          src_dir=${src_dir#code-}
          dir_path=$(find ${{ github.workspace }} -type d -name "$src_dir" -print | head -n 1)

          if [[ ! -d "$dir_path" ]] || [[ ! $(ls -A "$dir_path") ]]; then
            echo "##[error] Source directory does not exist or is empty" && exit 44
          fi

          rsync -av --delete --exclude=.git/ $dir_path/ /tmp/temp-dir/

      - name: Deploy to Target Branches
        run: |
 
          if [[ "${{ env.SHA_BRANCH }}" != "main" ]]; then
              echo "##[info] Deploying commit ${{ env.SHA }} to target branches."
              latest_tag=$(git tag -l 'v*' | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1) # v1.2.3 SemVer
              TAG_MESSAGE=$(git tag -l --format='%(contents)' $latest_tag)
              echo "##[info] Latest Tag = $TAG_MESSAGE"

              for target_branch in code-development code-staging code-production; do
                  [[ $target_branch == "${{ env.SHA_BRANCH }}" ]] && continue

                  git fetch origin
                  git checkout $target_branch
                  rsync -av --delete --exclude=.git/ /tmp/temp-dir/ ${{ github.workspace }}/${{ env.DIRECTORY }}/

                  if git add -A; then
                      COMMIT_MSG="Migrating changes from ${{ env.SHA_BRANCH }} to $target_branch based on tag $latest_tag: $TAG_MESSAGE [skip ci]"
                      echo "##[debug] $COMMIT_MSG"
                      git commit -m "$COMMIT_MSG"
                      git push origin $target_branch
                  else
                      echo "##[error] No changes detected. Skipping commit for $target_branch [skip ci]"
                  fi
              done
          fi

      - name: Trigger Next Workflow
        if: success()
        run: |
 
          CMD=$(echo "curl -L -X POST" \
            "-H \"Accept: application/vnd.github+json\"" \
            "-H \"Authorization: Bearer ${{ secrets.AUTH }}\"" \
            "-H \"X-GitHub-Api-Version: 2022-11-28\"" \
            "https://api.github.com/repos/${{ github.repository }}/dispatches" \
            "-d '{\"event_type\":\"${{ env.NEXT_WORKFLOW }}\"," \
            "\"client_payload\":{" \
            "\"sha\":\"${{ env.SHA }}\"," \
            "\"sha_branch\":\"${{ env.SHA_BRANCH }}\"," \
            "\"csproj\":\"${{ env.CSPROJ }}\"}'")

          retries=0
          while [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; do
              eval "$CMD"
              CURL_EXIT_CODE=$?
              if [[ $CURL_EXIT_CODE -ne 0 ]]; then
                  echo "##[error] Curl command failed on attempt $((retries+1)) with exit code $CURL_EXIT_CODE"
                  retries=$((retries+1))
                  if [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; then
                      echo "##[warn] Retrying in ${{ vars.WAIT_SECONDS }} seconds..."
                      sleep ${{ vars.WAIT_SECONDS }}
                  else
                      echo "##[error] Exhausted ${{ vars.MAX_RETRIES }} retries at ${{ vars.WAIT_SECONDS }} intervals."
                      echo "##[error] Failed to trigger ${{ env.NEXT_WORKFLOW }} workflow with CURL command: $CMD." && exit 90
                  fi
              else
                  break # successful curl
              fi
          done
          echo "##[debug] CURL command: $CMD"
