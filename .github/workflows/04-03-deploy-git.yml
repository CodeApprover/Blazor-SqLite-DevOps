---
name: Deploy Git

# This workflow deploys changes from a source environment to target environments.
# Following the deployment, it triggers a success workflow based on the branch.

# Key processes include checking out the SHA repository, verifying and removing lock files, 
# determining deployment environments, copying source files and deploying to target branches.

# This workflow will:

# Check out the repo at the payload SHA.
# Identify and check for an expected lock file for the source branch.
# Identify target branches and source directory based on source branch.
# Copy source directory contents to a temp directory.
# For each target branch sync source content.
# For each target branch commit and push and mark deployment status as "success".
# Remove the lock file and push this change [skip ci].

# Exit Codes
# 44 - Another instance still running despite retries.
# 45 - Lock file with correct SHA not found on branch.
# 46 - Source directory does not exist or is empty.

on:
  repository_dispatch:
    types: Deploy Git

env:
  SHA: ${{ github.event.client_payload.sha }}
  CSPROJ: ${{ github.event.client_payload.csproj }}
  GH_TOKEN: ${{ secrets.AUTH }}
  NEXT_WORKFLOW: Success

jobs:

  deploy-to-environment:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    # un-comment to block execution
    #if: (github.actor != ${{ github.repository_owner }})

    steps:

    - name: Checkout SHA Repository
      uses: actions/checkout@v3.6.0
      with:
        ref: ${{ env.sha }}
        fetch-depth: 0

    - name: Configure Git User
      run: |
      
        git config user.name "${{ github.repository_owner}}"
        git config user.email "${{ vars.EMAIL }}"

    - name: Check for Expected Payload SHA Lock File
      run: |
      
        branch=$(git branch --contains ${{ env.SHA }})
        echo "SHA_BRANCH=$branch" >> $GITHUB_ENV       
        declare -A branch_lock_map
        branch_lock_map["code-production"]=".production.lock"
        branch_lock_map["code-staging"]=".staging.lock"
        branch_lock_map["code-development"]=".development.lock"
        branch_lock_map["main"]=".main.lock"
        lock_file=${branch_lock_map[${{ env.sha_branch }}]}
        echo "##[info] Lock file set as $lock_file"

        if [[ ! -f "$lock_file" ]] || [[ $(cat "$lock_file") != "${{ env.sha }}" ]]; then
          echo "##[error] Expected lock file for SHA ${{ env.sha }} not found or doesn't exist" && exit 45
        fi

    - name: Set Deployment Environments
      run: |
      
        deploy_branches=()
        directory=""
        
        case "${{ env.sha_branch }}" in
          "code-development")
            deploy_branches=("code-staging" "code-production")
            directory="development"
            ;;
          "code-staging")
            deploy_branches=("code-development" "code-production")
            directory="staging"
            ;;
          "code-production")
            deploy_branches=("code-development" "code-staging")
            directory="production"
            ;;
           "main")
            echo "##[info] No deployment required for ${{ env.sha_branch }}"
            ;;
        esac

        echo "deploy_branches=${deploy_branches[@]}" >> $GITHUB_ENV
        echo "directory=$directory" >> $GITHUB_ENV

    - name: Set and Copy Source Directory to Temp Dir
      run: |
      
        src_dir=${{ env.sha_branch }}
        src_dir=${src_dir#code-}
        dir_path=$(find ${{ github.workspace }} -type d -name "$src_dir" -print | head -n 1)

        if [[ ! -d "$dir_path" ]] || [[ ! $(ls -A "$dir_path") ]]; then
          echo "##[error] Source directory does not exist or is empty --> Exit 46"
          exit 46
        fi

        rsync -av --delete $dir_path/ /tmp/temp-dir/

    - name: Deploy to Target Branches
      run: |
      
        echo "##[info] Deploying commit ${{ env.SHA }} to target branches."
        latest_tag=$(git tag -l 'v*' | sort -V | tail -n1)
        TAG_MESSAGE=$(git tag -l --format='%(contents)' $latest_tag)
        echo "##[info] Latest Tag = $TAG_MESSAGE"

        for target_branch in code-development code-staging code-production; do
          [[ $target_branch == "${{ env.SHA_BRANCH }}" ]] && continue
          
          git fetch
          git checkout $target_branch

          echo "##[info] Populating target directory${{ env.DIRECTORY }} on $target_branch branch to mirror ${{ env.SHA_BRANCH }}"
          rsync -av --delete /tmp/temp-dir/ ${{ github.workspace }}/${{ env.DIRECTORY }}/

          echo "##[info] Committing and pushing changes to target branch $target_branch"
          git add -A
          if ! git diff --quiet; then
              COMMIT_MSG="Migrating changes from ${{ env.SHA_BRANCH }} to $target_branch based on tag $latest_tag: $TAG_MESSAGE [skip ci]"
              echo "##[debug] $COMMIT_MSG"
              git add -A
              git commit -m "$COMMIT_MSG"
              git push origin $target_branch
          else
              echo "##[warn] No changes detected. Skipping commit for $target_branch [skip ci]"
              if git diff --staged --quiet; then
          fi  

          echo "##[info] Updating Deployment Status to Success for commit SHA ${{ env.SHA }}"
          CMD="curl -X POST -H \"Authorization: Bearer ${{ secrets.AUTH }}\" -H \"Accept: application/vnd.github.v3+json\" "
          CMD+="https://api.github.com/repos/${{ github.repository }}/statuses/${{ env.SHA }} "
          CMD+="-d '{\"state\": \"success\", \"description\": \"Deploying SHA ${{ env.SHA }} from ${{ env.SHA_BRANCH }} to $target_branch based on tag $latest_tag. "
          CMD+="New code in ${{ env.DIRECTORY }} directory on both branches.\", \"context\": \"deployment\"}'"
          echo "##[info] Command: $CMD"

          RESPONSE=$(eval "${CMD}")
          echo "##[info] API Response: $RESPONSE"

          desc="Deploying SHA ${{ env.SHA }} from ${{ env.SHA_BRANCH }} to $target_branch based on tag $latest_tag. "
          desc+="New code in ${{ env.DIRECTORY }} directory on both branches."
          
          CMD="gh api --method POST -H \"Accept: application/vnd.github+json\" -H \"X-GitHub-Api-Version: 2022-11-28\" "
          CMD+="/repos/\${{ github.repository }}/deployments -f ref='${{ env.SHA_BRANCH }}' -f payload='{ \"deploy\": \"migrate\" }' "
          CMD+="-f description='${desc}'"
          eval "${CMD}"
        done

    - name: Remove Lock File
      run: |
      
        git fetch origin ${{ env.SHA_BRANCH }}
        git checkout ${{ env.SHA_BRANCH }}

        echo "##[debug] Resetting config for new branch"
        git config user.name "CodeApprover"
        git config user.email "pucfada@pm.me"

        msg="Removed lock file to deploy SHA ${{ env.SHA }} [skip ci]"
        echo "##[debug] Commit Message: $msg"

        git rm "$lock_file"
        git commit -m "$msg"
        git push origin "${{ env.SHA_BRANCH }}"

    - name: Trigger Next Workflow
      if: success()
      run: |
      
        CMD=$(echo "curl -L -X POST" \
        "-H \"Accept: application/vnd.github+json\"" \
        "-H \"Authorization: Bearer ${{ secrets.AUTH }}\"" \
        "-H \"X-GitHub-Api-Version: 2022-11-28\"" \
        "https://api.github.com/repos/${{ github.repository }}/dispatches" \
        "-d '{\"event_type\":\"$trigger\"," \
        "\"client_payload\":{" \
        "\"sha\":\"${{ env.SHA }}\"," \
        "\"csproj\":\"${{ env.CSPROJ }}\"}'")

        retries=0
        while [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; do
            eval "$CMD"
            CURL_EXIT_CODE=$?
            if [[ $CURL_EXIT_CODE -ne 0 ]]; then
                echo "##[error] Curl command failed on attempt $((retries+1)) with exit code $CURL_EXIT_CODE"
                retries=$((retries+1))
                if [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; then
                    echo "##[warn] Retrying in ${{ vars.WAIT_SECONDS }} seconds..."
                    sleep ${{ vars.WAIT_SECONDS }}
                else
                    echo "##[error] Exhausted ${{ vars.MAX_RETRIES }} retries at ${{ vars.WAIT_SECONDS }} intervals."
                    echo "##[error] Failed to trigger ${{ env.NEXT_WORKFLOW }} workflow with CURL command: $CMD." && exit 90
                fi
            else
                break # successful curl
            fi    
        done
        echo "##[debug] CURL command: $CMD"
