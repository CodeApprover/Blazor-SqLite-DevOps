######################################
# Workflow: Deploy Git

# Description:
# The Deploy Git workflow handles deploying changes to various Git branches based on where the initial push was made.
# If the push was made to the `main` branch, it forces all other branches to mirror `main`.
# If the push was made to another branch (e.g., `code-development`), it migrates changes to other target branches.
# After successfully deploying to Git, it triggers the next specified workflow.

# Trigger:
# The workflow is initiated when the `Deploy Git` event is received.

# Exit Codes:
# 32 - Failure to update Gist with blank content.
# 40 - Failed to configure Git user.
# 44 - Source directory does not exist or is empty.
# 90 - Failure to trigger the next workflow after all retry attempts.

######################################

---
name: Deploy Git

on:
  repository_dispatch:
    types: Deploy Git

env:
  SHA: ${{ github.event.client_payload.sha }}
  SHA_BRANCH: ${{ github.event.client_payload.sha_branch }}
  CSPROJ: ${{ github.event.client_payload.csproj }}
  NEXT_WORKFLOW: Deployment Success

jobs:
  deploy-git-branches:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    
    # Step 1: Checkout the repository using the specified SHA.
    - name: Checkout SHA Repository
      uses: actions/checkout@v3.6.0
      with:
        ref: ${{ env.SHA }}
        fetch-depth: 0

    # Step 2: Configure the Git user.
    - name: Configure Git User
      run: |
        git config user.name "${{ github.repository_owner}}"
        git config user.email "${{ vars.EMAIL }}"
        echo "##[debug] Git user configured."

    # Step 3: Unlock SHA Gist.
    # This step resets the Gist that locks the SHA, preparing for the next deployment.
    - name: Unlock SHA Gist
      run: |
        gist_id="${{ vars.SHA_GIST }}"
        CURL_CMD=$(echo "curl -L \
          -X PATCH \
          -H \"Accept: application/vnd.github+json\" \
          -H \"Authorization: token ${{ secrets.AUTH }}\" \
          https://api.github.com/gists/$gist_id \
          -d '{\"files\": {\"auth-gate.sha\": {\"content\": \"\"}}}'")
        eval "$CURL_CMD"

    # Step 4: Determine which branches and directories to deploy to.
    - name: Set Deployment Branches and Directories
      run: |
        case "${{ env.SHA_BRANCH }}" in
          "code-development")
            deploy_branches=("code-staging" "code-production")
            directory="development"
            ;;
          "code-staging")
            deploy_branches=("code-development" "code-production")
            directory="staging"
            ;;
          "code-production")
            deploy_branches=("code-development" "code-staging")
            directory="production"
            ;;
          "main")
            deploy_branches=("code-development" "code-staging" "code-production")
            directory="production"
            ;;
        esac
        echo "deploy_branches=${deploy_branches[@]}" >> $GITHUB_ENV
        echo "DIRECTORY=$directory" >> $GITHUB_ENV

    # Step 5: Reset all branches to mirror `main` if the push is to the `main` branch.
    - name: Reset all branches to mirror main if push is to main
      run: |
        for target_branch in code-development code-staging code-production; do
            git fetch origin
            git checkout $target_branch
            git reset --hard ${{ env.SHA }}
            git push origin $target_branch --force
        done

    # Step 6: Set the source directory and copy its contents to a temporary directory.
    - name: Set and Copy Source Directory to Temp Dir
      run: |
        src_dir=${{ env.SHA_BRANCH }}
        src_dir=${src_dir#code-}
        dir_path=$(find ${{ github.workspace }} -type d -name "$src_dir")
        rsync -av --delete --exclude=.git/ $dir_path/ /tmp/temp-dir/

    # Step 7: Deploy the changes to target branches.
    - name: Deploy to Target Branches
      run: |
        latest_tag=$(git tag -l 'v*' | sort -V | tail -n1)
        TAG_MESSAGE=$(git tag -l --format='%(contents)' $latest_tag)

        for target_branch in code-development code-staging code-production; do
            if [[ $target_branch != "${{ env.SHA_BRANCH }}" ]]; then
                git fetch origin
                git checkout $target_branch
                rsync -av --delete --exclude=.git/ /tmp/temp-dir/ ${{ github.workspace }}/${{ env.DIRECTORY }}/
                COMMIT_MSG="Migrating changes from ${{ env.SHA_BRANCH }} to $target_branch based on tag $latest_tag: $TAG_MESSAGE [skip ci]"
                git add -A && git commit -m "$COMMIT_MSG" && git push origin $target_branch
            fi
        done

    # Step 8: Trigger the next workflow if Git deployment is successful.
    - name: Trigger Next Workflow
      run: |
        CMD=$(echo "curl -L -X POST" \
          "-H \"Accept: application/vnd.github+json\"" \
          "-H \"Authorization: Bearer ${{ secrets.AUTH }}\"" \
          "https://api.github.com/repos/${{ github.repository }}/dispatches" \
          "-d '{\"event_type\":\"${{ env.NEXT_WORKFLOW }}\"," \
          "\"client_payload\":{" \
          "\"sha\":\"${{ env.SHA }}\"," \
          "\"sha_branch\":\"${{ env.SHA_BRANCH }}\"," \
          "\"csproj\":\"${{ env.CSPROJ }}\"}'")
        eval "$CMD"
