######################################
# Workflow: Deploy Git

# Description:
# This workflow handles the deployment of changes to specific Git branches based on the source branch of the initial push. 
# - If the push originates from 'code-development', changes are deployed to 'code-staging' and 'main'.
# - If from 'code-staging', deployments go to 'code-production' and 'main'.
# - If from 'code-production', changes are only deployed to 'main'.
# This ensures each branch has a specific setup and reflects the latest changes appropriately. 
# After a successful deployment, the workflow triggers the next workflow in the pipeline.

# Steps:
# 1. Checkout SHA Repository: Checks out the repository at the specified SHA.
# 2. Configure Git User: Configures the Git user for commits.
# 3. Unlock SHA Gist: Resets the SHA lock Gist for future deployments.
# 4. Set Deployment Branches and Directories: Determines target branches and directories based on the source branch.
# 5. Prepare Temporary Directory: Sets up a temporary directory for file operations.
# 6. Deploy to Target Branches and Main: Deploys changes to the determined branches and updates the main branch.
# 7. Set Version Tag: Tags the latest version in the repository.
# 8. Unset the Lockfile: Releases the lockfile for future deployments.
# 9. Trigger Next Workflow: Initiates the next workflow upon successful deployment.

# Exit Codes:
# 32 - Failure to update Gist with blank content or set lock.
# 40 - Failed to configure Git user.
# 44 - Source directory does not exist or is empty.
# 90 - Failure to trigger the next workflow after all retry attempts.

######################################
---
name: Deploy Git
on:
  repository_dispatch:
    types: [Deploy Git]

env:
  SHA: ${{ github.event.client_payload.sha }}
  SHA_BRANCH: ${{ github.event.client_payload.sha_branch }}
  NEW_VERSION: ${{ github.event.client_payload.new_version }}
  CSPROJ: ${{ github.event.client_payload.csproj }}
  NEXT_WORKFLOW: Deployment Success

jobs:
  deploy-git-branches:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout SHA Repository
        uses: actions/checkout@v3.6.0
        with:
          ref: ${{ env.SHA }}
          fetch-depth: 0

      - name: Configure Git User
        run: |
          git config user.name "${{ github.repository_owner}}"
          git config user.email "${{ vars.EMAIL }}"
          echo "##[debug] Git user configured."

      - name: Unlock SHA Gist
        run: |
          gist_id="${{ vars.SHA_GIST }}"
          CURL_CMD="curl -L \
            -X PATCH \
            -H 'Accept: application/vnd.github+json' \
            -H 'Authorization: token ${{ secrets.AUTH }}' \
            https://api.github.com/gists/$gist_id \
            -d '{\"files\": {\"auth-gate.sha\": {\"content\": \"\"}}}'"
          eval "$CURL_CMD"

      - name: Set Deployment Branches and Directories
        run: |
          if [ "${{ env.SHA_BRANCH }}" == "main" ]; then
            deploy_branches=("code-development" "code-staging" "code-production")
          else
            case "${{ env.SHA_BRANCH }}" in
              "code-development")
                deploy_branches=("code-staging" "main")
                directory="development"
                ;;
              "code-staging")
                deploy_branches=("code-production" "main")
                directory="staging"
                ;;
              "code-production")
                deploy_branches=("main")
                directory="production"
                ;;
            esac
          fi
          echo "deploy_branches=${deploy_branches[@]}" >> $GITHUB_ENV
          echo "DIRECTORY=$directory" >> $GITHUB_ENV

      - name: Prepare Temporary Directory
        run: |
          mkdir -p /tmp/temp-dir/
          if [ "${{ env.SHA_BRANCH }}" != "main" ]; then
            cp -r ${{ github.workspace }}/${{ env.DIRECTORY }}/ /tmp/temp-dir/
          else
            cp -r ${{ github.workspace }}/* /tmp/temp-dir/
          fi

      - name: Deploy to Target Branches and Main
        run: |
          for branch in ${{ join(env.deploy_branches, ' ') }}; do
            git fetch origin
            git checkout $branch
            if [ "${{ env.SHA_BRANCH }}" != "main" ]; then
              rsync -av --delete --exclude=.git/ /tmp/temp-dir/ ${{ github.workspace }}/${{ env.DIRECTORY }}/
            else
              rsync -av --delete --exclude=.git/ /tmp/temp-dir/* ${{ github.workspace }}/
            fi
            COMMIT_MSG="Migrating changes from ${{ env.SHA_BRANCH }} to $branch [skip ci]"
            git add -A && git commit -m "$COMMIT_MSG" && git push origin $branch
          done

      - name: Set Version tag
        run: |
          latest_tag=$(git tag -l 'v*' | sort -V | tail -n1)
          TAG_MESSAGE=$(git tag -l --format='%(contents)' $latest_tag)

      - name: Set SHA Gist as Locked
        run: |
          create_response=$(curl -s -X PATCH \
            -H "Authorization: token ${{ secrets.AUTH }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "{\"files\": {\"lockfile.lock\": {\"content\": \"\"}}}" \
            "https://api.github.com/gists/${{ vars.SHA_GIST }}")
          gist_id=$(echo "$create_response" | jq -r '.id')
          if [[ -z "$gist_id" ]]; then
            echo "Failed to set lock."
            exit 32
          else
            echo "Lock set successfully."
          fi

      - name: Trigger Next Workflow
        run: |
          CMD="curl -L -X POST \
            -H 'Accept: application/vnd.github+json' \
            -H 'Authorization: Bearer ${{ secrets.AUTH }}' \
            https://api.github.com/repos/${{ github.repository }}/dispatches \
            -d '{\"event_type\":\"${{ env.NEXT_WORKFLOW }}\", \
              \"client_payload\":{ \
