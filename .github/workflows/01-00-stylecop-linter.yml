---
name: StyleCop Linter

on:
  repository_dispatch:
    types: StyleCop Linter

env:
  SHA: ${{ github.event.client_payload.sha }}
  SHA_BRANCH: ${{ github.event.client_payload.sha_branch }}
  CSPROJ: ${{ github.event.client_payload.csproj }}

jobs:

  stylecop-linter:

    name: StyleCop Linter
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:

    - name: Checkout SHA Repository
      id: checkout
      uses: actions/checkout@v3.6.0
      with:
        ref: ${{ env.SHA }}
        fetch-depth: 0

    - name: Setup .NET Environment
      uses: actions/setup-dotnet@v3.2.0
      with:
        dotnet-version: '7.0.x'

    - name: Retrieve Cached dotnet Dependencies
      id: cache-dotnet-restore
      uses: actions/cache/restore@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-dotnet-${{ env.SHA }}
        restore-keys: ${{ runner.os }}-dotnet-

    - name: Restore Dependencies
      if: steps.cache-dotnet-restore.outputs.cache-hit != 'true'
      run: dotnet restore --no-cache "${{ env.CSPROJ }}" -v detailed || (echo "##[error] Dotnet restore failed" && exit 34)

    - name: Dotnet Build with StyleCop
      run: |
        CMD="dotnet build --no-restore \"${{ env.CSPROJ }}\" "
        CMD+="-v detailed "
        CMD+="/p:StyleCopEnabled=true "
        CMD+="/p:StyleCopTreatErrorsAsWarnings=false "
        CMD+="/p:StyleCopForceFullAnalysis=false"
        eval "$CMD" || (echo "##[error] Dotnet build failed" && exit 35)

    - name: Trigger Next Workflow # Development-Tests | Staging-Tests | Production-Tests
      if: success()
      run: |
  
        case "${{ env.SHA_BRANCH }}" in
          "development") trigger="Development Tests" ;;
          "staging") trigger="Staging Tests" ;;
          "production") trigger="Production Tests" ;;
          "main") trigger="Production Tests" ;;
        esac
        echo "##[info] Calling $trigger"

        CMD=$(echo "curl -L -X POST" \
        "-H \"Accept: application/vnd.github+json\"" \
        "-H \"Authorization: Bearer ${{ secrets.AUTH }}\"" \
        "-H \"X-GitHub-Api-Version: 2022-11-28\"" \
        "https://api.github.com/repos/${{ github.repository }}/dispatches" \
        "-d '{\"event_type\":\"$trigger\"," \
        "\"client_payload\":{" \
        "\"sha\":\"${{ env.SHA }}\"," \
        "\"sha_branch\":\"${{ env.SHA_BRANCH }}\"," \
        "\"csproj\":\"${{ env.CSPROJ }}\"}'")

        retries=0
        while [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; do
          eval "$CMD"
          CURL_EXIT_CODE=$?
          if [[ $CURL_EXIT_CODE -ne 0 ]]; then
            echo "##[error] Curl command failed on attempt $((retries+1)) with exit code $CURL_EXIT_CODE"
            retries=$((retries+1))
            if [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; then
              echo "##[warn] Retrying in ${{ vars.WAIT_SECONDS }} seconds..."
              sleep ${{ vars.WAIT_SECONDS }}
            else
              echo "##[error] Exhausted ${{ vars.MAX_RETRIES }} retries at ${{ vars.WAIT_SECONDS }} intervals."
              echo "##[error] Failed to trigger $trigger workflow with CURL command: $CMD." && exit 90
            fi
          else
            echo "##[debug] Successful curl"
            break
          fi    
        done
        echo "##[debug] CURL command: $CMD"
