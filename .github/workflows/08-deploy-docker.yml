---
name: "Deploy Docker"

# Builds and pushes a Docker image of the commit SHA repository, if it doesn't exist.
# Executes for the code-development, code-staging and code-production branches.

# 1 - Checkout: Fetch the payload SHA commit.
# 2 - Docker Login: Authenticate with Docker Hub.
# 3 - Enable Features: Turn on Docker's experimental features.
# 4 - Get Version Tag: Identify the latest semantic version tag from git tags.
# 5 - Docker Build & Push: Check for existing Docker image, build and push if not found.
# 6 - Trigger Workflow: If successful, initiate another GitHub workflow (09-deploy-git.yml).

# Exit Codes
# 47 - No tags found.
# 48 - Dockerfile not found.
# 49 - Dockerfile build failed.
# 50 - Dockerfile push failed.


on:
  repository_dispatch:
    types: trigger-deploy-docker

env:
  SHA: ${{ github.event.client_payload.sha }}
  SHA_BRANCH: ${{ github.event.client_payload.sha_branch }}
  CSPROJ: ${{ github.event.client_payload.csproj }}

jobs:

  save-docker-image:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    #if: (github.actor != 'CodeApprover')

    steps:
    
    - name: Checkout SHA repository
      uses: actions/checkout@v3.5.3
      with:
        ref: ${{ env.SHA }}
        fetch-depth: 0

    - name: Log in to Docker Hub
      uses: docker/login-action@v2.2.0
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: Enable Docker Experimental Features
      run: |
        echo '{ "experimental": true }' | sudo tee /etc/docker/daemon.json
        sudo systemctl restart docker
        docker version

    - name: Determine next version tag
      run: |
        git fetch --tags
        if [ -z "$(git tag)" ]; then
            echo "##[error] No tags found --> Exit 47"
            exit 47
        fi
        latest_tag=$(git tag | sort -V | tail -n 1)     
        echo "##[info] Latest Tag = $latest_tag"
        echo "NEW_VERSION=${latest_tag}" >> $GITHUB_ENV

    - name: Build and Push Docker image
      run: |
        docker_repo=$(echo "$(basename "${{ github.workspace }}")" | tr 'A-Z' 'a-z')
        if docker manifest inspect ${{ secrets.DOCKER_HUB_USERNAME }}/$docker_repo:${{ env.NEW_VERSION }} > /dev/null; then
            echo "Docker image already exists! Skipping Docker push."
        else
            docker_file=$(find ./$(echo "${{ env.SHA_BRANCH }}" | sed 's/^code-//') -name "Dockerfile" | head -n 1)
            if [[ ! -f "$docker_file" ]]; then
                echo "##[error] Dockerfile not found for ${{ env.SHA }} --> Exit 48"
                exit 48
            fi
            CMD="docker build -t \"${{ secrets.DOCKER_HUB_USERNAME }}/$docker_repo:${{ env.NEW_VERSION }}\" "
            CMD+="-f \"${docker_file}\" \"${{ github.workspace }}\" "
            echo "##[info] Docker build command is $CMD"
            eval ${CMD} || (echo "##[error] Docker build failed" && exit 49)
            CMD="docker push \"${{ secrets.DOCKER_HUB_USERNAME }}/$docker_repo:${{ env.NEW_VERSION }}\""
            eval ${CMD} || (echo "##[error] Docker push failed" && exit 50)
        fi

    - name: Trigger Next Workflow # 09-deploy-git.yml
      if: success()
      run: |
        trigger="trigger-deploy-git"
        BASE="{\"event_type\": \"$trigger\", \"client_payload\": {"
        SHA="\"sha\": \"${{ env.SHA }}\","
        CSPROJ="\"csproj\": \"${{ env.CSPROJ }}\","
        BRANCH="\"sha_branch\": \"${{ env.SHA_BRANCH }}\""
        END="}}"

        curl -s -o /dev/null -X POST \
        -H "Authorization: Bearer ${{ secrets.AUTH }}" \
        -H "Accept: application/vnd.github.v3+json" \
        -d "$BASE$SHA$CSPROJ$BRANCH$END" \
        "https://api.github.com/repos/${{ github.repository }}/dispatches"
