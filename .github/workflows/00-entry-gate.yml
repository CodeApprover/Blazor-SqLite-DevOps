---
name: "Authentication, Integity and Validation Gateway"

# Verifies the integrity of commits, reports on commit details, validates committer. triggers subsequent workflow.
# Executes for the code-development, code-staging, code-production and main branches.

# Exit Codes
# 10 - Secret is null for branch.
# 11 - Committer is not approved.
# 12 - SHA checkout failure.
# 13 - SHA_BRANCH does not exist.
# 14 - Approved teams secrets may be null.
# 15 - Unauthorised committer.
# 16 - Failure locating .csproj file.
# 17 - Failed to trigger next workflow.

concurrency:
  group: report-${{ github.sha }}
  cancel-in-progress: true

on:
  push:
    branches: ["code-development", "code-production", "code-staging", "main"]

jobs:

  verify-commit: 
      name: Commit Verification, Authentication and Report
      runs-on: ubuntu-latest
      timeout-minutes: 15
      if: (github.actor != ${{ github.repository_owner }}) # DevOps maintainence  
      steps:
  
      - name: Workflow Overview
        run: |
          echo "Workflow Overview"

          echo "##[info]    Workflow Overview $(date) ${{ github.workflow }} commit SHA ${{ github.sha }} -->"
          echo "##[info]    This workflow ensures code integrity for pushes to the"
          echo "##[info]    'code-development', 'code-production', 'code-staging' and 'main' branches."
          echo "##[info]    It serves as ..."

      - name: Checkout SHA Repository
        id: checkout-sha
        uses: actions/checkout@v3.5.3
        with:
          ref: ${{ github.sha }}
          fetch-depth: 0 # deep fetch

      - name: Validate SHA
        run: |
          echo "##[info] Validating SHA checkout."
          if [[ "${{ steps.checkout-sha.outcome }}" == "failure" ]]; then
              echo "##[error] SHA checkout FAIL for ${{ github.sha }} --> Exit 12"
              exit 12
          fi
          echo "##[info] Successfully validated SHA checkout for ${{ github.sha }}."
          echo "SHA=${{ github.sha }}" >> $GITHUB_ENV

      - name: Validate SHA Branch
        run: |
          echo "##[info] Validating SHA branch name."
          branch=$(echo "${{ github.ref }}" | sed "s#refs/heads/##")
          if git show-ref --verify --quiet "refs/remotes/origin/$branch"; then
              echo "##[info] Branch $branch detected in ${{ github.repository }}"
          else
              echo "##[error] Branch $branch does not exist in ${{ github.repository }} --> Exit 13"
              exit 13
          fi
          echo "##[info] Successfully validated SHA branch name $branch."
          echo "SHA_BRANCH=$branch" >> $GITHUB_ENV

      - name: Validate .csproj
        run: |
          echo "##[info] Validating .csproj file."
          DIR_PATH="${{ github.workspace }}/$(echo "${{ env.SHA_BRANCH }}" | sed 's/^code-//')/${{ vars.PROJECT_NAME }}"
          CSPROJ="${DIR_PATH}/${{ vars.PROJECT_NAME }}.csproj"
          if [[ ! -f "$CSPROJ" ]]; then
              echo "##[error] Failure locating .csproj file within the directory $DIR_PATH --> Exit 16"
              exit 16
          fi
          echo "##[info] Successfully validated dotnet .csproj file $CSPROJ."
          echo "CSPROJ=$CSPROJ" >> $GITHUB_ENV

      - name: Sanitise Untrusted User-Controlled Commit Details
        env:
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          COMMIT_AUTHOR_NAME: ${{ github.event.head_commit.author.name }}
          COMMIT_AUTHOR_EMAIL: ${{ github.event.head_commit.author.email }}
        run: |
          echo "##[info]# Security hardening versus injection threats."
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
          echo "COMMIT_AUTHOR_NAME=$COMMIT_AUTHOR_NAME" >> $GITHUB_ENV
          echo "COMMIT_AUTHOR_EMAIL=$COMMIT_AUTHOR_EMAIL" >> $GITHUB_ENV

      - name: Report Commit Details
        run: |
          echo "Reporting details of the commit, GitHub environment and runner specifics."

          echo "-------------------------------------------------"
          echo "----- COMMIT DETAILS ----------------------------"
          echo "-------------------------------------------------"
          echo "Branch Name: ${{ env.SHA_BRANCH }}"
          echo "Commit SHA: ${{ github.sha }}"
          echo "Commit Message: $COMMIT_MESSAGE"
          echo "Commit Author: $COMMIT_AUTHOR_NAME"
          echo "Committer Email: $COMMIT_AUTHOR_EMAIL"
          echo "Pusher Name: ${{ github.event.pusher.name }}"
          echo "Actor: ${{ github.actor }}"

          echo "-------------------------------------------------"
          echo "----- GITHUB ENVIRONMENT & WORKFLOW DETAILS -----"
          echo "-------------------------------------------------"
          echo "Date: $(date)"
          echo "Event Name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Repository: ${{ github.repository }}"
          echo "Repository Owner: ${{ github.repository_owner }}"
          echo "Workflow Name: ${{ github.workflow }}"
          echo "GitHub Server URL: ${{ github.server_url }}"
          echo "GitHub API URL: ${{ github.api_url }}"
          echo "GitHub GraphQL URL: ${{ github.graphql_url }}"
          echo "Runner OS: ${{ runner.os }}"
          echo "Workspace: ${{ github.workspace }}"
          [ ! -z "${{ github.base_ref }}" ] && echo "Base Ref: ${{ github.base_ref }}"
          [ ! -z "${{ github.head_ref }}" ] && echo "Head Ref: ${{ github.head_ref }}"

          echo "-------------------------------------------------"
          echo "----- JOB, RUN AND RUNNER DETAILS ---------------"
          echo "-------------------------------------------------"
          echo "Job Name: ${{ github.job }}"
          echo "Event ID: ${{ github.run_id }}"
          echo "Run Number: ${{ github.run_number }}"
          echo "Runner Name: ${{ runner.name }}"
          echo "Runner Label: ${{ runner.label }}"
          echo "Runner Tool Cache: ${{ runner.tool_cache }}"
          echo "Runner Temp Directory: ${{ runner.temp }}"
          echo "GitHub Event Before: ${{ github.event.before }}"
          echo "GitHub Event After: ${{ github.event.after }}"
          echo "---------------------------------------"
        
      - name: Set Approved Team Members
        run: |
          if [[ "${{ env.SHA_BRANCH }}" == "code-development" ]]; then
              echo "APPROVED_TEAM=${{ github.repository_owner }},${{ secrets.DEVELOPMENT_TEAM }}" >> $GITHUB_ENV
          elif [[ "${{ env.SHA_BRANCH }}" == "code-staging" ]]; then
              echo "APPROVED_TEAM=${{ github.repository_owner }},${{ secrets.STAGING_TEAM }}" >> $GITHUB_ENV
          elif [[ "${{ env.SHA_BRANCH }}" == "code-production" ]]; then
              echo "APPROVED_TEAM=${{ github.repository_owner }},${{ secrets.PRODUCTION_TEAM }}" >> $GITHUB_ENV
          elif [[ "${{ env.SHA_BRANCH }}" == "main" ]]; then
              echo "APPROVED_TEAM=${{ github.repository_owner }}" >> $GITHUB_ENV
          fi
  
      - name: Validate Committer
        run: |
          COMMITTER_NAME=$(echo "${{ github.event.head_commit.author.name }}" | tr -d ' ')
          if [[ "$APPROVED_TEAM" == "" ]]; then
              echo "##[error] APPROVED TEAM not set for branch ${{ env.SHA_BRANCH }} --> Exit 10"
              exit 10
          fi
          echo "##[info] Committer is $COMMITTER_NAME"
          if ! echo "$APPROVED_TEAM" | grep -qiE "(^|,)$COMMITTER_NAME(,|$)"; then
              echo "##[info] APPROVED_TEAM=$APPROVED_TEAM"
              echo "##[error] Committer $COMMITTER_NAME is not approved for branch ${{ env.SHA_BRANCH }}. --> Exit 11"
              exit 11
          fi

  trigger-next-workflow: 
    name: Trigger Next Workflow # 01-cache-dependencies.yml
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: (github.actor != ${{ github.repository_owner }}) # DevOps maintainence
    needs: verify-commit
    steps:

    - name: trigger-next-workflow
      run: |
        trigger="trigger-cache-dependencies"
        ACCEPT_HEADER="Accept: application/vnd.github.v3+json"
        PAYLOAD="{\"event_type\": \"$trigger\", \"client_payload\": {\"sha\": \"${{ env.SHA }}\", "
        PAYLOAD+="\"csproj\": \"${{ env.CSPROJ }}\", \"sha_branch\": \"${{ env.SHA_BRANCH }}\"}}"
        AUTH_HEADER="Authorization: Bearer ${{ secrets.AUTH }}"
        REPO_ENDPOINT="https://api.github.com/repos/${{ github.repository }}/dispatches"
        CMD="curl -s -o /dev/null -w \"%{http_code}\" -X POST -H \"$AUTH_HEADER\" -H \"$ACCEPT_HEADER\" -d '$PAYLOAD' $REPO_ENDPOINT"

        retries=0
        while [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; do
            RESPONSE_BODY=$(eval "$CMD")
            CURL_EXIT_CODE=$?
            RESPONSE_CODE=${RESPONSE_BODY: -3}  

            if [[ $CURL_EXIT_CODE -ne 0 ]]; then
                echo "##[error] Curl failed on attempt $((retries+1))/${{ vars.MAX_RETRIES }} with exit code $CURL_EXIT_CODE. Retrying..."
                sleep ${{ vars.WAIT_SECONDS }}
            elif [[ $RESPONSE_CODE -ge 200 && $RESPONSE_CODE -le 299 ]]; then
                echo "##[info] Successfully triggered workflow on attempt $((retries+1))"
                break
            else
                echo "##[warn] Attempt $((retries+1))/${{ vars.MAX_RETRIES }} failed with response code $RESPONSE_CODE. Retrying in ${{ vars.WAIT_SECONDS }} seconds..."
                sleep ${{ vars.WAIT_SECONDS }}
            fi           
            retries=$((retries+1))
        done

        if [[ $retries -eq ${{ vars.MAX_RETRIES }} ]]; then
            echo "##[error] Failed triggering workflow after ${{ vars.MAX_RETRIES }} retries."
            exit 17
        fi
