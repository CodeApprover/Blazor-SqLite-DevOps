---
name: "Authentication, Integrity and Validation Gateway"

# The purpose of this workflow is to verify the integrity of commits, report on commit details, 
# validate the identity of the committer and trigger subsequent workflows.
# This ensures code integrity for pushes to specific branches: code-development, code-production, code-staging and main.

#  $(date) ${{ github.workflow }} commit SHA ${{ github.sha }} -->"

# Steps
# 1.  Workflow Overview: Displays a brief description of the workflow's intent.
# 2.  Checkout SHA Repository: Retrieves the repository using the specific commit SHA.
# 3.  Validate SHA: Confirms the repository's checked-out SHA is accurate.
# 4.  Validate SHA Branch: Confirms the branch linked to the SHA is accurate.
# 5.  Validate .csproj: Confirms a .csproj file's presence in a directory based on the branch name and the PROJECT_NAME variable.
# 6.  Sanitise Commit Details: Adds security by cleaning commit details to prevent malicious injections.
# 7.  Report Commit Details: Presents detailed information about the commit, GitHub settings and the workflow runner.
# 8.  Set Approved Team Members: Assigns a list of authorized committers based on the branch, comprising the repository owner and a team from the secrets.
# 9:  Validate Committer: Ensures the committer belongs to the approved team for that branch.
# 10: Trigger Next Workflow: Initiates next, cache-dependencies workflow. Retries up to MAX_RETRIES at WAIT_SECONDS intervals.

# Exit Codes
# 20 - SHA checkout failure.
# 21 - SHA_BRANCH does not exist.
# 22 - Failure locating .csproj file.
# 23 - APPROVED_TEAM not set.
# 24 - Committer is not approved.
# 25 - Curl failure due to malformed URL.
# 26 - Failed to trigger next workflow.

concurrency:
  group: report-${{ github.sha }}
  cancel-in-progress: true

on:
  push:
    branches: ["code-development", "code-production", "code-staging", "main"]

jobs:

  verify-commit: 
      name: Commit Verification, Authentication and Report
      runs-on: ubuntu-latest
      timeout-minutes: 25
      if: (github.actor != ${{ github.repository_owner }}) # exclude DevOps maintainence
      steps:

      - name: Checkout SHA Repository
        id: checkout-sha
        uses: actions/checkout@v3.5.3
        with:
          ref: ${{ github.sha }}
          fetch-depth: 0 # deep fetch

      - name: Validate SHA
        run: |
          echo "##[info] Validating SHA checkout."
          if [[ "${{ steps.checkout-sha.outcome }}" == "failure" ]]; then
              echo "##[error] SHA checkout FAIL for ${{ github.sha }} --> Exit 20"
              exit 20
          fi
          echo "##[info] Successfully validated SHA checkout for ${{ github.sha }}."
          echo "SHA=${{ github.sha }}" >> $GITHUB_ENV

      - name: Validate SHA Branch
        run: |
          echo "##[info] Validating SHA branch name."
          branch=$(echo "${{ github.ref }}" | sed "s#refs/heads/##")
          if git show-ref --verify --quiet "refs/remotes/origin/$branch"; then
              echo "##[info] Branch $branch detected in ${{ github.repository }}"
          else
              echo "##[error] Branch $branch does not exist in ${{ github.repository }} --> Exit 21"
              exit 21
          fi
          echo "##[info] Successfully validated SHA branch name $branch."
          echo "SHA_BRANCH=$branch" >> $GITHUB_ENV

      - name: Validate .csproj
        run: |
          echo "##[info] Validating .csproj file."
          DIR_PATH="${{ github.workspace }}/$(echo "${{ env.SHA_BRANCH }}" | sed 's/^code-//')/${{ vars.PROJECT_NAME }}"
          CSPROJ="${DIR_PATH}/${{ vars.PROJECT_NAME }}.csproj"
          if [[ ! -f "$CSPROJ" ]]; then
              echo "##[error] Failure locating .csproj file within the directory $DIR_PATH --> Exit 22"
              exit 22
          fi
          echo "##[info] Successfully validated dotnet .csproj file $CSPROJ."
          echo "CSPROJ=$CSPROJ" >> $GITHUB_ENV

      - name: Sanitise Untrusted User-Controlled Commit Details
        env:
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          COMMIT_AUTHOR_NAME: ${{ github.event.head_commit.author.name }}
          COMMIT_AUTHOR_EMAIL: ${{ github.event.head_commit.author.email }}
        run: |
          echo "##[info]# Security hardening versus injection threats."
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
          echo "COMMIT_AUTHOR_NAME=$COMMIT_AUTHOR_NAME" >> $GITHUB_ENV
          echo "COMMIT_AUTHOR_EMAIL=$COMMIT_AUTHOR_EMAIL" >> $GITHUB_ENV

      - name: Report Commit Details
        run: |
          echo "Reporting details of the commit, GitHub environment and runner specifics."

          echo "-------------------------------------------------"
          echo "----- COMMIT DETAILS ----------------------------"
          echo "-------------------------------------------------"
          echo "Branch Name: ${{ env.SHA_BRANCH }}"
          echo "Commit SHA: ${{ github.sha }}"
          echo "Commit Message: $COMMIT_MESSAGE"
          echo "Commit Author: $COMMIT_AUTHOR_NAME"
          echo "Committer Email: $COMMIT_AUTHOR_EMAIL"
          echo "Pusher Name: ${{ github.event.pusher.name }}"
          echo "Actor: ${{ github.actor }}"

          echo "-------------------------------------------------"
          echo "----- GITHUB ENVIRONMENT & WORKFLOW DETAILS -----"
          echo "-------------------------------------------------"
          echo "Date: $(date)"
          echo "Event Name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Repository: ${{ github.repository }}"
          echo "Repository Owner: ${{ github.repository_owner }}"
          echo "Workflow Name: ${{ github.workflow }}"
          echo "GitHub Server URL: ${{ github.server_url }}"
          echo "GitHub API URL: ${{ github.api_url }}"
          echo "GitHub GraphQL URL: ${{ github.graphql_url }}"
          echo "Runner OS: ${{ runner.os }}"
          echo "Workspace: ${{ github.workspace }}"
          [ ! -z "${{ github.base_ref }}" ] && echo "Base Ref: ${{ github.base_ref }}"
          [ ! -z "${{ github.head_ref }}" ] && echo "Head Ref: ${{ github.head_ref }}"

          echo "-------------------------------------------------"
          echo "----- JOB, RUN AND RUNNER DETAILS ---------------"
          echo "-------------------------------------------------"
          echo "Job Name: ${{ github.job }}"
          echo "Event ID: ${{ github.run_id }}"
          echo "Run Number: ${{ github.run_number }}"
          echo "Runner Name: ${{ runner.name }}"
          echo "Runner Label: ${{ runner.label }}"
          echo "Runner Tool Cache: ${{ runner.tool_cache }}"
          echo "Runner Temp Directory: ${{ runner.temp }}"
          echo "GitHub Event Before: ${{ github.event.before }}"
          echo "GitHub Event After: ${{ github.event.after }}"
          echo "---------------------------------------"
        
      - name: Set Approved Team Members
        run: |
          if [[ "${{ env.SHA_BRANCH }}" == "code-development" ]]; then
              echo "APPROVED_TEAM=${{ github.repository_owner }},${{ secrets.DEVELOPMENT_TEAM }}" >> $GITHUB_ENV
          elif [[ "${{ env.SHA_BRANCH }}" == "code-staging" ]]; then
              echo "APPROVED_TEAM=${{ github.repository_owner }},${{ secrets.STAGING_TEAM }}" >> $GITHUB_ENV
          elif [[ "${{ env.SHA_BRANCH }}" == "code-production" ]]; then
              echo "APPROVED_TEAM=${{ github.repository_owner }},${{ secrets.PRODUCTION_TEAM }}" >> $GITHUB_ENV
          elif [[ "${{ env.SHA_BRANCH }}" == "main" ]]; then
              echo "APPROVED_TEAM=${{ github.repository_owner }}" >> $GITHUB_ENV
          fi
  
      - name: Validate Committer
        run: |
          COMMITTER_NAME=$(echo "${{ github.event.head_commit.author.name }}" | tr -d ' ')
          if [[ "$APPROVED_TEAM" == "" ]]; then
              echo "##[error] APPROVED TEAM not set for branch ${{ env.SHA_BRANCH }} --> Exit 23"
              exit 23
          fi
          echo "##[info] Committer is $COMMITTER_NAME"
          if ! echo "$APPROVED_TEAM" | grep -qiE "(^|,)$COMMITTER_NAME(,|$)"; then
              echo "##[info] APPROVED_TEAM=$APPROVED_TEAM"
              echo "##[error] Committer $COMMITTER_NAME is not approved for branch ${{ env.SHA_BRANCH }}. --> Exit 24"
              exit 24
          fi

      - name: Trigger Next Workflow
        if: success()
        run: |
          echo "##[info] Triggering next workflow."        
          trigger="trigger-cache-dependencies"

          # Construct Payload for the request        
          ACCEPT_HEADER="Accept: application/vnd.github.v3+json"
          BASE="{\"event_type\": \"$trigger\", \"client_payload\": {"
          SHA="\"sha\": \"${{ env.SHA }}\""
          CSPROJ=", \"csproj\": \"${{ env.CSPROJ }}\""
          BRANCH=", \"sha_branch\": \"${{ env.SHA_BRANCH }}\"}}"
          PAYLOAD="${BASE}${SHA}${CSPROJ}${BRANCH}"

          # Construct CURL command        
          AUTH_HEADER="Authorization: Bearer ${{ secrets.AUTH }}"
          REPO_ENDPOINT="https://api.github.com/repos/${{ github.repository }}/dispatches"
          CMD="curl -s -o /dev/null -w \"%{http_code}\" "
          CMD+="-X POST "
          CMD+="-H \"$AUTH_HEADER\" "
          CMD+="-H \"$ACCEPT_HEADER\" "
          CMD+="-d '$PAYLOAD' "
          CMD+="$REPO_ENDPOINT"

          # Execute the CURL command with retries
          echo "##[info] Sending curl request with ${{ vars.MAX_RETRIES }} at ${{ vars.WAIT_SECONDS }} second intervals."
          echo "##[info] Trigger $tigger being calling via ${CMD}"

          retries=0
          while [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; do
              RESPONSE_BODY=$(eval "$CMD")
              CURL_EXIT_CODE=$?
              RESPONSE_CODE=${RESPONSE_BODY: -3}  # HTTP status code 3 digits
              echo "##[debug] Response body: ${RESPONSE_BODY%???}"

              if [[ $CURL_EXIT_CODE -ne 0 ]]; then
                  echo "##[error] Curl command failed."
                  if [[ $CURL_EXIT_CODE -eq 3 ]]; then
                      echo "##[error] Curl failure due to malformed URL on attempt $((retries+1)) of ${{ vars.MAX_RETRIES }} --> Exit 25."
                      exit 25
                  else
                      echo "##[error] Curl failed with exit code $CURL_EXIT_CODE on attempt $((retries+1)) of ${{ vars.MAX_RETRIES }}."
                  fi
                  sleep $WAIT_SECONDS 
              elif [[ $RESPONSE_CODE -ge 200 && $RESPONSE_CODE -le 299 ]]; then
                  echo "##[info] Successfully triggered workflow on attempt $((retries+1))"
                  break
              else
                  echo "##[warn] Attempt $((retries+1))/${{ vars.MAX_RETRIES }} failed with response code $RESPONSE_CODE. Retrying in ${{ vars.WAIT_SECONDS }} seconds..."
                  sleep ${{ vars.WAIT_SECONDS }}
              fi           
              retries=$((retries+1))
          done

          # Check if all retries failed
          if [[ $retries -eq ${{ vars.MAX_RETRIES }} ]]; then
              echo "##[error] Exhausted retries. Curl command: $CMD"
              echo "##[error] Failed ${{ vars.MAX_RETRIES }} retries at ${{ vars.WAIT_SECONDS }} seconds triggering workflow --> Exit 26"
              exit 26
          fi
