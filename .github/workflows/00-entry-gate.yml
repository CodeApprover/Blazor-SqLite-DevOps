---
name: "SHA Commit Verification and Report"

# Reports on the initial SHA push

# Exit Codes
# 30 - SHA checkout FAIL
# 31 - SHA_BRANCH does not exist in repository
# 32 - Failure locating .csproj file
# 33 - Failed retries to trigger next workflow using curl
# 34 - Failed to trigger next workflow HTTP response non success

concurrency:
    group: report-${{ github.sha }}
    cancel-in-progress: true

on:
  push:
    branches: ["code-development", "code-production", "code-staging"]

jobs:
  report-usage:
    name: "Report Usage"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: (github.actor != 'CodeApprover')

    steps:

    - name: Setup and Description
      run: |
        desc="This workflow is triggered on branches code-development, code-production, and code-staging. "
        desc+="Its main functions are to validate the commit SHA, branch name, and the .csproj file path. "
        desc+="Post validation, it provides a report and can trigger the 'trigger-cache-dependencies' workflow. "
        desc+="Note this workflow doesn't run if initiated by DevOps maintainer 'CodeApprover'."

        echo "##[info] $(date) ${{ github.workflow }} commit SHA ${{ github.sha }}"
        echo $desc

    - name: Checkout SHA Repository
      # Checking out the repository using the commit SHA.
      id: checkout-sha
      uses: actions/checkout@v3.5.3
      with:
        ref: ${{ github.sha }}
        fetch-depth: 0 # deep clone

    - name: Validate SHA
      run: |
        echo "##[info] Validating SHA checkout."
        if [[ "${{ steps.checkout-sha.outcome }}" == "failure" ]]; then
            echo "##[error] SHA checkout FAIL for ${{ github.sha }} --> Exit 30"
            exit 30
        fi
        echo "##[info] SHA checkout success for ${{ github.sha }}."
        echo "##[info] Setting GITHUB_ENV for SHA to ${{ github.sha }}."
        echo "SHA=${{ github.sha }}" >> $GITHUB_ENV

    - name: Validate SHA Branch
      run: |
        echo "##[info] Validating SHA branch name."

        echo "##[info] Extracting branch name from github ref."
        branch=$(echo "${{ github.ref }}" | sed "s#refs/heads/##")
        echo "##[info] Detected branch as $branch"

        echo "##[info] Checking if branch exists in the remote repository."
        if git show-ref --verify --quiet "refs/remotes/origin/$branch"; then
            echo "##[info] Branch $branch detected in ${{ github.repository }}"
        else
            echo "##[debug] Current Branch and HEAD Commit $(git rev-parse --abbrev-ref HEAD) @ $(git rev-parse HEAD)"
            echo "##[debug] List of All Branches (Local and Remote)"
            git branch -a
            echo "##[error] Branch $branch does not exist in ${{ github.repository }} --> Exit 31"
            exit 31
        fi
        
        echo "##[info] Setting GITHUB_ENV for SHA_BRANCH to $branch for future steps."
        echo "SHA_BRANCH=$branch" >> $GITHUB_ENV

    - name: Validate .csproj
      run: |
        echo "##[info] Validating .csproj file."
        DIR_PATH="${{ github.workspace }}/$(echo "${{ env.SHA_BRANCH }}" | sed 's/^code-//')/${{ vars.PROJECT_NAME }}"
        CSPROJ="${DIR_PATH}/${{ vars.PROJECT_NAME }}.csproj"
        echo "##[info] Checking .csproj file as $CSPROJ"
        if [[ ! -f "$CSPROJ" ]]; then
            echo "##[debug] Directory contents of $DIR_PATH"
            ls -la "$DIR_PATH"
            echo "##[error] Failure locating .csproj file within the directory $DIR_PATH --> Exit 32"
            exit 32
        fi
        echo "##[info] Setting GITHUB_ENV for .csproj file to $CSPROJ"
        echo "CSPROJ=$CSPROJ" >> $GITHUB_ENV

    - name: Report Commit Details
      run: |
        echo "##[info] Logging details of the commit, GitHub environment and runner specifics."

        echo "-------------------------------------------------"
        echo "----- COMMIT DETAILS ----------------------------"
        echo "-------------------------------------------------"
        echo "Branch Name ${{ env.SHA_BRANCH }}"
        echo "Commit SHA ${{ github.sha }}"
        echo "Commit Message ${{ github.event.head_commit.message }}"
        echo "Commit Author ${{ github.event.head_commit.author.name }}"
        echo "Committer Email ${{ github.event.head_commit.author.email }}"
        echo "Pusher Name ${{ github.event.pusher.name }}"
        echo "Actor ${{ github.actor }}"

        echo "-------------------------------------------------"
        echo "----- GITHUB ENVIRONMENT & WORKFLOW DETAILS -----"
        echo "-------------------------------------------------"
        echo "Date $(date)"
        echo "Event Name ${{ github.event_name }}"
        echo "Ref ${{ github.ref }}"
        echo "Repository ${{ github.repository }}"
        echo "Repository Owner ${{ github.repository_owner }}"
        echo "Workflow Name ${{ github.workflow }}"
        echo "GitHub Server URL ${{ github.server_url }}"
        echo "GitHub API URL ${{ github.api_url }}"
        echo "GitHub GraphQL URL ${{ github.graphql_url }}"
        echo "Runner OS ${{ runner.os }}"
        echo "Workspace ${{ github.workspace }}"
        [ ! -z "${{ github.base_ref }}" ] && echo "Base Ref ${{ github.base_ref }}"
        [ ! -z "${{ github.head_ref }}" ] && echo "Head Ref ${{ github.head_ref }}"

        echo "-------------------------------------------------"
        echo "----- JOB, RUN AND RUNNER DETAILS ---------------"
        echo "-------------------------------------------------"
        echo "Job Name ${{ github.job }}"
        echo "Event ID ${{ github.run_id }}"
        echo "Run Number ${{ github.run_number }}"
        echo "Runner Name ${{ runner.name }}"
        echo "Runner Label ${{ runner.label }}"
        echo "Runner Tool Cache ${{ runner.tool_cache }}"
        echo "Runner Temp Directory ${{ runner.temp }}"
        echo "GitHub Event Before ${{ github.event.before }}"
        echo "GitHub Event After ${{ github.event.after }}"
        echo "---------------------------------------"

    - name: Cleanup Redundant Tags
      run: |
        echo "##[info] Deleting old tags skipping 12 most recent"
        DELETE_TAGS=$(git tag -l | head -n -12)
        for TAG in $DELETE_TAGS; do
            git tag -d $TAG
            git push origin --delete $TAG
        done

    - name: Trigger Next Workflow
      if: success()
      run: |
        echo "##[info] Triggering next workflow with retries."        
        trigger="trigger-cache-dependencies"
        MAX_RETRIES=${{ vars.MAX_RETRIES }}
        WAIT_TIME=${{ vars.WAIT_SECONDS }}

        echo "##[info] Setting curl command to curl $trigger with payload"
        AUTH_HEADER="Authorization: Bearer ${{ secrets.AUTH }}"
        ACCEPT_HEADER="Accept: application/vnd.github.v3+json"
        BASE="{\"event_type\": \"$trigger\", \"client_payload\": {"
        SHA="\"sha\": \"${{ env.SHA }}\""
        CSPROJ=", \"csproj\": \"${{ env.CSPROJ }}\""
        BRANCH=", \"branch_name\": \"${{ env.SHA_BRANCH }}\"}}"
        PAYLOAD="${BASE}${SHA}${CSPROJ}${BRANCH}"
        REPO_ENDPOINT="https://api.github.com/repos/${{ github.repository }}/dispatches"
        
        CMD="curl -s -o /dev/null -w \"%{http_code}\" "
        CMD+="-X POST "
        CMD+="-H \"$AUTH_HEADER\" "
        CMD+="-H \"$ACCEPT_HEADER\" "
        CMD+="-d '$PAYLOAD' "
        CMD+="$REPO_ENDPOINT"
        echo "##[info] curl command is \n$CMD"

        echo "##[info] Sending curl request with $MAX_RETRIES at $WAIT_TIME second intervals."
        retries=0
        until [[ $retries -ge $MAX_RETRIES ]]
        do
            RESPONSE=$(${CMD})
            
            echo "##[info] Checking if the response is between 200 and 206, indicating success."
            if [[ $RESPONSE -ge 200 && $RESPONSE -le 206 ]]; then
                echo "##[info] Successfully triggered workflow on attempt $((retries+1))"
                break
            else
                echo "##[warn] Attempt $((retries+1))/$MAX_RETRIES failed with response code $RESPONSE. Retrying in $WAIT_TIME seconds..."
                retries=$((retries+1))
                sleep $WAIT_TIME
            fi
        done

        echo "##[info] Validating curl execution."
        if [[ $CURL_EXIT_CODE -ne 0 ]]; then
            echo "##[error] Curl failed with exit code $CURL_EXIT_CODE on attempt $((retries+1))"
            case $CURL_EXIT_CODE in
                1) 
                    echo "##[error] Unsupported protocol. This build of curl has no support for this protocol."
                    ;;
                2) 
                    echo "##[error] Failed to initialize."
                    ;;
                3) 
                    echo "##[error] Malformed URL detected."
                    ;;
                5) 
                    echo "##[error] Couldn't resolve proxy. The given proxy host could not be resolved."
                    ;;
                6) 
                    echo "##[error] Couldn't resolve host. The given remote host was not resolved."
                    ;;
                7) 
                    echo "##[error] Failed to connect to host."
                    ;;
                22)
                    echo "##[error] HTTP page not retrieved. The requested URL was not found or returned another error with the HTTP error code being 400 or above."
                    ;;
                26) 
                    echo "##[error] Read error. curl couldn't read data from file, the user's home dir, or similar."
                    ;;
                28) 
                    echo "##[error] Operation timeout."
                    ;;
                35) 
                    echo "##[error] SSL/TLS handshake fail."
                    ;;
                47) 
                    echo "##[error] Too many redirects. When following redirects, curl hit the maximum amount."
                    ;;
                51) 
                    echo "##[error] The server's SSL/TLS certificate or SSH md5 fingerprint was deemed not OK."
                    ;;
                52) 
                    echo "##[error] Nothing was returned from the server, and under the circumstances, getting nothing is considered an error."
                    ;;
                *)
                    echo "##[error] An unexpected error occurred."
                    ;;
            esac
            # Depending on the nature of the error, you might want to exit the script or continue the loop. 
            # For critical errors, you can exit immediately:
            exit $CURL_EXIT_CODE
        fi

        fi
        if [[ $retries -eq $MAX_RETRIES ]]; then 
            echo "##[error] Exhausted retries. Curl command: $CMD"
            echo "##[error] Failed $MAX_RETRIES retries at $WAIT_TIME seconds triggering workflow."
            exit 33
        elif [[ $RESPONSE -lt 200 || $RESPONSE -gt 206 ]]; then
            echo "##[error] Failed to trigger workflow. HTTP Code $RESPONSE indicates failure."
            exit 34
        else
            echo "##[info] Workflow triggered successfully."
            exit 0
        fi
