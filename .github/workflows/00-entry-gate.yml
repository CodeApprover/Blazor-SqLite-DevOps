---
name: "Commit Verification and Reoprt"

# Reports on the initial SHA push

# Exit Codes
# 1: SHA checkout fail
# 2: SHA_BRANCH does not exist in repository
# 3: Failure locating .csproj file
# 4: Failed to trigger next workflow

concurrency:
    group: report-${{ github.sha }}
    cancel-in-progress: true

on:
  push:
    branches: ["code-development", "code-production", "code-staging"]

jobs:
  report-usage:
    name: "Report Usage"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: (github.actor != 'CodeApprover')

    steps:
    
    - name: Checkout SHA Repository
      id: checkout-sha
      uses: actions/checkout@v3.5.3
      with:
        ref: ${{ github.sha }}
        fetch-depth: 0

    - name: Define Logging Function # info, debug, warn, error
      run: |
        function log() {
           level=$1
           shift
           msg=$1
           echo "[$level] $(date -u +"%Y-%m-%dT%H:%M:%SZ") - $msg"
        }

    - name: Validate SHA
      run: |
        if [[ "${{ steps.checkout-sha.outcome }}" == "failure" ]]; then
          log "error" "SHA checkout FAIL for ${{ github.sha }} --> Exit 1"
          exit 1
        else:
          log "info" "SHA checkout success for ${{ github.sha }}."
          echo "SHA=${{ github.sha }}" >> $GITHUB_ENV
          log "info" "Commit SHA is $SHA"
        fi

    - name: Validate SHA Branch
      run: |
        branch=$(echo "${{ github.ref }}" | sed "s#refs/heads/##")
        echo "SHA_BRANCH=$branch" >> $GITHUB_ENV

        if git show-ref --verify --quiet "refs/remotes/origin/$branch"; then
          log "debug" "Branch $branch detected in repository ${{ github.repository }}"
        else
          log "error" "Branch $branch does not exist in repository ${{ github.repository }}"
          log "debug" "branch=$branch"
          log "debug" "HA_BRANCH=$SHA_BRANCH"
          log "debug" "Current Branch and Commit:"
          log "debug" "$(git rev-parse --abbrev-ref HEAD) @ $(git rev-parse HEAD)"
          log "debug" "$(git show-ref)"
          log "debug" "$(git fetch)"
          log "debug" "$(git branch -a)"
          log "error" "SHA_BRANCH does not exist in repository --> Exit 2"
          exit 2
        fi

    - name: Validate .csproj
      run: |
        DIR_PATH="${{ github.workspace }}/$(echo "${{ env.SHA_BRANCH }}" | sed 's/^code-//')/${{ secrets.PROJECT_NAME }}"
        CSPROJ=$(find "$DIR_PATH" -name "*.csproj" -type f)
        log "debug" ".csproj file set as $CSPROJ"

        if [[ ! -f "$CSPROJ" ]]; then
          log "error" ".csproj file $CSPROJ not found."
          log "debug" "$(ls -la ${{ github.workspace }}/$(echo "${{ env.SHA_BRANCH }}" | sed 's/^code-//')/${{ secrets.PROJECT_NAME }}/)"
          log "debug" ".csproj file set as $CSPROJ"
          log "error" "Failure locating .csproj file --> Exit 3"
          exit 3
        fi

        echo "CSPROJ=$CSPROJ" >> $GITHUB_ENV

    - name: Report Commit Details
      run: |
        log "info" "----- COMMIT DETAILS -----"
        log "info" "Branch Name: ${{ env.SHA_BRANCH }}"
        log "info" "Commit SHA: ${{ github.sha }}"
        log "info" "Commit Message: ${{ github.event.head_commit.message }}"
        log "info" "Commit Author: ${{ github.event.head_commit.author.name }}"
        log "info" "Committer Email: ${{ github.event.head_commit.author.email }}"
        log "info" "Pusher Name: ${{ github.event.pusher.name }}"
        log "info" "Actor: ${{ github.actor }}"
        log "info" "--------------------------"

    - name: Report GitHub Environment and Workflow Details
      run: |
        log "info" "----- GITHUB ENVIRONMENT & WORKFLOW DETAILS -----"
        log "info" "Date: $(date)"
        log "info" "Event Name: ${{ github.event_name }}"
        log "info" "Ref: ${{ github.ref }}"
        log "info" "Repository: ${{ github.repository }}"
        log "info" "Repository Owner: ${{ github.repository_owner }}"
        log "info" "Workflow Name: ${{ github.workflow }}"
        log "info" "GitHub Server URL: ${{ github.server_url }}"
        log "info" "GitHub API URL: ${{ github.api_url }}"
        log "info" "GitHub GraphQL URL: ${{ github.graphql_url }}"
        log "info" "Runner OS: ${{ runner.os }}"
        log "info" "Workspace: ${{ github.workspace }}"
        [ ! -z "${{ github.base_ref }}" ] && log "info" "Base Ref: ${{ github.base_ref }}"
        [ ! -z "${{ github.head_ref }}" ] && log "info" "Head Ref: ${{ github.head_ref }}"
        log "debug" "-----------------------------------------------"

    - name: Report Job, Run and Runner Details
      run: |
        log "info" "----- JOB, RUN AND RUNNER DETAILS -----"
        log "info" "Job Name: ${{ github.job }}"
        log "info" "Event ID: ${{ github.run_id }}"
        log "info" "Run Number: ${{ github.run_number }}"
        log "info" "Runner Name: ${{ runner.name }}"
        log "info" "Runner Label: ${{ runner.label }}"
        log "info" "Runner Tool Cache: ${{ runner.tool_cache }}"
        log "info" "Runner Temp Directory: ${{ runner.temp }}"
        log "info" "GitHub Event Before: ${{ github.event.before }}"
        log "info" "GitHub Event After: ${{ github.event.after }}"
        log "info" "---------------------------------------"

    - name: Trigger Next Workflow # 01-cache-dependencies.yml
      if: success()      
      run: |
        trigger="trigger-cache-dependencies"
        BASE="{\"event_type\": \"$trigger\", \"client_payload\": {"
        SHA="\"sha\": \"${{ env.SHA }}\","
        CSPROJ="\"csproj\": \"${{ env.CSPROJ }}\","
        BRANCH="\"branch_name\": \"${{ env.SHA_BRANCH }}\""
        PAYLOAD="$BASE$SHA$CSPROJ$BRANCH$END"

        CMD=(curl -s -o /dev/null -w "%{http_code}" -X POST 
        -H "Authorization: Bearer ${{ secrets.AUTH }}"
        -H "Accept: application/vnd.github.v3+json"
        -d "$PAYLOAD"
        "https://api.github.com/repos/${{ github.repository }}/dispatches")

        retries=0
        MAX_ATTEMPTS=${{ secrets.MAX_RETRIES }}
        until [[ $retries -ge $MAX_ATTEMPTS ]]
        do
           RESPONSE=$("${CMD[@]}") && break
           log "warn" "Attempt $retries/$MAX_ATTEMPTS failed with response code $RESPONSE, retrying..."
           retries=$((retries+1))
           sleep 5
        done

        if [[ $retries -eq $MAX_ATTEMPTS ]]; then log "error" "Failed after $MAX_ATTEMPTS attempts." fi

        if [[ $RESPONSE -lt 200 || $RESPONSE -gt 206 ]]; then  # HTTP 'not success'
          log "error" "Failed to trigger next workflow. HTTP Code: $RESPONSE"
          log "debug" "$trigger"
          log "error" "Failed to trigger next workflow $trigger --> Exit 4"
          exit 4
        else
          log "info" "Triggered next workflow $trigger"
        fi
