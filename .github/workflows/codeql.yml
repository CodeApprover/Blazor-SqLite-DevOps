name: "CodeQL"

on:
  push:
    branches: [ "main", "code-development", "code-production", "code-staging" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '29 20 * * 2'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: csharp

    # Perform CodeQL Analysis
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
         category: "/language:${{matrix.language}}"

    # Save the CodeQL results zip to the repository
    - name: Save CodeQL results
      run: |    
        source_zip="/home/runner/work/_temp/codeql_databases/${{matrix.language}}.zip"
             
        # Set the personal access token as an environment variable for git
        export GH_TOKEN="${{ secrets.TOKEN }}"

        # Configure Git with your GitHub username and email
        git config --global user.email "${{ secrets.USER }}"
        git config --global user.name "${{ secrets.EMAIL }}"

        # Set up the Git credential helper to use your personal access token
        git config --global credential.helper store
        git config user.email
        git config user.name
        git credential-cache exit
        
        # Clone the repository to the runner
        git clone https://github.com/CodeApprover/Blazor-SqLite-DevOps.git

        # Copy the results to the repository directory
        mkdir -p Blazor-SqLite-DevOps/results/codeql
        cp "$source_zip" Blazor-SqLite-DevOps/results/codeql/
        
        # Change directory to the cloned repository
        cd Blazor-SqLite-DevOps
        
        # Stage results for commit.
        git add .

        # Commit your changes with a message
        git commit -m "Add CodeQL results for csharp [skip ci]"  # skip CI/CD pipelines

        # Push your changes to the repository
        git push origin "${{ github.ref }}"  # Push to the branch that triggered the workflow
