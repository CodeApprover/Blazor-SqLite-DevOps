name: "CodeQL"

on:
  push:
    branches: [ "main", "code-development", "code-production", "code-staging" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
  schedule:
    - cron: '29 20 * * 2'

jobs:
  analyze:
    name: Analyze
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners
    # Consider using larger runners for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby', 'swift' ]
        # Use only 'java' to analyze code written in Java, Kotlin or both
        # Use only 'javascript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality


    # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines.
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    # - run: |
    #     echo "Run, Build Application using script"
    #     ./location_of_script_within_repo/buildscript.sh

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

    # Save the CodeQL results zip to the repository
    - name: Save CodeQL results
      run: |    
        source_zip="/home/runner/work/_temp/codeql_databases/${{matrix.language}}.zip"
             
        # Set the personal access token as an environment variable for git
        export GH_TOKEN="${{ secrets.TOKEN }}"

        # Configure Git with your GitHub username and email
        git config --global user.email "${{ secrets.USER }}"
        git config --global user.name "${{ secrets.EMAIL }}"

        # Set up the Git credential helper to use your personal access token
        git config --global credential.helper store
        git config user.email
        git config user.name
        git credential-cache exit
        
        # Clone the repository to the runner
        git clone https://github.com/CodeApprover/Blazor-SqLite-DevOps.git

        # Copy the results to the repository directory
        mkdir -p Blazor-SqLite-DevOps/results/codeql
        cp "$source_zip" Blazor-SqLite-DevOps/results/codeql/
        
        # Change directory to the cloned repository
        cd Blazor-SqLite-DevOps
        
        # Stage results for commit.
        git add .

        # Commit your changes with a message
        git commit -m "Add CodeQL results for csharp [skip ci]"  # skip CI/CD pipelines

        # Push your changes to the repository
        git push origin "${{ github.ref }}"  # Push to the branch that triggered the workflow
