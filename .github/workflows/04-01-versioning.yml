---
name: Versioning

# Sets a version number for the SHA commint using SemVer 2.0 notation.
# Triggered by a repository_dispatch event "trigger-versioning".
# Executes for the code-development, code-staging and code-production branches.

# 1 - Checks out the repo using the SHA provided by the dispatch payload.
# 2 - Determines the latest version tag, and increments based on branch name (production, staging, or development).
# 3 - Cleans up redundant versioning tags, retaining only the latest 12.
# 4 - Tags the repo with the new version and pushes the tag.
# 5 - If successful, triggers the "trigger-deploy-docker" workflow.

# Exit codes:
# 42 - Error no tags to fetch.
# 43 - Failed to push tag deletion.
# 44 - Failed to push new tag.

on:
  repository_dispatch:
    types: Versioning

env:
  SHA: ${{ github.event.client_payload.sha }}
  CSPROJ: ${{ github.event.client_payload.csproj }}
  NEXT_WORKFLOW: Deploy Docker

jobs:
  version-and-tag:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    # un-comment to block execution
    #if: (github.actor != ${{ github.repository_owner }})

    steps:

    - name: Checkout SHA repository
      uses: actions/checkout@v3.6.0
      with:
        ref: ${{ env.SHA }}
        fetch-depth: 0
      continue-on-error: true

    - name: Configure Git User
      run: |
      
        git config user.name "${{ github.repository_owner}}"
        git config user.email "${{ vars.EMAIL }}"

    - name: Fetch Versioning Tags
      run: |
      
        git fetch --tags
        if [ -z "$(git tag)" ]; then
          echo "##[error] No tags found. Exiting."
          exit 42            
        fi

    - name: Clean Redundant Versioning Tags
      run: |
      
        echo "##[info] Deleting versioning tags skipping the 12 most recent."
        DELETE_TAGS=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n -12)
        for TAG in $DELETE_TAGS; do
            git tag -d $TAG
            git push origin --delete $TAG || (echo "##[error] Failed to push tag deletion." && exit 43)
        done

    - name: Increment SemVer 2.0 Versioning
      run: |
      
        # Get the latest tag based on SemVer
        latest_tag=$(git tag -l 'v*' | sort -V | tail -n1)
        echo "##[info] Latest Tag = $latest_tag"

        # Strip 'v' and SemVer split
        version=$(echo $latest_tag | sed 's/^v//')
        major=$(echo $version  | cut -d. -f1)
        minor=$(echo $version  | cut -d. -f2)
        patch=$(echo $version  | cut -d. -f3)
        
        # Increment for required environment
        branch=$(git branch --contains ${{ env.SHA }})
        case "$branch" in
          "code-production")
            major=$((major + 1))
            minor=0
            patch=0
            ;;
          "code-staging")
            minor=$((minor + 1))
            patch=0
            ;;
          "code-development")
            patch=$((patch + 1))
            ;;
        esac
        new_version="v$major.$minor.$patch"
        echo "##[debug] New version number = $new_version"
        echo "NEW_VERSION=$new_version" >> $GITHUB_ENV

    - name: Tag repository with New Version
      run: |
        git tag "${{ env.NEW_VERSION }}"
        git push origin "${{ env.NEW_VERSION }}" || (echo "##[error] Failed to push new tag ${{ env.NEW_VERSION }}" && exit 44)

    - name: Trigger Next Workflow
      if: success()
      run: |
      
        CMD=$(echo "curl -L -X POST" \
        "-H \"Accept: application/vnd.github+json\"" \
        "-H \"Authorization: Bearer ${{ secrets.AUTH }}\"" \
        "-H \"X-GitHub-Api-Version: 2022-11-28\"" \
        "https://api.github.com/repos/${{ github.repository }}/dispatches" \
        "-d '{\"event_type\":\"$trigger\"," \
        "\"client_payload\":{" \
        "\"sha\":\"${{ env.SHA }}\"," \
        "\"csproj\":\"${{ env.CSPROJ }}\"}'")

        retries=0
        while [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; do
            eval "$CMD"
            CURL_EXIT_CODE=$?
            if [[ $CURL_EXIT_CODE -ne 0 ]]; then
                echo "##[error] Curl command failed on attempt $((retries+1)) with exit code $CURL_EXIT_CODE"
                retries=$((retries+1))
                if [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; then
                    echo "##[warn] Retrying in ${{ vars.WAIT_SECONDS }} seconds..."
                    sleep ${{ vars.WAIT_SECONDS }}
                else
                    echo "##[error] Exhausted ${{ vars.MAX_RETRIES }} retries at ${{ vars.WAIT_SECONDS }} intervals."
                    echo "##[error] Failed to trigger ${{ env.NEXT_WORKFLOW }} workflow with CURL command: $CMD." && exit 90
                fi
            else
                break # successful curl
            fi    
        done
        echo "##[debug] CURL command: $CMD"
