---
name: Versioning

on:
  repository_dispatch:
    types: trigger-versioning

env:
  PROJ_NAME: "Blazor-SqLite-Golf-Club"

jobs:
  version-and-tag:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:

      - name: Checkout SHA repository
        uses: actions/checkout@v3.5.3
        with:
          ref: ${{ github.event.client_payload.sha }}
          fetch-depth: 0

      - name: Configure git user
        run: |
          git config user.name "CodeApprover"
          git config user.email "pucfada@pm.me"

      - name: Set branch name
        run: |
          trap 'echo "Error on line $LINENO: $BASH_COMMAND"; exit 1' ERR
          branch=$(git branch -r --contains ${{ github.event.client_payload.sha }} | grep 'origin/' | sed 's#origin/##' | head -n 1 | xargs)
          echo "Detected branch: $branch"
          
          if [[ -z "${branch}" ]]; then
            echo "Failed to extract branch name for SHA: ${{ github.event.client_payload.sha }}"
            exit 1 
          fi

          echo "BRANCH_NAME=${branch}" >> $GITHUB_ENV

      - name: Determine next version tag
        run: |
          trap 'echo "Error on line $LINENO: $BASH_COMMAND"; exit 1' ERR
          git fetch --tags

          if [ -z "$(git tag)" ]; then
            echo "No tags found. Exiting."
            exit 1
          fi

          # Find latest tag
          all_tags=$(git tag --sort=-creatordate | awk '{print "git show -s --format=%ci " $1}' | bash)
          latest_tag=$(echo "$all_tags_dates" | head -n 1 | sed 's/^v//')
          echo "Detected Tag = $latest_tag"

          if [ -z "$latest_tag" ]; then
            echo "No tags found. Exiting."
            exit 1
          fi
          
          # SemVar 2.0.0
          major_version=$(echo $latest_tag | cut -d. -f1 | tr -dc '0-9')
          minor_version=$(echo $latest_tag | cut -d. -f2)
          patch_version=$(echo $latest_tag | cut -d. -f3)
          echo "major_version = $major_version"
          echo "minor_version = $minor_version"
          echo "patch_version = $patch_version"

          # Imcrement required environment
          case "${{ env.BRANCH_NAME }}" in
            "code-production")
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            "code-staging")
              minor=$((minor + 1))
              patch=0
              ;;
            "code-development")
              patch=$((patch + 1))
              ;;
          esac

          new_version="v$major.$minor.$patch"
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV
          echo "New version number = $new_version"

      - name: Tag repository with new version
        run: |
          trap 'echo "Error on line $LINENO: $BASH_COMMAND"; exit 1' ERR
          git tag "${{ env.NEW_VERSION }}"
          git push origin "${{ env.NEW_VERSION }}"

      - name: Delete older tags
        run: |
          all_tags=$(git tag --sort=-creatordate | awk '{print "git show -s --format=%ci " $1}' | bash)
          while IFS= read -r line; do
            tag_to_delete=$(echo "$line" | awk '{print $NF}')
            if [ "$tag_to_delete" != "$highest_version" ]; then
                git tag -d "$tag_to_delete"
                git push origin --delete "$tag_to_delete"
            fi
          done <<< "$all_tags"

      - name: Release lock
        run: |
          trap 'echo "Error on line $LINENO: $BASH_COMMAND"; exit 1' ERR
          git pull origin "${{ env.BRANCH_NAME }}"
          git rm "${{ env.LOCK_FILE }}"
          git commit -m "Remove lock after versioning"
          git push origin "${{ env.BRANCH_NAME }}"

      - name: Trigger Docker Publish Workflow
        if: success()
        run: |
          CMD="curl -X POST -H \"Authorization: Bearer ${{ secrets.AUTH }}\" "
          CMD+="-H \"Accept: application/vnd.github.v3+json\" "
          CMD+="https://api.github.com/repos/${{ github.repository }}/dispatches "
          CMD+="-d '{\"event_type\": \"trigger-docker-publish\", "
          CMD+="\"client_payload\": {\"sha\": \"${{ github.event.client_payload.sha }}\"}}'"
          eval ${CMD}
