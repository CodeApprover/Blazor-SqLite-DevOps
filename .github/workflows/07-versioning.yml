---
name: "Versioning"

# Exit codes:
# 1: Error checking out the repository
# 2: Error fetching tags
# 3: Error pushing new tag

on:
  repository_dispatch:
    types: trigger-versioning

env:
  SHA: ${{ github.event.client_payload.sha }}
  SHA_BRANCH: ${{ github.event.client_payload.sha_branch }}
  CSPROJ: ${{ github.event.client_payload.csproj }}
  PROJ_NAME: "Blazor-SqLite-Golf-Club"
  CURRENT_TAG: ""
  NEW_VERSION: ""

jobs:
  version-and-tag:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    #if: (github.actor != 'CodeApprover')

    steps:

      - name: Checkout SHA repository
        uses: actions/checkout@v3.5.3
        with:
          ref: ${{ env.SHA }}
          fetch-depth: 0
        continue-on-error: true
      
      - name: Handle checkout error
        if: steps.checkout.outcome == 'failure'
        run: |
          echo "##[error] Error checking out the repository"
          exit 1

      - name: Report
        run: |
          date
          echo "SHA=${{ env.SHA }}"
          echo "Environment=$(echo ${{ env.SHA_BRANCH }} | sed 's#code-##')"
          echo "Branch=${{ env.SHA_BRANCH }}"
          echo "Committer=$(git log -1 --pretty=format:'%an')"

      - name: Configure GitHub Actions account
        run: |
          trap 'echo "##[error] Error on line $LINENO: $BASH_COMMAND"; exit 4' ERR
          git config user.name "CodeApprover"
          git config user.email "pucfada@pm.me"
          echo "##[debug] Git user configured."

      - name: Cleanup Redundant Versioning Tags
        run: |
          echo "##[info] Deleting versioning tags skipping the 12 most recent."
          DELETE_TAGS=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n -12)
          for TAG in $DELETE_TAGS; do
              git tag -d $TAG
              git push origin --delete $TAG
          done

      - name: Determine latest version tag
        run: |
          git fetch --tags
          if [ -z "$(git tag)" ]; then
            echo "##[debug] No tags found. Exiting."
            exit 2            
          fi

          # Get the latest tag based on SemVer -V
          tags=( $(git tag) )
          latest_major=0
          latest_minor=0
          latest_patch=0
          
          for tag in "${tags[@]}"; do
              current_major=$(echo $tag | cut -d. -f1 | sed 's/^v//')
              current_minor=$(echo $tag | cut -d. -f2)
              current_patch=$(echo $tag | cut -d. -f3)
          
              # Check major
              if (( current_major > latest_major )); then
                  latest_major=$current_major
                  latest_minor=$current_minor
                  latest_patch=$current_patch
              elif (( current_major == latest_major )); then
                  # Check minor
                  if (( current_minor > latest_minor )); then
                      latest_minor=$current_minor
                      latest_patch=$current_patch
                  elif (( current_minor == latest_minor )); then
                      # Check patch
                      if (( current_patch > latest_patch )); then
                          latest_patch=$current_patch
                      fi
                  fi
              fi
          done

          current_tag="v$latest_major.$latest_minor.$latest_patch"
          echo "##[debug] Current Tag = $current_tag"
          echo "CURRENT_TAG=${current_tag}" >> $GITHUB_ENV

      - name: Increment SemVer version number
        run: |
          # Strip 'v' and SemVer split
          version=$(echo "${{ env.CURRENT_TAG }}" | sed 's/^v//')
          major=$(echo $version  | cut -d. -f1)
          minor=$(echo $version  | cut -d. -f2)
          patch=$(echo $version  | cut -d. -f3)
          
          echo "##[debug] Current tag has major.minor.patch == $major.$minor.$patch"
          
          # Increment for required environment
          case "${{ env.SHA_BRANCH }}" in
            "code-production")
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            "code-staging")
              minor=$((minor + 1))
              patch=0
              ;;
            "code-development")
              patch=$((patch + 1))
              ;;
          esac
          new_version="v$major.$minor.$patch"
          echo "##[debug] New version number = $new_version"
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV

      - name: Tag repository with new version
        run: |
          git tag "${{ env.NEW_VERSION }}"
          git push origin "${{ env.NEW_VERSION }}"

      - name: Trigger Next Workflow # 08-deploy-docker.yml
        if: success()
        run: |
          trigger="trigger-deploy-docker"
          BASE="{\"event_type\": \"$trigger\", \"client_payload\": {"
          SHA="\"sha\": \"${{ env.SHA }}\","
          CSPROJ="\"csproj\": \"${{ env.CSPROJ }}\","
          BRANCH="\"sha_branch\": \"${{ env.SHA_BRANCH }}\""
          END="}}"

          curl -s -o /dev/null -X POST \
          -H "Authorization: Bearer ${{ secrets.AUTH }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d "$BASE$SHA$CSPROJ$BRANCH$END" \
          "https://api.github.com/repos/${{ github.repository }}/dispatches"

