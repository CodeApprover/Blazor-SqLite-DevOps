---
name: "Versioning"

# Sets a version number for the SHA commint using SemVer 2.0 notation.
# Triggered by a repository_dispatch event "trigger-versioning".
# Executes for the code-development, code-staging and code-production branches.

# 1 - Checks out the repo using the SHA provided by the dispatch payload.
# 2 - Determines the latest version tag, and increments based on branch name (production, staging, or development).
# 3 - Cleans up redundant versioning tags, retaining only the latest 12.
# 4 - Tags the repo with the new version and pushes the tag.
# 5 - If successful, triggers the "trigger-deploy-docker" workflow.

# Exit codes:
# 42 - Error no tags to fetch.
# 43 - Failed to push tag deletion.
# 44 - Failed to push new tag.

on:
  repository_dispatch:
    types: trigger-versioning

env:
  SHA: ${{ github.event.client_payload.sha }}
  SHA_BRANCH: ${{ github.event.client_payload.sha_branch }}
  CSPROJ: ${{ github.event.client_payload.csproj }}
  PROJ_NAME: "Blazor-SqLite-Golf-Club"
  CURRENT_TAG: ""
  NEW_VERSION: ""

jobs:
  version-and-tag:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    #if: (github.actor != 'CodeApprover')

    steps:

      - name: Checkout SHA repository
        uses: actions/checkout@v3.5.3
        with:
          ref: ${{ env.SHA }}
          fetch-depth: 0
        continue-on-error: true

      - name: Fetch Versioning Tags
        run: |
          git fetch --tags
          if [ -z "$(git tag)" ]; then
            echo "##[error] No tags found. Exiting."
            exit 42            
          fi

      - name: Clean Redundant Versioning Tags
        run: |
          git config user.name "CodeApprover"
          git config user.email "pucfada@pm.me"
          echo "##[info] Deleting versioning tags skipping the 12 most recent."
          DELETE_TAGS=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n -12)
          for TAG in $DELETE_TAGS; do
              git tag -d $TAG
              git push origin --delete $TAG || (echo "##[error] Failed to push tag deletion." && exit 43)
          done

      - name: Increment SemVer 2.0 version number
        run: |
          # Get the latest tag based on SemVer
          latest_tag=$(git tag -l 'v*' | sort -V | tail -n1)
          echo "##[info] Latest Tag = $latest_tag"

          # Strip 'v' and SemVer split
          version=$(echo $latest_tag | sed 's/^v//')
          major=$(echo $version  | cut -d. -f1)
          minor=$(echo $version  | cut -d. -f2)
          patch=$(echo $version  | cut -d. -f3)
          
          # Increment for required environment
          case "${{ env.SHA_BRANCH }}" in
            "code-production")
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            "code-staging")
              minor=$((minor + 1))
              patch=0
              ;;
            "code-development")
              patch=$((patch + 1))
              ;;
          esac
          new_version="v$major.$minor.$patch"
          echo "##[debug] New version number = $new_version"
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV

      - name: Tag repository with new version
        run: |
          git tag "${{ env.NEW_VERSION }}"
          git push origin "${{ env.NEW_VERSION }}" || (echo "##[error] Failed to push new tag ${{ env.NEW_VERSION }}" && exit 44)

      - name: Trigger Next Workflow # 08-deploy-docker.yml
        if: success()
        run: |
          trigger="trigger-deploy-docker"
          BASE="{\"event_type\": \"$trigger\", \"client_payload\": {"
          SHA="\"sha\": \"${{ env.SHA }}\","
          CSPROJ="\"csproj\": \"${{ env.CSPROJ }}\","
          BRANCH="\"sha_branch\": \"${{ env.SHA_BRANCH }}\""
          END="}}"

          curl -s -o /dev/null -X POST \
          -H "Authorization: Bearer ${{ secrets.AUTH }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d "$BASE$SHA$CSPROJ$BRANCH$END" \
          "https://api.github.com/repos/${{ github.repository }}/dispatches"
