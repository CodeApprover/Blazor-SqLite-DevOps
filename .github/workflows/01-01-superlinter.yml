---
name: "Superlinter"  # https://github.com/super-linter/super-linter

# ${{ github.workflow }} Overview
#
# This workflow lints the codebase using SuperLinter.
#
# The super-linter job has 3 main phases:
# 1. Environment Setup: Checks out the code and determines paths for linting configurations.
# 2. Linting: Utilizes the SuperLinter to lint the codebase. This linter is a combination of multiple linters for different 
#    languages and tools into one package.
# 3. Trigger Subsequent Workflow: If linting is successful, it initiates the next workflow, "Versioning."
#
# Exit Codes:
#
# 90 - Failed to trigger the next workflow after exhausting retries.

on:
  repository_dispatch:
    types: SuperLinter

env:
  SHA: ${{ github.event.client_payload.sha }}
  SHA_BRANCH: ${{ github.event.client_payload.sha_branch }}
  CSPROJ: ${{ github.event.client_payload.csproj }}
  NEXT_WORKFLOW: Versioning

jobs:

  super-linter:

    name: SuperLinter
    runs-on: ubuntu-latest
    timeout-minutes: 15
    #if: (github.actor != 'CodeApprover')

    steps:

      - name: Checkout code
        uses: actions/checkout@v3.5.3
        with:
          fetch-depth: 0

      - name: Print JSCPD config path
        run: echo "JSCPD config path is ${{ github.workspace }}/.jscpd.json"

      - name: Lint code-base
        uses: super-linter/super-linter@v5
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: ${{ github.ref }}
          GITHUB_TOKEN: ${{ secrets.AUTH }}
          JSCPD_CONFIG_FILE: .jscpd.json

      - name: Trigger Next Workflow
        if: success()
        run: |

          CMD="curl -L -X POST "
          CMD+="-H \"Accept: application/vnd.github+json\" "
          CMD+="-H \"Authorization: Bearer ${{ secrets.AUTH }}\" "
          CMD+="-H \"X-GitHub-Api-Version: 2022-11-28\" "
          CMD+="https://api.github.com/repos/${{ github.repository }}/dispatches "
          CMD+="-d '{\"event_type\":\"${{ env.NEXT_WORKFLOW }}\","
          CMD+="\"client_payload\":{"
          CMD+="\"sha\":\"${{ github.sha }}\","
          CMD+="\"csproj\":\"${{ env.CSPROJ }}\"}'"

          retries=0
          while [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; do
              eval "$CMD"
              CURL_EXIT_CODE=$?
              if [[ $CURL_EXIT_CODE -ne 0 ]]; then
                  echo "##[error] Curl command failed on attempt $((retries+1)) with exit code $CURL_EXIT_CODE"
                  retries=$((retries+1))
                  if [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; then
                      echo "##[warn] Retrying in ${{ vars.WAIT_SECONDS }} seconds..."
                      sleep ${{ vars.WAIT_SECONDS }}
                  else
                      echo "##[error] Exhausted ${{ vars.MAX_RETRIES }} retries at ${{ vars.WAIT_SECONDS }} intervals."
                      echo "##[error] Failed to trigger ${env.NEXT_WORKFLOW} workflow with CURL command: $CMD." && exit 90
                  fi
              else
                  break # successful curl
              fi
          done
          echo "##[debug] CURL command: $CMD"
