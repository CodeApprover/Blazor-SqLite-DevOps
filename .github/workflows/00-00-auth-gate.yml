######################################
# Workflow: Authentication Gate

# Description:
# This workflow handles commit authentication and validation before initiating subsequent workflows.
# It sanitises user details, checks branch validity, ensures commit uniqueness, inspects for .csproj and .lock files
# and updates Gists with the SHA. Upon successful validation, the next workflow is triggered.

# Trigger: Activated by every push to any branch.

# Logical Flow (Steps):
# 1.  Sanitise and validate untrusted user-controlled details.
# 2.  Validate branch names.
# 3.  Revert commits if the branch name is unknown.
# 4.  Checkout repository using the commit SHA.
# 5.  Validate the SHA checkout.
# 6.  Ensure commit is unique to existing remote SHA branches.
# 7.  Validate the existence of a .csproj file.
# 8.  Check for an existing gist with an SHA i.e. a lockfile.
# 9.  Update Gist with SHA.
# 10. Trigger the next workflow if all checks pass.

# Exit Codes:
# 20 - Username contains invalid characters.
# 21 - Email format is invalid.
# 22 - Commit message contains invalid characters.
# 23 - Unknown branch.
# 24 - Failed to reset repository.
# 25 - Failed to push reversion.
# 26 - SHA checkout failure.
# 27 - No branches found containing the commit.
# 28 - Multiple branches contain the commit SHA.
# 29 - Failed to find the .csproj file.
# 30 - Failed to fetch the branch.
# 31 - Lock file found in repository.
# 32 - Failed to update Gist with SHA.
# 33 - Gist content mismatch.
# 34 - Failed to send success event.
# 35 - All retries exhausted. Failed to trigger the next workflow.

######################################

---
name: Authentication Gate

on:
  push:

env:
  NEXT_WORKFLOW: Cache Dependencies

jobs:
  authentication-gate:
    name: Authentication Gate
    runs-on: ubuntu-latest
    timeout-minutes: 15

    #if: (github.actor != ${{ github.repository_owner }}) # Ignore DevOps

    steps:

    - name: Sanitise and Validate User Details # Step 1
      run: |
 
        echo "##[info][sanitise] Starting security sanitisation and validation."
        echo "##[debug][sanitise] Sanitising username as github username."
        # Allows lowercase letters, digits,
        # optional hyphens within words
        # and single spaces between words.
        # Words must start with a letter or digit
        # and hyphens can't be at the start or end.
        regex_pattern="^([a-z0-9]+(-?[a-z0-9]+)*(\s[a-z0-9]+(-?[a-z0-9]+)*)*)$"
        username=$(echo ${{ github.event.head_commit.author.name }} | tr '[:upper:]' '[:lower:]')
        if ! [[ "$username" =~ ${regex_pattern} ]] || [[ "$username" == -* ]]; then
            echo "##[error][sanitise] Username contains invalid characters"
            exit 20
        fi
        echo "##[debug][sanitise] Sanitising email address."
        # Allows uppercase and lowercase letters, digits, periods,
        # underscores, percent signs, plus signs and hyphens in the user name part.
        # Must contain an '@' symbol separating the user name and domain parts.
        # Domain part allows letters, digits, periods and hyphens.
        # Must end with top-level domain (TLD) 2 to 4 letters long.
        regex_pattern="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$"
        if ! [[ "${{ github.event.head_commit.author.email }}" =~ ${regex_pattern} ]]; then
            echo "##[error][sanitise] Email format is invalid"
            exit 21
        fi
        echo "##[debug][sanitise] Sanitising commit message."
        forbidden_chars="|*]>)}<{([$"
        echo "##[debug][sanitise] Forbidden characters: $forbidden_chars"
        commit_msg="${{ github.event.head_commit.message }}"
        for (( i=0; i<${#forbidden_chars}; i++ )); do
            char="${forbidden_chars:$i:1}"
            echo "##[debug][sanitise] Checking for forbidden char $char"
            if [[ $commit_msg == *"$char"* ]]; then
                echo "##[error][sanitise] Commit message ${commit_msg} contains invalid character $char."
                exit 22
            fi
        done
        echo "##[info][sanitise] Sanitisation and validation completed successfully."

    - name: Validate Branch Name # Step 2
      run: |
 
        ALLOWED_BRANCHES=("code-development" "code-staging" "code-production" "main")
        REF=${{ github.ref }}
        BRANCH_NAME=${REF#refs/heads/}
        echo "##[debug][branch] Branch: $BRANCH_NAME"
        branch_found=false
        echo "##[debug][branch] Looping through allowed branches to check if the current branch is valid."
        for branch in "${ALLOWED_BRANCHES[@]}"
        do
          if [[ "$BRANCH_NAME" == "$branch" ]]; then
            echo "##[info][branch] Branch $BRANCH_NAME is valid."
            echo "SHA_BRANCH=$BRANCH_NAME" >> $GITHUB_ENV
            branch_found=true
            break
          fi
        done
        if [ "$branch_found" = false ]; then
          echo "##[error][branch] Unknown branch: $BRANCH_NAME. Exiting."
          exit 23
        fi

    - name: Revert Unknown Branch Commits # Step 3
      if: env.SHA_BRANCH == ''
      run: |
 
        git config user.name "${{ github.repository_owner }}"
        git config user.email "${{ vars.EMAIL }}"
        COMMIT_COUNT=$(git rev-list --count HEAD)
        if [[ $COMMIT_COUNT -le 1 ]]; then
          echo "##[error][revert] Only one commit in this branch. Nowhere to revert to."
          exit 0
        fi
        ORIGINAL_COMMITTER=$(git log --pretty=format:'%an' ${{ github.sha }} | head -n 1)
        if [[ "$ORIGINAL_COMMITTER" == "${{ github.repository_owner }}" ]]; then
          echo "##[warn][revert] Last commit was by repository owner (possibly an automated revert) - skipping further actions."
          exit 0
        fi
        git reset HEAD --hard
        if [[ $? -ne 0 ]]; then
          echo "##[error][revert] Failed to reset repository."
          exit 24
        fi
        if git push origin +$BRANCH_NAME; then
          echo "##[debug][revert] Pushed reversion."
        else
          echo "##[error][revert] Failed to push reversion."
          exit 25
        fi
        MESSAGE_TITLE="Reverted ${{ github.sha }} --> Unknown Branch"
        MESSAGE_BODY=$(echo "@${{ github.repository_owner }},
          Branch: $BRANCH_NAME
          SHA: ${{ github.sha }}
          Committer: $ORIGINAL_COMMITTER
          Commit Message: $COMMIT_MESSAGE
          ${{ github.sha }} committed to an unknown branch, was reverted.
          Thank you for your contribution.")
        echo "##[debug][revert] MESSAGE_TITLE: $MESSAGE_TITLE"
        echo "##[debug][revert] MESSAGE_BODY: $MESSAGE_BODY"
        create_issue() {
          local title="$1"
          local body="$2"
          payload=$(jq -n \
            --arg title "$title" \
            --arg body "$body" \
            '{title: $title, body: $body}')
          CURL_CMD=$(echo "curl -X POST" \
            "-H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\"" \
            "-H \"Accept: application/vnd.github.v3+json\"" \
            "https://api.github.com/repos/${{ github.repository }}/issues" \
            "-d '$payload'")
          echo "##[debug][revert] ISSUE COMMAND: $CURL_CMD"
          eval "$CURL_CMD"
        }
        echo "##[debug][revert] Creating issue in the repository with the constructed title and body."
        create_issue "$MESSAGE_TITLE" "$MESSAGE_BODY"
        echo "##[warn][revert] Last commit was reverted."
        exit 0

    - name: Checkout SHA Repository # Step 4
      uses: actions/checkout@v3.6.0
      with:
        ref: ${{ github.sha }}
        fetch-depth: 0

    - name: Validate Checkout # Step 5
      run: |
 
        if [ $? -ne 0 ]; then
          echo "##[error][checkout] SHA checkout failure ${{ github.sha }}"
          exit 26
        fi

    - name: Check Commit Uniqueness # Step 6
      run: |
 
        BRANCHES_CONTAINING_COMMIT=$(git branch -r --contains ${{ github.sha }})
        echo "##[debug][unique] BRANCHES_CONTAINING_COMMIT: $BRANCHES_CONTAINING_COMMIT"
        BRANCH_COUNT=$(echo "$BRANCHES_CONTAINING_COMMIT" | wc -l)
        echo "##[debug][unique] BRANCH_COUNT: $BRANCH_COUNT"
        if [[ $BRANCH_COUNT -eq 0 ]]; then
          echo "##[warn][unique] No branches found containing the commit ${{ github.sha }}."
          exit 27
        elif [[ $BRANCH_COUNT -ne 1 ]]; then
          echo "##[error][unique] Multiple branches contain the commit SHA ${{ github.sha }}."
          exit 28
        fi
    - name: Validate .csproj File # Step 7
      run: |
 
        CSPROJ_PATH=$(find . -name "*.csproj" | head -n 1)
        echo "##[debug][csproj] CSPROJ_PATH: $CSPROJ_PATH"
        if [[ -z "$CSPROJ_PATH" ]]; then
          echo "##[error][csproj] Failed to find the .csproj file $CSPROJ_PATH."
          exit 29
        fi
        echo "CSPROJ=$CSPROJ_PATH" >> $GITHUB_ENV

    - name: Check SHA Gist for Lock # Step 8
      run: |
 
        retries=0
        while [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; do
          # Fetch the content of the auth-gate.sha Gist
          content=$(curl -sL \
            -H "Authorization: token ${{ secrets.AUTH }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/gists/${{ vars.SHA_GIST }}")
          sha_content=$(echo "$content" | jq '.files["lockfile.lock"].content' -r)
          echo "##[debug][gist-lock] Lockfile content: ${sha_content}"
        
          # Check if Gist content is 'unlocked' or 'null'
          if [[ "$sha_content" == "unlocked" || "$sha_content" == "null" ]]; then
            echo "##[info][gist-lock] No existing lock detected. Proceeding..."
            break
          else
            echo "##[warn][gist-lock] Lock detected. Waiting and retrying..."
            sleep $((${{ vars.WAIT_MINUTES }} * 60))
            retries=$((retries+1))
          fi
        done
      
          if [[ $retries -eq ${{ vars.MAX_RETRIES }} ]]; then
            echo "##[error][gist-lock] Lock persisted after ${{ vars.MAX_RETRIES }} retries. Exiting."
            exit 31
          fi
    
    # Step 9 - Set Lock
    - name: Set SHA Gist as Locked # Step 9
      run: |
 
        create_response=$(curl -s -X PATCH \
          -H "Authorization: token ${{ secrets.AUTH }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d "{\"files\": {\"lockfile.lock\": {\"content\": \"${{ github.sha }}\"}}}" \
          "https://api.github.com/gists/${{ vars.SHA_GIST }}")
        gist_id=$(echo "$create_response" | jq -r '.id')
        if [[ -z "$gist_id" ]]; then
          echo "Failed to set lock."
          exit 32
        else
          echo "Lock set successfully."
        fi

    - name: Trigger Next Workflow and Dispatch Success Event # Step 10
      if: success()
      run: |
 
        echo "##[info][trigger] Initiating the next workflow: ${{ env.NEXT_WORKFLOW }}."
        SUCCESS_CMD=$(echo "curl -L -X POST \
          -H \"Accept: application/vnd.github+json\" \
          -H \"Authorization: Bearer ${{ secrets.AUTH }}\" \
          https://api.github.com/repos/${{ github.repository }}/dispatches \
          -d '{\"event_type\":\"Authentication Gate Success\", \
          \"client_payload\":{ \
          \"message\":\"Workflow completed successfully\"}}'")
        CMD=$(echo "curl -L -X POST \
          -H \"Accept: application/vnd.github+json\" \
          -H \"Authorization: Bearer ${{ secrets.AUTH }}\" \
          https://api.github.com/repos/${{ github.repository }}/dispatches \
          -d '{\"event_type\":\"${{ env.NEXT_WORKFLOW }}\", \
          \"client_payload\":{ \
          \"sha\":\"${{ github.sha }}\", \
          \"sha_branch\":\"${{ env.SHA_BRANCH }}\", \
          \"csproj\":\"${{ env.CSPROJ }}\"}'")
        retries=0
        while [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; do
          eval "$SUCCESS_CMD"
          CURL_EXIT_CODE=$?
          if [[ $CURL_EXIT_CODE -ne 0 ]]; then
            echo "##[error][trigger] Failed to send success event."
            echo "##[error][trigger] Attempt $((retries+1)). Curl exit code: $CURL_EXIT_CODE"
          else
            echo "##[info][trigger] Success event dispatched."
          fi
          eval "$CMD"
          CURL_EXIT_CODE=$?
          if [[ $CURL_EXIT_CODE -ne 0 ]]; then
            echo "##[error][trigger] Failed to trigger ${{ env.NEXT_WORKFLOW }}."
            echo "##[error][trigger] Attempt $((retries+1)). Curl exit code: $CURL_EXIT_CODE"
          else
            echo "##[info][trigger] ${{ env.NEXT_WORKFLOW }} successfully triggered."
            break
          fi
          retries=$((retries+1))
          if [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; then
            echo "##[warn][trigger] Retrying in ${{ vars.WAIT_SECONDS }} seconds..."
            sleep ${{ vars.WAIT_SECONDS }}
          else
            echo "##[error][trigger] All retries exhausted."
            echo "##[error][trigger] Failed to trigger ${{ env.NEXT_WORKFLOW }} and/or dispatch success event."
            exit 35
          fi
        done
