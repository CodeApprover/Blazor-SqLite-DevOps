    - name: Check and Set SHA Gist as Locked # Step 9
      run: |
        echo "##[debug][gist-lock] Checking for the existence of SHA gist content."

        # Fetch all gists to check if one with the filename "auth-gate.sha" exists.
        all_gists=$(curl -sL \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: token ${{ secrets.AUTH }}" \
          https://api.github.com/gists)
        gist_id=$(echo "$all_gists" | jq '.[] | select(.files["auth-gate.sha"]) | .id' -r)

        if [[ -z "$gist_id" ]]; then
          # If no gist named "auth-gate.sha" exists, create it
          response=$(curl -sL -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token ${{ secrets.AUTH }}" \
            https://api.github.com/gists \
            -d '{ "files": { "auth-gate.sha": { "content": "" } }, "description": "SHA Gist", "public": false }')
          gist_id=$(echo "$response" | jq '.id' -r)
        fi

        # Now, proceed with updating the Gist with the current SHA to set the lock.
        CURL_CMD=$(echo "curl -L \
          -X PATCH \
          -H \"Accept: application/vnd.github+json\" \
          -H \"Authorization: token ${{ secrets.AUTH }}\" \
          https://api.github.com/gists/$gist_id \
          -d '{\"files\": {\"auth-gate.sha\": {\"content\": \"${{ github.sha }}\"}}}'")

        retries=0
        while [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; do
          eval "$CURL_CMD"
          if [[ $? -ne 0 ]]; then
            echo "##[error][gist] Failed to update Gist with SHA. Attempt $((retries+1))."
          else
            content=$(curl -L \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: token ${{ secrets.AUTH }}" \
              https://api.github.com/gists/$gist_id | jq '.files["auth-gate.sha"].content' -r)

            if [ "$content" == "${{ github.sha }}" ]; then
              echo "##[debug][gist] Gist updated successfully."
              break
            else
              echo "##[error][gist] Gist content mismatch. Expected: ${{ github.sha }}. Got: $content. Attempt $((retries+1))."
            fi
          fi

          retries=$((retries+1))
          if [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; then
            echo "##[warn][gist] Retrying in ${{ vars.WAIT_SECONDS }} seconds..."
            sleep ${{ vars.WAIT_SECONDS }}
          else
            echo "##[error][gist] All retries exhausted."
            echo "##[error][gist] Failed to update Gist with SHA."
            exit 32
          fi
        done
