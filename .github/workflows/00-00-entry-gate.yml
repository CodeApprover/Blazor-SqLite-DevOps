---
name: Authenticate Uaer

# ${{ github.workflow }} Overview
#
# This GitHub Actions workflow acts as a protective shield, ensuring only authenticated and approved commits pass through.
#
# There are two main jobs:
# 1. Authenticate User: Validates the authenticity of the user committing to the repository.
# 2. Instigate Workflows: Once authenticated, this job prepares the ground for subsequent workflows.
#
# The process starts by sanitising the user details, ensuring no unsanctioned inputs exist.
# It then validates the commit source and retrieves the commit.
# The workflow subsequently confirms the branch details, locates specific project files, and reports on the commit's metadata.
#
# The second job then checks for any existing workflows and possible lock files that could cause issues with concurrency.
# If all goes well, an API call triggers the next workflow.
#
# Exit Codes:
#
# 10 - Username contains invalid characters.
# 11 - Username cannot start with a hyphen.
# 12 - Email format is invalid.
# 13 - Commit message contains invalid characters.
# 14 - Branch name is not recognised.
# 15 - Approved team variable is not set for the current branch.
# 16 - Committer is not authorised.
# 17 - SHA checkout failure.
# 18 - Branch associated with SHA does not exist in the repository.
# 19 - Failure locating the .csproj file.
# 20 - Another workflow is still running after max retries.
# 21 - Persistent presence of lock file after max retries.
# 90 - Failed to trigger next workflow.

on:
  push:
    branches: ["code-development", "code-production", "code-staging", "main"]

env:
  NEXT_WORKFLOW: Cache Dependencies

jobs:

  authenticate-user:
    name: Authenticate User
    runs-on: ubuntu-latest
    timeout-minutes: 15

    # un-comment to block execution
    #if: (github.actor != ${{ github.repository_owner }})

    steps:

    - name: Sanitise and Validate Untrusted User-Controlled Details
      run: |
        echo "##[info] Starting security sanitisation and validation."

        if [[ ! "${{ github.event.head_commit.author.name }}" =~ ^[a-zA-Z0-9-]+$ ]]; then
            echo "##[error] Username contains invalid characters. Exiting" && exit 10
        fi

        if [[ "${{ github.event.head_commit.author.name }}" == -* ]]; then
            echo "##[error] Username cannot start with a hyphen. Exiting" && exit 11
        fi

        if ! [[ "${{ github.event.head_commit.author.email }}" =~ ^[a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$ ]]; then
            echo "##[error] Email format is invalid. Exiting" && exit 12
        fi

        if [[ ! "${{ github.event.head_commit.message }}" =~ ^[a-zA-Z0-9-_.\n ,;?!]+ ]]; then
            echo "##[error] Commit message contains invalid characters. Exiting" && exit 13
        fi

        echo "##[info] Sanitisation and validation completed successfully."
        echo "COMMIT_AUTHOR_NAME=${{ github.event.head_commit.author.name }}" >> $GITHUB_ENV
        echo "COMMIT_AUTHOR_EMAIL=${{ github.event.head_commit.author.email }}" >> $GITHUB_ENV
        echo "COMMIT_MESSAGE=${{ github.event.head_commit.message }}" >> $GITHUB_ENV

    - name: Validate Committer
      if: success()
      run: |
        echo "##[info] Authorising comitter ${{ env.COMMIT_AUTHOR_NAME }}."
        branch=$(git branch --contains ${{ env.SHA }})
        echo "##[info] Running on branch $branch."

        if [[ "$branch" == "code-development" ]]; then
            APPROVED_TEAM="${{ github.repository_owner }},${{ secrets.DEVELOPMENT_TEAM }}"
        elif [[ "$branch" == "code-staging" ]]; then
            APPROVED_TEAM="${{ github.repository_owner }},${{ secrets.STAGING_TEAM }}"
        elif [[ "$branch" == "code-production" ]]; then
            APPROVED_TEAM="${{ github.repository_owner }},${{ secrets.PRODUCTION_TEAM }}"
        elif [[ "$branch" == "main" ]]; then
            APPROVED_TEAM="${{ github.repository_owner }}"
        else
            echo "##[error] Branch name $branch is not recognised." && exit 14
        fi

        if [[ "$APPROVED_TEAM" == "" ]]; then
            echo "##[error] APPROVED TEAM $APPROVED_TEAM is not set for branch $branch" && exit 15
        fi

        if ! echo "$APPROVED_TEAM" | grep -qiE "(^|,)$COMMIT_AUTHOR_NAME(,|$)"; then
            echo "##[error] Committer $COMMIT_AUTHOR_NAME is not authorised." && exit 16
        fi

    - name: Checkout SHA Repository
      id: checkout-sha
      uses: actions/checkout@v3.6.0
      with:
        ref: ${{ github.sha }}
        fetch-depth: 0 # deep fetch

    - name: Validate SHA
      run: |
        echo "##[info] Validating SHA checkout."
        if [[ "${{ steps.checkout-sha.outcome }}" == "failure" ]]; then
            echo "##[error] SHA checkout FAIL for ${{ env.SHA }}" && exit 17
        fi
        echo "##[info] Successfully validated SHA checkout for ${{ env.SHA }}."

    - name: Validate SHA Branch
      run: |
        echo "##[info] Validating SHA branch name."
        branch=$(git branch --contains ${{ env.SHA }})
        if git show-ref --verify --quiet "refs/remotes/origin/$branch"; then
            echo "##[info] Branch $branch detected in ${{ github.repository }}"
        else
            echo "##[error] Branch $branch does not exist in ${{ github.repository }}" && exit 18
        fi
        echo "##[info] Successfully validated SHA branch name $branch."
        echo "SHA_BRANCH=$branch" >> $GITHUB_ENV

    - name: Validate .csproj
      run: |
        echo "##[info] Validating .csproj file."
        DIR_PATH="${{ github.workspace }}/$(echo "${{ env.SHA_BRANCH }}" | sed 's/^code-//')/${{ vars.PROJECT_NAME }}"
        CSPROJ="${DIR_PATH}/${{ vars.PROJECT_NAME }}.csproj"
        if [[ ! -f "$CSPROJ" ]]; then
            echo "##[error] Failure locating .csproj file within the directory $DIR_PATH" && exit 19
        fi
        echo "##[info] Successfully validated dotnet .csproj file $CSPROJ."
        echo "CSPROJ=$CSPROJ" >> $GITHUB_ENV

    - name: Report Commit Details
      run: |
        echo "Reporting details of the commit, GitHub environment and runner specifics."

        echo "-------------------------------------------------"
        echo "----- COMMIT DETAILS ----------------------------"
        echo "-------------------------------------------------"
        echo "Branch Name: ${{ env.SHA_BRANCH }}"
        echo "Commit SHA: ${{ github.sha }}"
        echo "Commit Message: $COMMIT_MESSAGE"
        echo "Commit Author: $COMMIT_AUTHOR_NAME"
        echo "Committer Email: $COMMIT_AUTHOR_EMAIL"
        echo "Pusher Name: ${{ github.event.pusher.name }}"
        echo "Actor: ${{ github.actor }}"

        echo "-------------------------------------------------"
        echo "----- GITHUB ENVIRONMENT & WORKFLOW DETAILS -----"
        echo "-------------------------------------------------"
        echo "Date: $(date)"
        echo "Event Name: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "Repository: ${{ github.repository }}"
        echo "Repository Owner: ${{ github.repository_owner }}"
        echo "Workflow Name: ${{ github.workflow }}"
        echo "GitHub Server URL: ${{ github.server_url }}"
        echo "GitHub API URL: ${{ github.api_url }}"
        echo "GitHub GraphQL URL: ${{ github.graphql_url }}"
        echo "Runner OS: ${{ runner.os }}"
        echo "Workspace: ${{ github.workspace }}"
        [ ! -z "${{ github.base_ref }}" ] && echo "Base Ref: ${{ github.base_ref }}"
        [ ! -z "${{ github.head_ref }}" ] && echo "Head Ref: ${{ github.head_ref }}"

        echo "-------------------------------------------------"
        echo "----- JOB, RUN AND RUNNER DETAILS ---------------"
        echo "-------------------------------------------------"
        echo "Job Name: ${{ github.job }}"
        echo "Event ID: ${{ github.run_id }}"
        echo "Run Number: ${{ github.run_number }}"
        echo "Runner Name: ${{ runner.name }}"
        echo "Runner Label: ${{ runner.label }}"
        echo "Runner Tool Cache: ${{ runner.tool_cache }}"
        echo "Runner Temp Directory: ${{ runner.temp }}"
        echo "GitHub Event Before: ${{ github.event.before }}"
        echo "GitHub Event After: ${{ github.event.after }}"
        echo "---------------------------------------"

  instigate-workflows:
    name: Instigate Workflow Runs
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: authenticate-user

    steps:
    
    - name: Check Concurrency
      run: |
        echo "##[info] Requesting non-concurrent slot."
        retries=0

        while [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; do
            # Make API call to check for any in-progress workflows in the repository using curl
            response=$(curl -L \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.AUTH }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/${{ github.repository }}/actions/runs)
            count=$(echo "$response" | jq '.workflow_runs | map(select(.status == "in_progress")) | length')

            # Check if another instance is running and if so retry
            if [[ $count -eq 0 ]]; then
                echo "##[info] No other workflow is running - continuing."
                break
            else
                retries=$((retries+1))
                if [[ $retries -eq ${{ vars.MAX_RETRIES }} ]]; then
                    echo "##[error] Reached (${{ vars.MAX_RETRIES }}) max retries at ${{ vars.WAIT_MINUTES }} intervals."
                    echo "##[error] Another workflow from .github/workflows is still running." && exit 20
                fi
                echo "##[warn] Another workflow is running. Waiting for ${{ vars.WAIT_MINUTES }} minutes before retry $retries of ${{ vars.MAX_RETRIES }}."
                sleep $((${{ vars.WAIT_MINUTES }} * 60))
            fi
        done

    - name: Check for Existant Lock File
      run: |
        echo "##[info] Checking for lock file."
        if [[ ${{ env.SHA_BRANCH }} == "code-"* ]]; then
            branch=${{ env.SHA_BRANCH }}
            lock_file=${branch#code-}.lock
        elif [[ $branch == "main" ]]; then
            lock_file=.main.lock
        fi
        retries=0
        while [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; do
            git fetch origin ${{ env.SHA_BRANCH }} 
            git checkout ${{ env.SHA_BRANCH }}    
            commits_before_sha=$(git rev-list ${{ env.SHA }}~1..${{ env.SHA_BRANCH }}  --)
            if git ls-tree -r $commits_before_sha | grep "$lock_file"; then
                retries=$((retries+1))
                locked_sha=$(cat "$lock_file")
                echo "##[warn] Lock file $LOCK_FILE found for commit SHA $locked_sha."
                echo "##[warn] Waiting ${{ vars.WAIT_MINUTES }} minutes before retry $retries of ${{ vars.MAX_TRIES }}."
                sleep $((${{ vars.WAIT_MINUTES }} * 60))
            else
                echo "##[info] Lock file $LOCK_FILE check passed - continuing."
                break
            fi
            if [[ $retries -eq ${{ vars.MAX_RETRIES }} ]]; then
                echo "##[error] Reached (${{ vars.MAX_RETRIES }}) max retries at ${{ vars.WAIT_MINUTES }} intervals."
                echo "##[error] Lock file $lock_file presence presists." && exit 21
            fi
        done

    - name: Trigger Next Workflow
      if: success()
      run: |
        CMD="curl -L -X POST "
        CMD+="-H \"Accept: application/vnd.github+json\" "
        CMD+="-H \"Authorization: Bearer ${{ secrets.AUTH }}\" "
        CMD+="-H \"X-GitHub-Api-Version: 2022-11-28\" "
        CMD+="https://api.github.com/repos/${{ github.repository }}/dispatches "
        CMD+="-d '{\"event_type\":\"${{ env.NEXT_WORKFLOW }}\","
        CMD+="\"client_payload\":{"
        CMD+="\"sha\":\"${{ github.sha }}\","
        CMD+="\"csproj\":\"${{ env.CSPROJ }}\"}'"

        retries=0
        while [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; do
            eval "$CMD"
            CURL_EXIT_CODE=$?
            if [[ $CURL_EXIT_CODE -ne 0 ]]; then
                echo "##[error] Curl command failed on attempt $((retries+1)) with exit code $CURL_EXIT_CODE"
                retries=$((retries+1))
                if [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; then
                    echo "##[warn] Retrying in ${{ vars.WAIT_SECONDS }} seconds..."
                    sleep ${{ vars.WAIT_SECONDS }}
                else
                    echo "##[error] Exhausted ${{ vars.MAX_RETRIES }} retries at ${{ vars.WAIT_SECONDS }} intervals."
                    echo "##[error] Failed to trigger ${env.NEXT_WORKFLOW} workflow with CURL command: $CMD." && exit 90
                fi
            else
                break # successful curl
            fi    
        done
        echo "##[debug] CURL command: $CMD"
