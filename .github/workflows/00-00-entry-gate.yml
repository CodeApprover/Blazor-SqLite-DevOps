---
name: Authenticate User

# ${{ github.workflow }} Overview
#
# This entry gate workflow aims to act as a protection layer for the repository.
# It ensures that only authenticated and authorized commits pass through.
#
# Event Trigger: The workflow is triggered on a push event to one of four specified branches:
# 'code-development', 'code-staging', 'code-production' and 'main'
#
# The Authenticate User Job validates the authenticity of the committer and the commit.
#
# 1.  Sanitise and Validate Untrusted User-Controlled Details:
#     Validates the format and content of the username, email, and commit message for security concerns.
# 2.  Checkout SHA Repository: Checks out the code at the specified SHA.
# 3.  Validate SHA: Ensures that the checkout operation was successful.
# 4.  Validate .csproj: Checks the existence of a .NET project file.
# 5.  Validate SHA Branch: Ensures the specified branch exists in the repository.
# 6.  Validate Committer: Validates if the committer is authorized to commit on the branch they're trying to push to.
# 7.  Report Commit Details: Logs various details about the commit, repository, runner, etc., for debugging and record purposes.
# 8.  Instigate Workflow Runs: This job ensures no concurrency issues arise when triggering subsequent workflows.
# 9.  Check Concurrency: This ensures that no other workflow is currently running.
#     If another workflow is found running, it retries after a specified interval.
# 10. Check for Existent Lock File: Ensures that no lock file is present, which might indicate another ongoing process.
#     If a lock file is found, it retries after a specified interval.
# 11. Trigger Next Workflow: If all the previous checks pass successfully, this step triggers the next workflow.
#
# Exit Codes:
#
# 10 - Username contains invalid characters.
# 11 - Email format is invalid.
# 12 - Commit message contains an invalid character.
# 13 - SHA checkout failed.
# 14 - No branches found containing the commit.
# 15 - Multiple branches contain the commit.
# 16 - Failure locating .csproj file within the directory.
# 17 - Approved team is not set for the branch.
# 18 - Committer is not authorized.
# 19 - Another workflow from .github/workflows is still running.
# 20 - Failure due to lock file persistence.
# 90 - Failed to trigger next workflow.

on:
  push:
    branches: ["code-development", "code-production", "code-staging", "main"]

env:
  NEXT_WORKFLOW: Cache Dependencies

jobs:

  authenticate-user:
    name: Authenticate User
    runs-on: ubuntu-latest
    timeout-minutes: 15

    # un-comment to block execution
    #if: (github.actor != ${{ github.repository_owner }})

    steps:

    - name: Sanitise and Validate Untrusted User-Controlled Details
      run: |
      
        echo "##[info] Starting security sanitisation and validation."

        echo "##[debug] Git username can start and or end with an alphanumeric character."
        echo "##[debug] Can have hyphens but not at the start or end."
        echo "##[debug] Has a maximum length of 20 characters (including hyphens)."
        regex_pattern="^([a-z0-9](-?[a-z0-9]){0,19})$"

        username=$(echo ${{ github.event.head_commit.author.name }} | tr '[:upper:]' '[:lower:]')
        if ! [[ "$username" =~ ${regex_pattern} ]] || [[ "$username" == -* ]]; then
            echo "##[error] Username contains invalid characters" && exit 10
        fi

        echo "##[debug] Git email address can start with a sequence of letters, numbers and special characters (like ., _, %, +, and -),"
        echo "##[debug] followed by the @ symbol, then followed by a domain name consisting of letters, numbers, dots, and hyphens"
        echo "##[debug] and ending with a top-level domain of 2 to 4 letters.
        echo "##[debug] The inclusion of + in the local part allows it match GitHub's autogenerated email addresses.
        regex_pattern="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$"
        
        if ! [[ "${{ github.event.head_commit.author.email }}" =~ ${regex_pattern} ]]; then
            echo "##[error] Email format is invalid" && exit 11
        fi

        echo "##[debug] Commit messages cannot contain some dangerous chars, to inhibit injection of shell commands."       
        forbidden_array=("|" "<" ">" "(" ")" "{" "}" "*" "]")
        escaped_chars=$(printf "%s" "${forbidden_array[@]}" | tr -d ']' | sed 's/[]\\-^$/\\&/g')
        pattern="[$escaped_chars\\]"
        
        echo "##[debug] Using pattern $pattern"
        echo "##[debug] Checking if the commit_msg contains the pattern."
        
        if echo "$commit_msg" | grep -qE "$pattern"; then
            echo "##[error] Commit message ${commit_msg} contains invalid characters." && exit 12
        fi

        echo "##[info] Sanitisation and validation completed successfully."
        echo "COMMIT_AUTHOR_NAME=${{ github.event.head_commit.author.name }}" >> $GITHUB_ENV
        echo "COMMIT_AUTHOR_EMAIL=${{ github.event.head_commit.author.email }}" >> $GITHUB_ENV
        echo "COMMIT_MESSAGE=${{ github.event.head_commit.message }}" >> $GITHUB_ENV

    - name: Checkout SHA Repository
      id: checkout-sha
      uses: actions/checkout@v3.6.0
      with:
        ref: ${{ github.sha }}
        fetch-depth: 0 # deep fetch

    - name: Validate SHA
      run: |
      
        echo "##[info] Validating SHA checkout."
        if [[ "${{ steps.checkout-sha.outcome }}" == "failure" ]]; then
            echo "##[error] SHA checkout FAIL for ${{ github.sha }}" && exit 13
        fi
        echo "##[info] Successfully validated SHA checkout for ${{ github.sha }}."

    - name: Validate SHA Branch
      run: |
      
        echo "##[info] Validating SHA branch."

        echo "##[debug] Checking remote branches for the commit SHA"
        branch_list=$(git branch -r --contains ${{ github.sha }} | sed 's/origin\///' | xargs)
        if [[ -z "$branch_list" ]]; then
            echo "##[error] No branches found containing the commit in ${{ github.repository }}" && exit 14
        fi

        echo "##[debug] Checking if multiple branches contain the commit SHA"
        branch_count=$(echo $branch_list | wc -w)
        if [[ $branch_count -gt 1 ]]; then
            echo "##[error] Multiple branches contain the commit in ${{ github.repository }}: $branch_list" && exit 15
        fi
        branch=$(echo $branch_list | awk '{print $1}')

        echo "##[info] Successfully validated SHA branch name $branch."
        echo "SHA_BRANCH=$branch" >> $GITHUB_ENV

    - name: Validate .csproj
      run: |
      
        echo "##[info] Validating .csproj file."
        DIR_PATH="${{ github.workspace }}/$(echo "${{ env.SHA_BRANCH }}" | sed 's/^code-//')/${{ vars.PROJECT_NAME }}"
        CSPROJ="${DIR_PATH}/${{ vars.PROJECT_NAME }}.csproj"
        if [[ ! -f "$CSPROJ" ]]; then
            echo "##[error] Failure locating .csproj file within the directory $DIR_PATH" && exit 16
        fi
        echo "##[info] Successfully validated dotnet .csproj file $CSPROJ."
        echo "CSPROJ=$CSPROJ" >> $GITHUB_ENV

    - name: Validate Committer
      run: |
      
        echo "##[info] Authorising comitter ${{ env.COMMIT_AUTHOR_NAME }}."
        if [[ "${{ env.SHA_BRANCH }}" == "code-development" ]]; then
            APPROVED_TEAM="${{ github.repository_owner }},${{ secrets.DEVELOPMENT_TEAM }}"
        elif [[ "${{ env.SHA_BRANCH }}" == "code-staging" ]]; then
            APPROVED_TEAM="${{ github.repository_owner }},${{ secrets.STAGING_TEAM }}"
        elif [[ "${{ env.SHA_BRANCH }}" == "code-production" ]]; then
            APPROVED_TEAM="${{ github.repository_owner }},${{ secrets.PRODUCTION_TEAM }}"
        elif [[ "${{ env.SHA_BRANCH }}" == "main" ]]; then
            APPROVED_TEAM="${{ github.repository_owner }}"
        fi

        if [[ "$APPROVED_TEAM" == "" ]]; then
            echo "##[error] APPROVED TEAM $APPROVED_TEAM is not set for branch ${{ env.SHA_BRANCH }}" && exit 17
        fi

        if ! echo "$APPROVED_TEAM" | grep -qiE "(^|,)$COMMIT_AUTHOR_NAME(,|$)"; then
            echo "##[error] Committer $COMMIT_AUTHOR_NAME is not authorised." && exit 18
        fi

    - name: Report Commit Details
      run: |
      
        echo "Reporting details of the commit, GitHub environment and runner specifics."

        echo "-------------------------------------------------"
        echo "----- COMMIT DETAILS ----------------------------"
        echo "-------------------------------------------------"
        echo "Branch Name: ${{ env.SHA_BRANCH }}"
        echo "Commit SHA: ${{ github.sha }}"
        echo "Commit Message: $COMMIT_MESSAGE"
        echo "Commit Author: $COMMIT_AUTHOR_NAME"
        echo "Committer Email: $COMMIT_AUTHOR_EMAIL"
        echo "Pusher Name: ${{ github.event.pusher.name }}"
        echo "Actor: ${{ github.actor }}"

        echo "-------------------------------------------------"
        echo "----- GITHUB ENVIRONMENT & WORKFLOW DETAILS -----"
        echo "-------------------------------------------------"
        echo "Date: $(date)"
        echo "Event Name: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "Repository: ${{ github.repository }}"
        echo "Repository Owner: ${{ github.repository_owner }}"
        echo "Workflow Name: ${{ github.workflow }}"
        echo "GitHub Server URL: ${{ github.server_url }}"
        echo "GitHub API URL: ${{ github.api_url }}"
        echo "GitHub GraphQL URL: ${{ github.graphql_url }}"
        echo "Runner OS: ${{ runner.os }}"
        echo "Workspace: ${{ github.workspace }}"
        [ ! -z "${{ github.base_ref }}" ] && echo "Base Ref: ${{ github.base_ref }}"
        [ ! -z "${{ github.head_ref }}" ] && echo "Head Ref: ${{ github.head_ref }}"

        echo "-------------------------------------------------"
        echo "----- JOB, RUN AND RUNNER DETAILS ---------------"
        echo "-------------------------------------------------"
        echo "Job Name: ${{ github.job }}"
        echo "Event ID: ${{ github.run_id }}"
        echo "Run Number: ${{ github.run_number }}"
        echo "Runner Name: ${{ runner.name }}"
        echo "Runner Label: ${{ runner.label }}"
        echo "Runner Tool Cache: ${{ runner.tool_cache }}"
        echo "Runner Temp Directory: ${{ runner.temp }}"
        echo "GitHub Event Before: ${{ github.event.before }}"
        echo "GitHub Event After: ${{ github.event.after }}"
        echo "---------------------------------------"

  instigate-workflows:
    name: Instigate Workflow Runs
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: authenticate-user

    steps:

    - name: Checkout SHA Repository
      id: checkout-sha
      uses: actions/checkout@v3.6.0
      with:
        ref: ${{ github.sha }}
        fetch-depth: 0 # deep fetch
    
    - name: Check Concurrency
      run: |
      
        echo "##[info] Requesting non-concurrent slot."
        retries=0

        while [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; do
            echo "##[debug] Making API call to check for any in-progress workflows in the repository using curl."
            response=$(curl -L --fail \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.AUTH }}" \
              https://api.github.com/repos/${{ github.repository }}/actions/runs)

            echo "##[debug] Excluding the current workflow run from the list of in-progress workflows."
            others_count=$(echo "$response" | jq '.workflow_runs[] | select(.id != '${{ github.run_id }}' and .status == "in_progress")' | wc -l)

            echo "##[debug] Checking if another instance is running and if so, wait and retry."
            if [[ $others_count -eq 0 ]]; then
                echo "##[info] No other workflow is running - continuing."
                break
            else
                retries=$((retries+1))
                if [[ $retries -eq ${{ vars.MAX_RETRIES }} ]]; then
                    echo "##[error] Reached (${{ vars.MAX_RETRIES }}) max retries at ${{ vars.WAIT_MINUTES }} intervals."
                    echo "##[error] Another workflow from .github/workflows is still running." && exit 19
                fi
                echo "##[warn] Another workflow is running. Waiting for ${{ vars.WAIT_MINUTES }} minutes before retry $retries of ${{ vars.MAX_RETRIES }}."
                sleep $((${{ vars.WAIT_MINUTES }} * 60))
            fi
        done

    - name: Check for Existant Lock File
      run: |
      
        echo "##[info] Checking for lock file."

        echo "##[debug] Getting remote branch list that contain the given SHA."
        branch_list=$(git branch -r --contains ${{ github.sha }} | sed 's/origin\///' | xargs)
        branch=$(echo $branch_list | awk '{print $1}')
        
        if [[ $branch == "code-"* ]]; then
            lock_file=${branch#code-}.lock
        elif [[ $branch == "main" ]]; then
            lock_file=.main.lock
        fi

        retries=0
        git fetch origin $branch 
        git checkout $branch

        while [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; do
            commits_before_sha=$(git rev-list ${{ github.sha }}~1..$branch  --)
            
            if git ls-tree -r $commits_before_sha | grep "$lock_file"; then
                retries=$((retries+1))
                locked_sha=$(cat "$lock_file")
                echo "##[warn] Lock file $lock_file found for commit SHA $locked_sha."
                echo "##[warn] Waiting ${{ vars.WAIT_MINUTES }} minutes before retry $retries of ${{ vars.MAX_RETRIES }}."
                sleep $((${{ vars.WAIT_MINUTES }} * 60))
            else
                echo "##[info] Lock file $lock_file check passed - continuing."
                break
            fi
            
            if [[ $retries -eq ${{ vars.MAX_RETRIES }} ]]; then
                echo "##[error] Reached (${{ vars.MAX_RETRIES }}) max retries at ${{ vars.WAIT_MINUTES }} intervals."
                echo "##[error] Lock file $lock_file presence persists." && exit 20
            fi
        done
        echo "SHA_BRANCH=$branch" >> $GITHUB_ENV

    - name: Trigger Next Workflow
      if: success()
      run: |
      
        echo "##[info]## Triggering ${{ env.NEXT_WORKFLOW }}"

        DIR_PATH="${{ github.workspace }}/$(echo "${{ env.SHA_BRANCH }}" | sed 's/^code-//')/${{ vars.PROJECT_NAME }}"
        CSPROJ="${DIR_PATH}/${{ vars.PROJECT_NAME }}.csproj"

        CMD=$(echo "curl -L -X POST" \
        "-H \"Accept: application/vnd.github+json\"" \
        "-H \"Authorization: Bearer ${{ secrets.AUTH }}\"" \
        "-H \"X-GitHub-Api-Version: 2022-11-28\"" \
        "https://api.github.com/repos/${{ github.repository }}/dispatches" \
        "-d '{\"event_type\":\"${{ env.NEXT_WORKFLOW }}\"," \
        "\"client_payload\":{" \
        "\"sha\":\"${{ github.sha }}\"," \
        "\"csproj\":\"$CSPROJ\"}'")

        retries=0
        while [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; do
            eval "$CMD"
            CURL_EXIT_CODE=$?
            if [[ $CURL_EXIT_CODE -ne 0 ]]; then
                echo "##[error] Curl command failed on attempt $((retries+1)) with exit code $CURL_EXIT_CODE"
                retries=$((retries+1))
                if [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; then
                    echo "##[warn] Retrying in ${{ vars.WAIT_SECONDS }} seconds..."
                    sleep ${{ vars.WAIT_SECONDS }}
                else
                    echo "##[error] Exhausted ${{ vars.MAX_RETRIES }} retries at ${{ vars.WAIT_SECONDS }} intervals."
                    echo "##[error] Failed to trigger ${{ env.NEXT_WORKFLOW }} workflow with CURL command: $CMD." && exit 90
                fi
            else
                break # successful curl
            fi    
        done
        echo "##[debug] CURL command: $CMD"
