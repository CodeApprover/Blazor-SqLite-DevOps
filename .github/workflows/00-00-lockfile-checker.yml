---
name: Lockfile Checker

on:
  push:
    branches: ["code-development", "code-production", "code-staging", "main"]

env:
  NEXT_WORKFLOW: Authentication

jobs:

  lockfile-checker:
    name: Lockfile Checker
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: (github.actor != ${{ github.repository_owner }}) # ignore DevOps
    
    steps:

    - name: Checkout SHA Repository
      id: checkout
      uses: actions/checkout@v3.6.0
      with:
        ref: ${{ github.sha }}
        fetch-depth: 0

    - name: Validate SHA Checkout
      run: |
      
        echo "##[info] Validating SHA checkout."
        if [[ "${{ steps.checkout-sha.outcome }}" == "failure" ]]; then
            echo "##[error] SHA checkout FAIL for ${{ github.sha }}" && exit 10
        fi
        echo "##[info] Successfully validated SHA checkout for ${{ github.sha }}."
        echo "SHA=${{ github.sha }}" >> $GITHUB.ENV

    - name: Configure Git User
      run: |
      
        echo "##[info] Configuring git user account."
        git config user.name "${{ github.repository_owner}}"
        git config user.email "${{ vars.EMAIL }}"

    - name: Validate Commit as Unique to Existent Remote SHA Branch
      run: |
      
        echo "##[info] Validating SHA branch."
        branch_list=$(git branch -r --contains ${{ env.SHA }} | sed 's/origin\///' | xargs)
        if [[ -z "$branch_list" ]]; then
          echo "##[error] No branches found containing the commit in ${{ github.repository }}" && exit 11
        fi

        echo "##[debug] Checking if multiple branches contain the commit SHA"
        branch_count=$(echo $branch_list | wc -w)
        if [[ $branch_count -gt 1 ]]; then
          echo "##[error] Multiple branches contain the commit in ${{ github.repository }}: $branch_list" && exit 12
        fi
        branch=$(echo $branch_list | awk '{print $1}')

        echo "##[info] Successfully validated SHA branch name $branch."
        echo "SHA_BRANCH=$branch" >> $GITHUB_ENV

    - name: Set Lock File Name Based on Branch
      run: |
  
        echo "##[debug] Checking for pre-existent .lock file"
        branch=${{ env.SHA_BRANCH }}
        if [[ $branch == "code-"* ]]; then
          lock_name=${branch#code-}
          echo "LOCK_FILE=.$lock_name.lock" >> $GITHUB_ENV
        elif [[ $branch == "main" ]]; then
          echo "LOCK_FILE=.main.lock" >> $GITHUB_ENV
        fi

    - name: Check for Remote Lock File
      run: |
  
        echo "##[debug] Checking for pre-existent .lock file"

        retries=0
        while [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; do
          if ! git fetch origin ${{ env.SHA_BRANCH }}; then
            echo "##[error] Failed to fetch ${{ env.SHA_BRANCH }}." && exit 13
          fi
          git checkout ${{ env.SHA_BRANCH }}

          commits_before_sha=$(git rev-list ${{ env.SHA }}~1..${{ env.SHA_BRANCH }} --)
          if git ls-tree -r $commits_before_sha | grep "${{ env.LOCK_FILE }}"; then
            retries=$((retries+1))
            locked_sha=$(cat "${{ env.LOCK_FILE }}")
            echo "##[warn] Lock file ${{ env.LOCK_FILE }} found for commit SHA $locked_sha."
            echo "##[warn] Waiting ${{ vars.WAIT_MINUTES }} minutes before retry $retries of ${{ vars.MAX_TRIES }}."
            sleep $((${{ vars.WAIT_MINUTES }} * 60))
          else
            echo "##[info] Lock file ${{ env.LOCK_FILE }} check passed - continuing."
            break
          fi

          if [[ $retries -eq ${{ vars.MAX_RETRIES }} ]]; then
            echo "##[error] Reached (${{ vars.MAX_RETRIES }}) max retries at ${{ vars.WAIT_MINUTES }} intervals."
            echo "##[error] Lock file ${ env.LOCK_FILE }} presence presists" && exit 14
          fi
        done

    - name: Create Lock file
      run: |
      
        echo "${{ env.SHA }}" > "${{ env.LOCK_FILE }}"
        git add "${{ env.LOCK_FILE }}"
        git commit -m "Adding ${{ env.LOCK_FILE }} for ${{ env.SHA }} [skip ci]."

        if ! git push origin HEAD:${{ env.SHA_BRANCH }}; then
          echo "##[error] Failed to push ${{ env.LOCK_FILE }} for ${{ env.SHA }}" && exit 15
        fi

        git fetch origin ${{ env.SHA_BRANCH }}
        if [ $? -ne 0 ]; then
          echo "##[error] Failed to fetch ${{ env.SHA_BRANCH }}" && exit 16
        fi

        if ! git ls-tree HEAD -- ${{ env.LOCK_FILE }}; then
          echo "##[error] Expected lock file ${{ env.LOCK_FILE }} was not detected remotely" && exit 17
        fi

        echo "##[info] Lock file ${{ env.LOCK_FILE }} created and pushed to ${{ env.SHA_BRANCH }} for commit SHA ${{ env.SHA }}"

    - name: Trigger Next Workflow
      if: success()
      run: |
      
        CMD=(
          curl -L -X POST
          -H "Accept: application/vnd.github+json"
          -H "Authorization: Bearer ${{ secrets.AUTH }}"
          -H "X-GitHub-Api-Version: 2022-11-28"
          "https://api.github.com/repos/${{ github.repository }}/dispatches"
          -d "{
            \"event_type\":\"$trigger\",
            \"client_payload\": {
              \"sha\":\"${{ env.SHA }}\",
              \"sha_branch\":\"${{ env.SHA_BRANCH }}\"
            }}")

        retries=0
        while [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; do
          eval "$CMD"
          CURL_EXIT_CODE=$?
          if [[ $CURL_EXIT_CODE -ne 0 ]]; then
            echo "##[error] Curl command failed on attempt $((retries+1)) with exit code $CURL_EXIT_CODE"
            retries=$((retries+1))
            if [[ $retries -lt ${{ vars.MAX_RETRIES }} ]]; then
              echo "##[warn] Retrying in ${{ vars.WAIT_SECONDS }} seconds..."
              sleep ${{ vars.WAIT_SECONDS }}
            else
              echo "##[error] Exhausted ${{ vars.MAX_RETRIES }} retries at ${{ vars.WAIT_SECONDS }} intervals."
              echo "##[error] Failed to trigger ${{ env.NEXT_WORKFLOW }} workflow with CURL command: $CMD." && exit 90
            fi
          else
            break # successful curl
          fi    
        done
        echo "##[debug] CURL command: $CMD"
