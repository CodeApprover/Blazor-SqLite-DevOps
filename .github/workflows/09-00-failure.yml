---
name: Failure Gate

on:
  workflow_run:
    workflows:
      - Authentication Gate
      - Cache Dependencies
      - StyleCop Linter
      - Development Tests
      - Staging Tests
      - Production Tests
      - Lockfile Checker
      - Security Scan
      - Superlinter
      - Versioning
      - Deploy Docker
      - Deploy Git
      - Success
    types:
      - completed
env:
  GITHUB_TOKEN: ${{ secrets.AUTH }}

jobs:
  handle-workflow-failure:
    name: Handle Workflow Failure
    runs-on: ubuntu-latest
    timeout-minutes: 15

    if: ${{ github.event.workflow_run.conclusion != 'success' }}

    steps:

    - name: Configure Git User
      run: |
      
        git config user.name "${{ github.repository_owner}}"
        git config user.email "${{ vars.EMAIL }}"

    - name: Extract Branch Name
      run: |
      
        branch_name=${{ github.ref }}
        branch_name=${branch_name#refs/heads/}
        echo "BRANCH_NAME=$branch_name" >> $GITHUB_ENV
      
    - name: Check for Lock File to Populate SHA
      run: |
  
         # Search for lock file
         lock_file=$(find . -name "*.lock" | head -n 1)

         if [[ -n "$lock_file" ]]; then
            # Validate lock file content as SHA1
            sha=$(cat "$lock_file")
            if [[ ${#sha} -eq 40 && $sha =~ ^[0-9a-fA-F]+$ ]]; then
              # Get the SHA of the very last commit
              last_commit_sha=$(git log -1 --pretty=format:"%H")
              # Check if the lock file was modified by the very last commit
              if git diff-tree --no-commit-id --name-only -r $last_commit_sha | grep -q "^$lock_file$"; then
                # If so populate environment variable SHA
                echo "SHA=$sha" >> $GITHUB_ENV
              fi
            fi
          fi

    - name: Checkout Repository if Lock File SHA Found
      if: ${{ env.SHA }} != ''
      uses: actions/checkout@v3.6.0
      with:
        ref: ${{ env.SHA }}
        fetch-depth: 0

    - name: Revert Lock File and Original SHA Commits
      if: env.SHA != ''
      run: |
        # Revert the commit that created the lockfile == commit immediately after original commit
        git revert HEAD
    
        # Revert the commit that matches the SHA content of the lockfile == original commit
        git revert --no-commit ${{ env.SHA }}^..${{ env.SHA }}
    
        # Commit and push reverts
        git commit -m "Reverted commit ${{ env.SHA }} due to failed workflow."
        git push origin ${{ env.BRANCH_NAME }}
    
    - name: Revert Original SHA Commit Only
      if: env.SHA == ''
      run: |
        # Revert the SHA of the failed workflow
        git revert ${{ github.event.workflow_run.head_sha }}
    
        # Commit and push reverts
        git commit -m "Reverted commit ${{ github.event.workflow_run.head_sha }} due to failed workflow."
        git push origin ${{ env.BRANCH_NAME }}

    - name: Delete Latest Tag if Necessary
      run: |
      
        # Check if the failed workflow is one of the specified workflows
        if [[ "${{ github.event.workflow_run.name }}" == "Versioning" || "${{ github.event.workflow_run.name }}" == "Deploy Docker" || "${{ github.event.workflow_run.name }}" == "Deploy Git" || "${{ github.event.workflow_run.name }}" == "Success" ]]; then
          
          # Identify the latest tag
          latest_tag=$(git tag -l 'v*' | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1) # v1.2.3 SemVer
          
          # Check if the tag is associated with the latest commit
          tag_commit_sha=$(git rev-list -n 1 $latest_tag)
          latest_commit_sha=$(git rev-parse HEAD)
          
          if [[ "$tag_commit_sha" == "$latest_commit_sha" ]]; then
            # Delete the tag locally
            git tag -d $latest_tag
            # Delete the tag remotely
            git push origin :refs/tags/$latest_tag
          fi
        fi

    - name: Notify Developer of Revert by Creating an Issue
      run: |
      
        # Determine which SHA to use: the one from the lock file or the one from the failed workflow
        if [[ -z "${{ env.SHA }}" ]]; then
          SHA=${{ github.event.workflow_run.head_sha }}
        else
          SHA=${{ env.SHA }}
        fi

        # Fetch the name of the original committer of the commit with the determined SHA
        ORIGINAL_COMMITTER=$(git log --pretty=format:'%an' $SHA)

        # Construct the issue title and body
        ISSUE_TITLE="Commit Reverted: $SHA"
        ISSUE_BODY=$(echo "## Commit Reverted
          \n\nHello @$ORIGINAL_COMMITTER,
          \n\nYour commit `$SHA` has been reverted due to a failed workflow.
          \n\n**Workflow Details:**
          \n- **Name:** `${{ github.event.workflow_run.name }}`
          \n- **Conclusion:** `${{ github.event.workflow_run.conclusion }}`
          \n\n[View Workflow Run Details](${{ github.event.workflow_run.html_url }})
          \n\nPlease address any issues and try pushing again.
          \n\nThank you!")

        # Create an issue in the repository with the constructed title and body
        create_issue "$ISSUE_TITLE" "$ISSUE_BODY"

        create_issue() {
          local title=$1
          local body=$2
          CURL_CMD="curl -X POST"
          CURL_CMD+=" -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\""
          CURL_CMD+=" -H \"Accept: application/vnd.github.v3+json\""
          CURL_CMD+=" https://api.github.com/repos/${{ github.repository }}/issues"
          CURL_CMD+=" -d \"{\\\"title\\\":\\\"$title\\\",\\\"body\\\":\\\"$body\\\"}\""
          eval "$CURL_CMD"
        }  
